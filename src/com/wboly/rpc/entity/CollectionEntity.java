package com.wboly.rpc.entity;

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.EncodingUtils;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import javax.annotation.Generated;

@SuppressWarnings({"rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-11-24")
public class CollectionEntity implements org.apache.thrift.TBase<CollectionEntity, CollectionEntity._Fields>, java.io.Serializable, Cloneable, Comparable<CollectionEntity> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CollectionEntity");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("Id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SHOP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("shopId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField SHOP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("shopName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField GOODS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("goodsId", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField SUPPLIER_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("supplierUid", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField GOODS_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("goodsTitle", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField FACE_IMG_FIELD_DESC = new org.apache.thrift.protocol.TField("faceImg", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField RETAIL_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("retailPrice", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField RETAIL_BAC_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("retailBacLimit", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField MARKET_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("marketPrice", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("limit", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField ACTIVITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("activityId", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField SKU_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("skuId", org.apache.thrift.protocol.TType.I32, (short)15);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CollectionEntityStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CollectionEntityTupleSchemeFactory());
  }

  public int Id; // required
  public String userId; // required
  public int shopId; // required
  public String shopName; // required
  public int goodsId; // required
  public String supplierUid; // required
  public String goodsTitle; // required
  public String faceImg; // required
  public int retailPrice; // required
  public int retailBacLimit; // required
  public int marketPrice; // required
  public int limit; // required
  public int start; // required
  public int activityId; // required
  public int skuId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "Id"),
    USER_ID((short)2, "userId"),
    SHOP_ID((short)3, "shopId"),
    SHOP_NAME((short)4, "shopName"),
    GOODS_ID((short)5, "goodsId"),
    SUPPLIER_UID((short)6, "supplierUid"),
    GOODS_TITLE((short)7, "goodsTitle"),
    FACE_IMG((short)8, "faceImg"),
    RETAIL_PRICE((short)9, "retailPrice"),
    RETAIL_BAC_LIMIT((short)10, "retailBacLimit"),
    MARKET_PRICE((short)11, "marketPrice"),
    LIMIT((short)12, "limit"),
    START((short)13, "start"),
    ACTIVITY_ID((short)14, "activityId"),
    SKU_ID((short)15, "skuId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // USER_ID
          return USER_ID;
        case 3: // SHOP_ID
          return SHOP_ID;
        case 4: // SHOP_NAME
          return SHOP_NAME;
        case 5: // GOODS_ID
          return GOODS_ID;
        case 6: // SUPPLIER_UID
          return SUPPLIER_UID;
        case 7: // GOODS_TITLE
          return GOODS_TITLE;
        case 8: // FACE_IMG
          return FACE_IMG;
        case 9: // RETAIL_PRICE
          return RETAIL_PRICE;
        case 10: // RETAIL_BAC_LIMIT
          return RETAIL_BAC_LIMIT;
        case 11: // MARKET_PRICE
          return MARKET_PRICE;
        case 12: // LIMIT
          return LIMIT;
        case 13: // START
          return START;
        case 14: // ACTIVITY_ID
          return ACTIVITY_ID;
        case 15: // SKU_ID
          return SKU_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __SHOPID_ISSET_ID = 1;
  private static final int __GOODSID_ISSET_ID = 2;
  private static final int __RETAILPRICE_ISSET_ID = 3;
  private static final int __RETAILBACLIMIT_ISSET_ID = 4;
  private static final int __MARKETPRICE_ISSET_ID = 5;
  private static final int __LIMIT_ISSET_ID = 6;
  private static final int __START_ISSET_ID = 7;
  private static final int __ACTIVITYID_ISSET_ID = 8;
  private static final int __SKUID_ISSET_ID = 9;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("Id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHOP_ID, new org.apache.thrift.meta_data.FieldMetaData("shopId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SHOP_NAME, new org.apache.thrift.meta_data.FieldMetaData("shopName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GOODS_ID, new org.apache.thrift.meta_data.FieldMetaData("goodsId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SUPPLIER_UID, new org.apache.thrift.meta_data.FieldMetaData("supplierUid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GOODS_TITLE, new org.apache.thrift.meta_data.FieldMetaData("goodsTitle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FACE_IMG, new org.apache.thrift.meta_data.FieldMetaData("faceImg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RETAIL_PRICE, new org.apache.thrift.meta_data.FieldMetaData("retailPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RETAIL_BAC_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("retailBacLimit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MARKET_PRICE, new org.apache.thrift.meta_data.FieldMetaData("marketPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LIMIT, new org.apache.thrift.meta_data.FieldMetaData("limit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACTIVITY_ID, new org.apache.thrift.meta_data.FieldMetaData("activityId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SKU_ID, new org.apache.thrift.meta_data.FieldMetaData("skuId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CollectionEntity.class, metaDataMap);
  }

  public CollectionEntity() {
  }

  public CollectionEntity(
    int Id,
    String userId,
    int shopId,
    String shopName,
    int goodsId,
    String supplierUid,
    String goodsTitle,
    String faceImg,
    int retailPrice,
    int retailBacLimit,
    int marketPrice,
    int limit,
    int start,
    int activityId,
    int skuId)
  {
    this();
    this.Id = Id;
    setIdIsSet(true);
    this.userId = userId;
    this.shopId = shopId;
    setShopIdIsSet(true);
    this.shopName = shopName;
    this.goodsId = goodsId;
    setGoodsIdIsSet(true);
    this.supplierUid = supplierUid;
    this.goodsTitle = goodsTitle;
    this.faceImg = faceImg;
    this.retailPrice = retailPrice;
    setRetailPriceIsSet(true);
    this.retailBacLimit = retailBacLimit;
    setRetailBacLimitIsSet(true);
    this.marketPrice = marketPrice;
    setMarketPriceIsSet(true);
    this.limit = limit;
    setLimitIsSet(true);
    this.start = start;
    setStartIsSet(true);
    this.activityId = activityId;
    setActivityIdIsSet(true);
    this.skuId = skuId;
    setSkuIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CollectionEntity(CollectionEntity other) {
    __isset_bitfield = other.__isset_bitfield;
    this.Id = other.Id;
    if (other.isSetUserId()) {
      this.userId = other.userId;
    }
    this.shopId = other.shopId;
    if (other.isSetShopName()) {
      this.shopName = other.shopName;
    }
    this.goodsId = other.goodsId;
    if (other.isSetSupplierUid()) {
      this.supplierUid = other.supplierUid;
    }
    if (other.isSetGoodsTitle()) {
      this.goodsTitle = other.goodsTitle;
    }
    if (other.isSetFaceImg()) {
      this.faceImg = other.faceImg;
    }
    this.retailPrice = other.retailPrice;
    this.retailBacLimit = other.retailBacLimit;
    this.marketPrice = other.marketPrice;
    this.limit = other.limit;
    this.start = other.start;
    this.activityId = other.activityId;
    this.skuId = other.skuId;
  }

  public CollectionEntity deepCopy() {
    return new CollectionEntity(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.Id = 0;
    this.userId = null;
    setShopIdIsSet(false);
    this.shopId = 0;
    this.shopName = null;
    setGoodsIdIsSet(false);
    this.goodsId = 0;
    this.supplierUid = null;
    this.goodsTitle = null;
    this.faceImg = null;
    setRetailPriceIsSet(false);
    this.retailPrice = 0;
    setRetailBacLimitIsSet(false);
    this.retailBacLimit = 0;
    setMarketPriceIsSet(false);
    this.marketPrice = 0;
    setLimitIsSet(false);
    this.limit = 0;
    setStartIsSet(false);
    this.start = 0;
    setActivityIdIsSet(false);
    this.activityId = 0;
    setSkuIdIsSet(false);
    this.skuId = 0;
  }

  public int getId() {
    return this.Id;
  }

  public CollectionEntity setId(int Id) {
    this.Id = Id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field Id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getUserId() {
    return this.userId;
  }

  public CollectionEntity setUserId(String userId) {
    this.userId = userId;
    return this;
  }

  public void unsetUserId() {
    this.userId = null;
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return this.userId != null;
  }

  public void setUserIdIsSet(boolean value) {
    if (!value) {
      this.userId = null;
    }
  }

  public int getShopId() {
    return this.shopId;
  }

  public CollectionEntity setShopId(int shopId) {
    this.shopId = shopId;
    setShopIdIsSet(true);
    return this;
  }

  public void unsetShopId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOPID_ISSET_ID);
  }

  /** Returns true if field shopId is set (has been assigned a value) and false otherwise */
  public boolean isSetShopId() {
    return EncodingUtils.testBit(__isset_bitfield, __SHOPID_ISSET_ID);
  }

  public void setShopIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOPID_ISSET_ID, value);
  }

  public String getShopName() {
    return this.shopName;
  }

  public CollectionEntity setShopName(String shopName) {
    this.shopName = shopName;
    return this;
  }

  public void unsetShopName() {
    this.shopName = null;
  }

  /** Returns true if field shopName is set (has been assigned a value) and false otherwise */
  public boolean isSetShopName() {
    return this.shopName != null;
  }

  public void setShopNameIsSet(boolean value) {
    if (!value) {
      this.shopName = null;
    }
  }

  public int getGoodsId() {
    return this.goodsId;
  }

  public CollectionEntity setGoodsId(int goodsId) {
    this.goodsId = goodsId;
    setGoodsIdIsSet(true);
    return this;
  }

  public void unsetGoodsId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GOODSID_ISSET_ID);
  }

  /** Returns true if field goodsId is set (has been assigned a value) and false otherwise */
  public boolean isSetGoodsId() {
    return EncodingUtils.testBit(__isset_bitfield, __GOODSID_ISSET_ID);
  }

  public void setGoodsIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GOODSID_ISSET_ID, value);
  }

  public String getSupplierUid() {
    return this.supplierUid;
  }

  public CollectionEntity setSupplierUid(String supplierUid) {
    this.supplierUid = supplierUid;
    return this;
  }

  public void unsetSupplierUid() {
    this.supplierUid = null;
  }

  /** Returns true if field supplierUid is set (has been assigned a value) and false otherwise */
  public boolean isSetSupplierUid() {
    return this.supplierUid != null;
  }

  public void setSupplierUidIsSet(boolean value) {
    if (!value) {
      this.supplierUid = null;
    }
  }

  public String getGoodsTitle() {
    return this.goodsTitle;
  }

  public CollectionEntity setGoodsTitle(String goodsTitle) {
    this.goodsTitle = goodsTitle;
    return this;
  }

  public void unsetGoodsTitle() {
    this.goodsTitle = null;
  }

  /** Returns true if field goodsTitle is set (has been assigned a value) and false otherwise */
  public boolean isSetGoodsTitle() {
    return this.goodsTitle != null;
  }

  public void setGoodsTitleIsSet(boolean value) {
    if (!value) {
      this.goodsTitle = null;
    }
  }

  public String getFaceImg() {
    return this.faceImg;
  }

  public CollectionEntity setFaceImg(String faceImg) {
    this.faceImg = faceImg;
    return this;
  }

  public void unsetFaceImg() {
    this.faceImg = null;
  }

  /** Returns true if field faceImg is set (has been assigned a value) and false otherwise */
  public boolean isSetFaceImg() {
    return this.faceImg != null;
  }

  public void setFaceImgIsSet(boolean value) {
    if (!value) {
      this.faceImg = null;
    }
  }

  public int getRetailPrice() {
    return this.retailPrice;
  }

  public CollectionEntity setRetailPrice(int retailPrice) {
    this.retailPrice = retailPrice;
    setRetailPriceIsSet(true);
    return this;
  }

  public void unsetRetailPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RETAILPRICE_ISSET_ID);
  }

  /** Returns true if field retailPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetRetailPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __RETAILPRICE_ISSET_ID);
  }

  public void setRetailPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RETAILPRICE_ISSET_ID, value);
  }

  public int getRetailBacLimit() {
    return this.retailBacLimit;
  }

  public CollectionEntity setRetailBacLimit(int retailBacLimit) {
    this.retailBacLimit = retailBacLimit;
    setRetailBacLimitIsSet(true);
    return this;
  }

  public void unsetRetailBacLimit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RETAILBACLIMIT_ISSET_ID);
  }

  /** Returns true if field retailBacLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetRetailBacLimit() {
    return EncodingUtils.testBit(__isset_bitfield, __RETAILBACLIMIT_ISSET_ID);
  }

  public void setRetailBacLimitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RETAILBACLIMIT_ISSET_ID, value);
  }

  public int getMarketPrice() {
    return this.marketPrice;
  }

  public CollectionEntity setMarketPrice(int marketPrice) {
    this.marketPrice = marketPrice;
    setMarketPriceIsSet(true);
    return this;
  }

  public void unsetMarketPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MARKETPRICE_ISSET_ID);
  }

  /** Returns true if field marketPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetMarketPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __MARKETPRICE_ISSET_ID);
  }

  public void setMarketPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MARKETPRICE_ISSET_ID, value);
  }

  public int getLimit() {
    return this.limit;
  }

  public CollectionEntity setLimit(int limit) {
    this.limit = limit;
    setLimitIsSet(true);
    return this;
  }

  public void unsetLimit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMIT_ISSET_ID);
  }

  /** Returns true if field limit is set (has been assigned a value) and false otherwise */
  public boolean isSetLimit() {
    return EncodingUtils.testBit(__isset_bitfield, __LIMIT_ISSET_ID);
  }

  public void setLimitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMIT_ISSET_ID, value);
  }

  public int getStart() {
    return this.start;
  }

  public CollectionEntity setStart(int start) {
    this.start = start;
    setStartIsSet(true);
    return this;
  }

  public void unsetStart() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __START_ISSET_ID);
  }

  /** Returns true if field start is set (has been assigned a value) and false otherwise */
  public boolean isSetStart() {
    return EncodingUtils.testBit(__isset_bitfield, __START_ISSET_ID);
  }

  public void setStartIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __START_ISSET_ID, value);
  }

  public int getActivityId() {
    return this.activityId;
  }

  public CollectionEntity setActivityId(int activityId) {
    this.activityId = activityId;
    setActivityIdIsSet(true);
    return this;
  }

  public void unsetActivityId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIVITYID_ISSET_ID);
  }

  /** Returns true if field activityId is set (has been assigned a value) and false otherwise */
  public boolean isSetActivityId() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTIVITYID_ISSET_ID);
  }

  public void setActivityIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIVITYID_ISSET_ID, value);
  }

  public int getSkuId() {
    return this.skuId;
  }

  public CollectionEntity setSkuId(int skuId) {
    this.skuId = skuId;
    setSkuIdIsSet(true);
    return this;
  }

  public void unsetSkuId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SKUID_ISSET_ID);
  }

  /** Returns true if field skuId is set (has been assigned a value) and false otherwise */
  public boolean isSetSkuId() {
    return EncodingUtils.testBit(__isset_bitfield, __SKUID_ISSET_ID);
  }

  public void setSkuIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SKUID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((String)value);
      }
      break;

    case SHOP_ID:
      if (value == null) {
        unsetShopId();
      } else {
        setShopId((Integer)value);
      }
      break;

    case SHOP_NAME:
      if (value == null) {
        unsetShopName();
      } else {
        setShopName((String)value);
      }
      break;

    case GOODS_ID:
      if (value == null) {
        unsetGoodsId();
      } else {
        setGoodsId((Integer)value);
      }
      break;

    case SUPPLIER_UID:
      if (value == null) {
        unsetSupplierUid();
      } else {
        setSupplierUid((String)value);
      }
      break;

    case GOODS_TITLE:
      if (value == null) {
        unsetGoodsTitle();
      } else {
        setGoodsTitle((String)value);
      }
      break;

    case FACE_IMG:
      if (value == null) {
        unsetFaceImg();
      } else {
        setFaceImg((String)value);
      }
      break;

    case RETAIL_PRICE:
      if (value == null) {
        unsetRetailPrice();
      } else {
        setRetailPrice((Integer)value);
      }
      break;

    case RETAIL_BAC_LIMIT:
      if (value == null) {
        unsetRetailBacLimit();
      } else {
        setRetailBacLimit((Integer)value);
      }
      break;

    case MARKET_PRICE:
      if (value == null) {
        unsetMarketPrice();
      } else {
        setMarketPrice((Integer)value);
      }
      break;

    case LIMIT:
      if (value == null) {
        unsetLimit();
      } else {
        setLimit((Integer)value);
      }
      break;

    case START:
      if (value == null) {
        unsetStart();
      } else {
        setStart((Integer)value);
      }
      break;

    case ACTIVITY_ID:
      if (value == null) {
        unsetActivityId();
      } else {
        setActivityId((Integer)value);
      }
      break;

    case SKU_ID:
      if (value == null) {
        unsetSkuId();
      } else {
        setSkuId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case USER_ID:
      return getUserId();

    case SHOP_ID:
      return getShopId();

    case SHOP_NAME:
      return getShopName();

    case GOODS_ID:
      return getGoodsId();

    case SUPPLIER_UID:
      return getSupplierUid();

    case GOODS_TITLE:
      return getGoodsTitle();

    case FACE_IMG:
      return getFaceImg();

    case RETAIL_PRICE:
      return getRetailPrice();

    case RETAIL_BAC_LIMIT:
      return getRetailBacLimit();

    case MARKET_PRICE:
      return getMarketPrice();

    case LIMIT:
      return getLimit();

    case START:
      return getStart();

    case ACTIVITY_ID:
      return getActivityId();

    case SKU_ID:
      return getSkuId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case USER_ID:
      return isSetUserId();
    case SHOP_ID:
      return isSetShopId();
    case SHOP_NAME:
      return isSetShopName();
    case GOODS_ID:
      return isSetGoodsId();
    case SUPPLIER_UID:
      return isSetSupplierUid();
    case GOODS_TITLE:
      return isSetGoodsTitle();
    case FACE_IMG:
      return isSetFaceImg();
    case RETAIL_PRICE:
      return isSetRetailPrice();
    case RETAIL_BAC_LIMIT:
      return isSetRetailBacLimit();
    case MARKET_PRICE:
      return isSetMarketPrice();
    case LIMIT:
      return isSetLimit();
    case START:
      return isSetStart();
    case ACTIVITY_ID:
      return isSetActivityId();
    case SKU_ID:
      return isSetSkuId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CollectionEntity)
      return this.equals((CollectionEntity)that);
    return false;
  }

  public boolean equals(CollectionEntity that) {
    if (that == null)
      return false;

    boolean this_present_Id = true;
    boolean that_present_Id = true;
    if (this_present_Id || that_present_Id) {
      if (!(this_present_Id && that_present_Id))
        return false;
      if (this.Id != that.Id)
        return false;
    }

    boolean this_present_userId = true && this.isSetUserId();
    boolean that_present_userId = true && that.isSetUserId();
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (!this.userId.equals(that.userId))
        return false;
    }

    boolean this_present_shopId = true;
    boolean that_present_shopId = true;
    if (this_present_shopId || that_present_shopId) {
      if (!(this_present_shopId && that_present_shopId))
        return false;
      if (this.shopId != that.shopId)
        return false;
    }

    boolean this_present_shopName = true && this.isSetShopName();
    boolean that_present_shopName = true && that.isSetShopName();
    if (this_present_shopName || that_present_shopName) {
      if (!(this_present_shopName && that_present_shopName))
        return false;
      if (!this.shopName.equals(that.shopName))
        return false;
    }

    boolean this_present_goodsId = true;
    boolean that_present_goodsId = true;
    if (this_present_goodsId || that_present_goodsId) {
      if (!(this_present_goodsId && that_present_goodsId))
        return false;
      if (this.goodsId != that.goodsId)
        return false;
    }

    boolean this_present_supplierUid = true && this.isSetSupplierUid();
    boolean that_present_supplierUid = true && that.isSetSupplierUid();
    if (this_present_supplierUid || that_present_supplierUid) {
      if (!(this_present_supplierUid && that_present_supplierUid))
        return false;
      if (!this.supplierUid.equals(that.supplierUid))
        return false;
    }

    boolean this_present_goodsTitle = true && this.isSetGoodsTitle();
    boolean that_present_goodsTitle = true && that.isSetGoodsTitle();
    if (this_present_goodsTitle || that_present_goodsTitle) {
      if (!(this_present_goodsTitle && that_present_goodsTitle))
        return false;
      if (!this.goodsTitle.equals(that.goodsTitle))
        return false;
    }

    boolean this_present_faceImg = true && this.isSetFaceImg();
    boolean that_present_faceImg = true && that.isSetFaceImg();
    if (this_present_faceImg || that_present_faceImg) {
      if (!(this_present_faceImg && that_present_faceImg))
        return false;
      if (!this.faceImg.equals(that.faceImg))
        return false;
    }

    boolean this_present_retailPrice = true;
    boolean that_present_retailPrice = true;
    if (this_present_retailPrice || that_present_retailPrice) {
      if (!(this_present_retailPrice && that_present_retailPrice))
        return false;
      if (this.retailPrice != that.retailPrice)
        return false;
    }

    boolean this_present_retailBacLimit = true;
    boolean that_present_retailBacLimit = true;
    if (this_present_retailBacLimit || that_present_retailBacLimit) {
      if (!(this_present_retailBacLimit && that_present_retailBacLimit))
        return false;
      if (this.retailBacLimit != that.retailBacLimit)
        return false;
    }

    boolean this_present_marketPrice = true;
    boolean that_present_marketPrice = true;
    if (this_present_marketPrice || that_present_marketPrice) {
      if (!(this_present_marketPrice && that_present_marketPrice))
        return false;
      if (this.marketPrice != that.marketPrice)
        return false;
    }

    boolean this_present_limit = true;
    boolean that_present_limit = true;
    if (this_present_limit || that_present_limit) {
      if (!(this_present_limit && that_present_limit))
        return false;
      if (this.limit != that.limit)
        return false;
    }

    boolean this_present_start = true;
    boolean that_present_start = true;
    if (this_present_start || that_present_start) {
      if (!(this_present_start && that_present_start))
        return false;
      if (this.start != that.start)
        return false;
    }

    boolean this_present_activityId = true;
    boolean that_present_activityId = true;
    if (this_present_activityId || that_present_activityId) {
      if (!(this_present_activityId && that_present_activityId))
        return false;
      if (this.activityId != that.activityId)
        return false;
    }

    boolean this_present_skuId = true;
    boolean that_present_skuId = true;
    if (this_present_skuId || that_present_skuId) {
      if (!(this_present_skuId && that_present_skuId))
        return false;
      if (this.skuId != that.skuId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_Id = true;
    list.add(present_Id);
    if (present_Id)
      list.add(Id);

    boolean present_userId = true && (isSetUserId());
    list.add(present_userId);
    if (present_userId)
      list.add(userId);

    boolean present_shopId = true;
    list.add(present_shopId);
    if (present_shopId)
      list.add(shopId);

    boolean present_shopName = true && (isSetShopName());
    list.add(present_shopName);
    if (present_shopName)
      list.add(shopName);

    boolean present_goodsId = true;
    list.add(present_goodsId);
    if (present_goodsId)
      list.add(goodsId);

    boolean present_supplierUid = true && (isSetSupplierUid());
    list.add(present_supplierUid);
    if (present_supplierUid)
      list.add(supplierUid);

    boolean present_goodsTitle = true && (isSetGoodsTitle());
    list.add(present_goodsTitle);
    if (present_goodsTitle)
      list.add(goodsTitle);

    boolean present_faceImg = true && (isSetFaceImg());
    list.add(present_faceImg);
    if (present_faceImg)
      list.add(faceImg);

    boolean present_retailPrice = true;
    list.add(present_retailPrice);
    if (present_retailPrice)
      list.add(retailPrice);

    boolean present_retailBacLimit = true;
    list.add(present_retailBacLimit);
    if (present_retailBacLimit)
      list.add(retailBacLimit);

    boolean present_marketPrice = true;
    list.add(present_marketPrice);
    if (present_marketPrice)
      list.add(marketPrice);

    boolean present_limit = true;
    list.add(present_limit);
    if (present_limit)
      list.add(limit);

    boolean present_start = true;
    list.add(present_start);
    if (present_start)
      list.add(start);

    boolean present_activityId = true;
    list.add(present_activityId);
    if (present_activityId)
      list.add(activityId);

    boolean present_skuId = true;
    list.add(present_skuId);
    if (present_skuId)
      list.add(skuId);

    return list.hashCode();
  }

  @Override
  public int compareTo(CollectionEntity other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Id, other.Id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShopId()).compareTo(other.isSetShopId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShopId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shopId, other.shopId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShopName()).compareTo(other.isSetShopName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShopName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shopName, other.shopName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGoodsId()).compareTo(other.isSetGoodsId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGoodsId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.goodsId, other.goodsId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSupplierUid()).compareTo(other.isSetSupplierUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSupplierUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.supplierUid, other.supplierUid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGoodsTitle()).compareTo(other.isSetGoodsTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGoodsTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.goodsTitle, other.goodsTitle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFaceImg()).compareTo(other.isSetFaceImg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFaceImg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.faceImg, other.faceImg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRetailPrice()).compareTo(other.isSetRetailPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRetailPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.retailPrice, other.retailPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRetailBacLimit()).compareTo(other.isSetRetailBacLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRetailBacLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.retailBacLimit, other.retailBacLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMarketPrice()).compareTo(other.isSetMarketPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMarketPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.marketPrice, other.marketPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLimit()).compareTo(other.isSetLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limit, other.limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStart()).compareTo(other.isSetStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, other.start);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActivityId()).compareTo(other.isSetActivityId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActivityId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activityId, other.activityId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSkuId()).compareTo(other.isSetSkuId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSkuId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.skuId, other.skuId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CollectionEntity(");
    boolean first = true;

    sb.append("Id:");
    sb.append(this.Id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userId:");
    if (this.userId == null) {
      sb.append("null");
    } else {
      sb.append(this.userId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("shopId:");
    sb.append(this.shopId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shopName:");
    if (this.shopName == null) {
      sb.append("null");
    } else {
      sb.append(this.shopName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("goodsId:");
    sb.append(this.goodsId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("supplierUid:");
    if (this.supplierUid == null) {
      sb.append("null");
    } else {
      sb.append(this.supplierUid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("goodsTitle:");
    if (this.goodsTitle == null) {
      sb.append("null");
    } else {
      sb.append(this.goodsTitle);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("faceImg:");
    if (this.faceImg == null) {
      sb.append("null");
    } else {
      sb.append(this.faceImg);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("retailPrice:");
    sb.append(this.retailPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("retailBacLimit:");
    sb.append(this.retailBacLimit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("marketPrice:");
    sb.append(this.marketPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("limit:");
    sb.append(this.limit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("start:");
    sb.append(this.start);
    first = false;
    if (!first) sb.append(", ");
    sb.append("activityId:");
    sb.append(this.activityId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("skuId:");
    sb.append(this.skuId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CollectionEntityStandardSchemeFactory implements SchemeFactory {
    public CollectionEntityStandardScheme getScheme() {
      return new CollectionEntityStandardScheme();
    }
  }

  private static class CollectionEntityStandardScheme extends StandardScheme<CollectionEntity> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CollectionEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.Id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userId = iprot.readString();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SHOP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.shopId = iprot.readI32();
              struct.setShopIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SHOP_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.shopName = iprot.readString();
              struct.setShopNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // GOODS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.goodsId = iprot.readI32();
              struct.setGoodsIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SUPPLIER_UID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.supplierUid = iprot.readString();
              struct.setSupplierUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // GOODS_TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.goodsTitle = iprot.readString();
              struct.setGoodsTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FACE_IMG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.faceImg = iprot.readString();
              struct.setFaceImgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // RETAIL_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.retailPrice = iprot.readI32();
              struct.setRetailPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // RETAIL_BAC_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.retailBacLimit = iprot.readI32();
              struct.setRetailBacLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // MARKET_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.marketPrice = iprot.readI32();
              struct.setMarketPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.limit = iprot.readI32();
              struct.setLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // START
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.start = iprot.readI32();
              struct.setStartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // ACTIVITY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.activityId = iprot.readI32();
              struct.setActivityIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // SKU_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.skuId = iprot.readI32();
              struct.setSkuIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CollectionEntity struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.Id);
      oprot.writeFieldEnd();
      if (struct.userId != null) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeString(struct.userId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SHOP_ID_FIELD_DESC);
      oprot.writeI32(struct.shopId);
      oprot.writeFieldEnd();
      if (struct.shopName != null) {
        oprot.writeFieldBegin(SHOP_NAME_FIELD_DESC);
        oprot.writeString(struct.shopName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(GOODS_ID_FIELD_DESC);
      oprot.writeI32(struct.goodsId);
      oprot.writeFieldEnd();
      if (struct.supplierUid != null) {
        oprot.writeFieldBegin(SUPPLIER_UID_FIELD_DESC);
        oprot.writeString(struct.supplierUid);
        oprot.writeFieldEnd();
      }
      if (struct.goodsTitle != null) {
        oprot.writeFieldBegin(GOODS_TITLE_FIELD_DESC);
        oprot.writeString(struct.goodsTitle);
        oprot.writeFieldEnd();
      }
      if (struct.faceImg != null) {
        oprot.writeFieldBegin(FACE_IMG_FIELD_DESC);
        oprot.writeString(struct.faceImg);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RETAIL_PRICE_FIELD_DESC);
      oprot.writeI32(struct.retailPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RETAIL_BAC_LIMIT_FIELD_DESC);
      oprot.writeI32(struct.retailBacLimit);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MARKET_PRICE_FIELD_DESC);
      oprot.writeI32(struct.marketPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LIMIT_FIELD_DESC);
      oprot.writeI32(struct.limit);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(START_FIELD_DESC);
      oprot.writeI32(struct.start);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACTIVITY_ID_FIELD_DESC);
      oprot.writeI32(struct.activityId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SKU_ID_FIELD_DESC);
      oprot.writeI32(struct.skuId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CollectionEntityTupleSchemeFactory implements SchemeFactory {
    public CollectionEntityTupleScheme getScheme() {
      return new CollectionEntityTupleScheme();
    }
  }

  private static class CollectionEntityTupleScheme extends TupleScheme<CollectionEntity> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CollectionEntity struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetUserId()) {
        optionals.set(1);
      }
      if (struct.isSetShopId()) {
        optionals.set(2);
      }
      if (struct.isSetShopName()) {
        optionals.set(3);
      }
      if (struct.isSetGoodsId()) {
        optionals.set(4);
      }
      if (struct.isSetSupplierUid()) {
        optionals.set(5);
      }
      if (struct.isSetGoodsTitle()) {
        optionals.set(6);
      }
      if (struct.isSetFaceImg()) {
        optionals.set(7);
      }
      if (struct.isSetRetailPrice()) {
        optionals.set(8);
      }
      if (struct.isSetRetailBacLimit()) {
        optionals.set(9);
      }
      if (struct.isSetMarketPrice()) {
        optionals.set(10);
      }
      if (struct.isSetLimit()) {
        optionals.set(11);
      }
      if (struct.isSetStart()) {
        optionals.set(12);
      }
      if (struct.isSetActivityId()) {
        optionals.set(13);
      }
      if (struct.isSetSkuId()) {
        optionals.set(14);
      }
      oprot.writeBitSet(optionals, 15);
      if (struct.isSetId()) {
        oprot.writeI32(struct.Id);
      }
      if (struct.isSetUserId()) {
        oprot.writeString(struct.userId);
      }
      if (struct.isSetShopId()) {
        oprot.writeI32(struct.shopId);
      }
      if (struct.isSetShopName()) {
        oprot.writeString(struct.shopName);
      }
      if (struct.isSetGoodsId()) {
        oprot.writeI32(struct.goodsId);
      }
      if (struct.isSetSupplierUid()) {
        oprot.writeString(struct.supplierUid);
      }
      if (struct.isSetGoodsTitle()) {
        oprot.writeString(struct.goodsTitle);
      }
      if (struct.isSetFaceImg()) {
        oprot.writeString(struct.faceImg);
      }
      if (struct.isSetRetailPrice()) {
        oprot.writeI32(struct.retailPrice);
      }
      if (struct.isSetRetailBacLimit()) {
        oprot.writeI32(struct.retailBacLimit);
      }
      if (struct.isSetMarketPrice()) {
        oprot.writeI32(struct.marketPrice);
      }
      if (struct.isSetLimit()) {
        oprot.writeI32(struct.limit);
      }
      if (struct.isSetStart()) {
        oprot.writeI32(struct.start);
      }
      if (struct.isSetActivityId()) {
        oprot.writeI32(struct.activityId);
      }
      if (struct.isSetSkuId()) {
        oprot.writeI32(struct.skuId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CollectionEntity struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(15);
      if (incoming.get(0)) {
        struct.Id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.userId = iprot.readString();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.shopId = iprot.readI32();
        struct.setShopIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.shopName = iprot.readString();
        struct.setShopNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.goodsId = iprot.readI32();
        struct.setGoodsIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.supplierUid = iprot.readString();
        struct.setSupplierUidIsSet(true);
      }
      if (incoming.get(6)) {
        struct.goodsTitle = iprot.readString();
        struct.setGoodsTitleIsSet(true);
      }
      if (incoming.get(7)) {
        struct.faceImg = iprot.readString();
        struct.setFaceImgIsSet(true);
      }
      if (incoming.get(8)) {
        struct.retailPrice = iprot.readI32();
        struct.setRetailPriceIsSet(true);
      }
      if (incoming.get(9)) {
        struct.retailBacLimit = iprot.readI32();
        struct.setRetailBacLimitIsSet(true);
      }
      if (incoming.get(10)) {
        struct.marketPrice = iprot.readI32();
        struct.setMarketPriceIsSet(true);
      }
      if (incoming.get(11)) {
        struct.limit = iprot.readI32();
        struct.setLimitIsSet(true);
      }
      if (incoming.get(12)) {
        struct.start = iprot.readI32();
        struct.setStartIsSet(true);
      }
      if (incoming.get(13)) {
        struct.activityId = iprot.readI32();
        struct.setActivityIdIsSet(true);
      }
      if (incoming.get(14)) {
        struct.skuId = iprot.readI32();
        struct.setSkuIdIsSet(true);
      }
    }
  }

}


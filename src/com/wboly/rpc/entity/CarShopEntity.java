package com.wboly.rpc.entity;

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.EncodingUtils;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import javax.annotation.Generated;

@SuppressWarnings({"rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-11-24")
public class CarShopEntity implements org.apache.thrift.TBase<CarShopEntity, CarShopEntity._Fields>, java.io.Serializable, Cloneable, Comparable<CarShopEntity> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CarShopEntity");

  private static final org.apache.thrift.protocol.TField BUYER_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("buyerUid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SHOP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("shopId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField GOODS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("goodsId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField SKU_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("skuId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField SUPPLIER_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("supplierUid", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("num", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField GOODS_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("goodsTitle", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField SINGLE_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("singlePrice", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField IMG_FIELD_DESC = new org.apache.thrift.protocol.TField("img", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("limit", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("ids", org.apache.thrift.protocol.TType.STRING, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CarShopEntityStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CarShopEntityTupleSchemeFactory());
  }

  public String buyerUid; // required
  public int shopId; // required
  public int goodsId; // required
  public int skuId; // required
  public String supplierUid; // required
  public int num; // required
  public String goodsTitle; // required
  public int singlePrice; // required
  public String img; // required
  public int limit; // required
  public int start; // required
  public String ids; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BUYER_UID((short)1, "buyerUid"),
    SHOP_ID((short)2, "shopId"),
    GOODS_ID((short)3, "goodsId"),
    SKU_ID((short)4, "skuId"),
    SUPPLIER_UID((short)5, "supplierUid"),
    NUM((short)6, "num"),
    GOODS_TITLE((short)7, "goodsTitle"),
    SINGLE_PRICE((short)8, "singlePrice"),
    IMG((short)9, "img"),
    LIMIT((short)10, "limit"),
    START((short)11, "start"),
    IDS((short)12, "ids");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BUYER_UID
          return BUYER_UID;
        case 2: // SHOP_ID
          return SHOP_ID;
        case 3: // GOODS_ID
          return GOODS_ID;
        case 4: // SKU_ID
          return SKU_ID;
        case 5: // SUPPLIER_UID
          return SUPPLIER_UID;
        case 6: // NUM
          return NUM;
        case 7: // GOODS_TITLE
          return GOODS_TITLE;
        case 8: // SINGLE_PRICE
          return SINGLE_PRICE;
        case 9: // IMG
          return IMG;
        case 10: // LIMIT
          return LIMIT;
        case 11: // START
          return START;
        case 12: // IDS
          return IDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SHOPID_ISSET_ID = 0;
  private static final int __GOODSID_ISSET_ID = 1;
  private static final int __SKUID_ISSET_ID = 2;
  private static final int __NUM_ISSET_ID = 3;
  private static final int __SINGLEPRICE_ISSET_ID = 4;
  private static final int __LIMIT_ISSET_ID = 5;
  private static final int __START_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BUYER_UID, new org.apache.thrift.meta_data.FieldMetaData("buyerUid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHOP_ID, new org.apache.thrift.meta_data.FieldMetaData("shopId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GOODS_ID, new org.apache.thrift.meta_data.FieldMetaData("goodsId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SKU_ID, new org.apache.thrift.meta_data.FieldMetaData("skuId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SUPPLIER_UID, new org.apache.thrift.meta_data.FieldMetaData("supplierUid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NUM, new org.apache.thrift.meta_data.FieldMetaData("num", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GOODS_TITLE, new org.apache.thrift.meta_data.FieldMetaData("goodsTitle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SINGLE_PRICE, new org.apache.thrift.meta_data.FieldMetaData("singlePrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IMG, new org.apache.thrift.meta_data.FieldMetaData("img", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LIMIT, new org.apache.thrift.meta_data.FieldMetaData("limit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IDS, new org.apache.thrift.meta_data.FieldMetaData("ids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CarShopEntity.class, metaDataMap);
  }

  public CarShopEntity() {
  }

  public CarShopEntity(
    String buyerUid,
    int shopId,
    int goodsId,
    int skuId,
    String supplierUid,
    int num,
    String goodsTitle,
    int singlePrice,
    String img,
    int limit,
    int start,
    String ids)
  {
    this();
    this.buyerUid = buyerUid;
    this.shopId = shopId;
    setShopIdIsSet(true);
    this.goodsId = goodsId;
    setGoodsIdIsSet(true);
    this.skuId = skuId;
    setSkuIdIsSet(true);
    this.supplierUid = supplierUid;
    this.num = num;
    setNumIsSet(true);
    this.goodsTitle = goodsTitle;
    this.singlePrice = singlePrice;
    setSinglePriceIsSet(true);
    this.img = img;
    this.limit = limit;
    setLimitIsSet(true);
    this.start = start;
    setStartIsSet(true);
    this.ids = ids;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CarShopEntity(CarShopEntity other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetBuyerUid()) {
      this.buyerUid = other.buyerUid;
    }
    this.shopId = other.shopId;
    this.goodsId = other.goodsId;
    this.skuId = other.skuId;
    if (other.isSetSupplierUid()) {
      this.supplierUid = other.supplierUid;
    }
    this.num = other.num;
    if (other.isSetGoodsTitle()) {
      this.goodsTitle = other.goodsTitle;
    }
    this.singlePrice = other.singlePrice;
    if (other.isSetImg()) {
      this.img = other.img;
    }
    this.limit = other.limit;
    this.start = other.start;
    if (other.isSetIds()) {
      this.ids = other.ids;
    }
  }

  public CarShopEntity deepCopy() {
    return new CarShopEntity(this);
  }

  @Override
  public void clear() {
    this.buyerUid = null;
    setShopIdIsSet(false);
    this.shopId = 0;
    setGoodsIdIsSet(false);
    this.goodsId = 0;
    setSkuIdIsSet(false);
    this.skuId = 0;
    this.supplierUid = null;
    setNumIsSet(false);
    this.num = 0;
    this.goodsTitle = null;
    setSinglePriceIsSet(false);
    this.singlePrice = 0;
    this.img = null;
    setLimitIsSet(false);
    this.limit = 0;
    setStartIsSet(false);
    this.start = 0;
    this.ids = null;
  }

  public String getBuyerUid() {
    return this.buyerUid;
  }

  public CarShopEntity setBuyerUid(String buyerUid) {
    this.buyerUid = buyerUid;
    return this;
  }

  public void unsetBuyerUid() {
    this.buyerUid = null;
  }

  /** Returns true if field buyerUid is set (has been assigned a value) and false otherwise */
  public boolean isSetBuyerUid() {
    return this.buyerUid != null;
  }

  public void setBuyerUidIsSet(boolean value) {
    if (!value) {
      this.buyerUid = null;
    }
  }

  public int getShopId() {
    return this.shopId;
  }

  public CarShopEntity setShopId(int shopId) {
    this.shopId = shopId;
    setShopIdIsSet(true);
    return this;
  }

  public void unsetShopId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOPID_ISSET_ID);
  }

  /** Returns true if field shopId is set (has been assigned a value) and false otherwise */
  public boolean isSetShopId() {
    return EncodingUtils.testBit(__isset_bitfield, __SHOPID_ISSET_ID);
  }

  public void setShopIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOPID_ISSET_ID, value);
  }

  public int getGoodsId() {
    return this.goodsId;
  }

  public CarShopEntity setGoodsId(int goodsId) {
    this.goodsId = goodsId;
    setGoodsIdIsSet(true);
    return this;
  }

  public void unsetGoodsId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GOODSID_ISSET_ID);
  }

  /** Returns true if field goodsId is set (has been assigned a value) and false otherwise */
  public boolean isSetGoodsId() {
    return EncodingUtils.testBit(__isset_bitfield, __GOODSID_ISSET_ID);
  }

  public void setGoodsIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GOODSID_ISSET_ID, value);
  }

  public int getSkuId() {
    return this.skuId;
  }

  public CarShopEntity setSkuId(int skuId) {
    this.skuId = skuId;
    setSkuIdIsSet(true);
    return this;
  }

  public void unsetSkuId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SKUID_ISSET_ID);
  }

  /** Returns true if field skuId is set (has been assigned a value) and false otherwise */
  public boolean isSetSkuId() {
    return EncodingUtils.testBit(__isset_bitfield, __SKUID_ISSET_ID);
  }

  public void setSkuIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SKUID_ISSET_ID, value);
  }

  public String getSupplierUid() {
    return this.supplierUid;
  }

  public CarShopEntity setSupplierUid(String supplierUid) {
    this.supplierUid = supplierUid;
    return this;
  }

  public void unsetSupplierUid() {
    this.supplierUid = null;
  }

  /** Returns true if field supplierUid is set (has been assigned a value) and false otherwise */
  public boolean isSetSupplierUid() {
    return this.supplierUid != null;
  }

  public void setSupplierUidIsSet(boolean value) {
    if (!value) {
      this.supplierUid = null;
    }
  }

  public int getNum() {
    return this.num;
  }

  public CarShopEntity setNum(int num) {
    this.num = num;
    setNumIsSet(true);
    return this;
  }

  public void unsetNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_ISSET_ID);
  }

  /** Returns true if field num is set (has been assigned a value) and false otherwise */
  public boolean isSetNum() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM_ISSET_ID);
  }

  public void setNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_ISSET_ID, value);
  }

  public String getGoodsTitle() {
    return this.goodsTitle;
  }

  public CarShopEntity setGoodsTitle(String goodsTitle) {
    this.goodsTitle = goodsTitle;
    return this;
  }

  public void unsetGoodsTitle() {
    this.goodsTitle = null;
  }

  /** Returns true if field goodsTitle is set (has been assigned a value) and false otherwise */
  public boolean isSetGoodsTitle() {
    return this.goodsTitle != null;
  }

  public void setGoodsTitleIsSet(boolean value) {
    if (!value) {
      this.goodsTitle = null;
    }
  }

  public int getSinglePrice() {
    return this.singlePrice;
  }

  public CarShopEntity setSinglePrice(int singlePrice) {
    this.singlePrice = singlePrice;
    setSinglePriceIsSet(true);
    return this;
  }

  public void unsetSinglePrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SINGLEPRICE_ISSET_ID);
  }

  /** Returns true if field singlePrice is set (has been assigned a value) and false otherwise */
  public boolean isSetSinglePrice() {
    return EncodingUtils.testBit(__isset_bitfield, __SINGLEPRICE_ISSET_ID);
  }

  public void setSinglePriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SINGLEPRICE_ISSET_ID, value);
  }

  public String getImg() {
    return this.img;
  }

  public CarShopEntity setImg(String img) {
    this.img = img;
    return this;
  }

  public void unsetImg() {
    this.img = null;
  }

  /** Returns true if field img is set (has been assigned a value) and false otherwise */
  public boolean isSetImg() {
    return this.img != null;
  }

  public void setImgIsSet(boolean value) {
    if (!value) {
      this.img = null;
    }
  }

  public int getLimit() {
    return this.limit;
  }

  public CarShopEntity setLimit(int limit) {
    this.limit = limit;
    setLimitIsSet(true);
    return this;
  }

  public void unsetLimit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMIT_ISSET_ID);
  }

  /** Returns true if field limit is set (has been assigned a value) and false otherwise */
  public boolean isSetLimit() {
    return EncodingUtils.testBit(__isset_bitfield, __LIMIT_ISSET_ID);
  }

  public void setLimitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMIT_ISSET_ID, value);
  }

  public int getStart() {
    return this.start;
  }

  public CarShopEntity setStart(int start) {
    this.start = start;
    setStartIsSet(true);
    return this;
  }

  public void unsetStart() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __START_ISSET_ID);
  }

  /** Returns true if field start is set (has been assigned a value) and false otherwise */
  public boolean isSetStart() {
    return EncodingUtils.testBit(__isset_bitfield, __START_ISSET_ID);
  }

  public void setStartIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __START_ISSET_ID, value);
  }

  public String getIds() {
    return this.ids;
  }

  public CarShopEntity setIds(String ids) {
    this.ids = ids;
    return this;
  }

  public void unsetIds() {
    this.ids = null;
  }

  /** Returns true if field ids is set (has been assigned a value) and false otherwise */
  public boolean isSetIds() {
    return this.ids != null;
  }

  public void setIdsIsSet(boolean value) {
    if (!value) {
      this.ids = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BUYER_UID:
      if (value == null) {
        unsetBuyerUid();
      } else {
        setBuyerUid((String)value);
      }
      break;

    case SHOP_ID:
      if (value == null) {
        unsetShopId();
      } else {
        setShopId((Integer)value);
      }
      break;

    case GOODS_ID:
      if (value == null) {
        unsetGoodsId();
      } else {
        setGoodsId((Integer)value);
      }
      break;

    case SKU_ID:
      if (value == null) {
        unsetSkuId();
      } else {
        setSkuId((Integer)value);
      }
      break;

    case SUPPLIER_UID:
      if (value == null) {
        unsetSupplierUid();
      } else {
        setSupplierUid((String)value);
      }
      break;

    case NUM:
      if (value == null) {
        unsetNum();
      } else {
        setNum((Integer)value);
      }
      break;

    case GOODS_TITLE:
      if (value == null) {
        unsetGoodsTitle();
      } else {
        setGoodsTitle((String)value);
      }
      break;

    case SINGLE_PRICE:
      if (value == null) {
        unsetSinglePrice();
      } else {
        setSinglePrice((Integer)value);
      }
      break;

    case IMG:
      if (value == null) {
        unsetImg();
      } else {
        setImg((String)value);
      }
      break;

    case LIMIT:
      if (value == null) {
        unsetLimit();
      } else {
        setLimit((Integer)value);
      }
      break;

    case START:
      if (value == null) {
        unsetStart();
      } else {
        setStart((Integer)value);
      }
      break;

    case IDS:
      if (value == null) {
        unsetIds();
      } else {
        setIds((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BUYER_UID:
      return getBuyerUid();

    case SHOP_ID:
      return getShopId();

    case GOODS_ID:
      return getGoodsId();

    case SKU_ID:
      return getSkuId();

    case SUPPLIER_UID:
      return getSupplierUid();

    case NUM:
      return getNum();

    case GOODS_TITLE:
      return getGoodsTitle();

    case SINGLE_PRICE:
      return getSinglePrice();

    case IMG:
      return getImg();

    case LIMIT:
      return getLimit();

    case START:
      return getStart();

    case IDS:
      return getIds();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BUYER_UID:
      return isSetBuyerUid();
    case SHOP_ID:
      return isSetShopId();
    case GOODS_ID:
      return isSetGoodsId();
    case SKU_ID:
      return isSetSkuId();
    case SUPPLIER_UID:
      return isSetSupplierUid();
    case NUM:
      return isSetNum();
    case GOODS_TITLE:
      return isSetGoodsTitle();
    case SINGLE_PRICE:
      return isSetSinglePrice();
    case IMG:
      return isSetImg();
    case LIMIT:
      return isSetLimit();
    case START:
      return isSetStart();
    case IDS:
      return isSetIds();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CarShopEntity)
      return this.equals((CarShopEntity)that);
    return false;
  }

  public boolean equals(CarShopEntity that) {
    if (that == null)
      return false;

    boolean this_present_buyerUid = true && this.isSetBuyerUid();
    boolean that_present_buyerUid = true && that.isSetBuyerUid();
    if (this_present_buyerUid || that_present_buyerUid) {
      if (!(this_present_buyerUid && that_present_buyerUid))
        return false;
      if (!this.buyerUid.equals(that.buyerUid))
        return false;
    }

    boolean this_present_shopId = true;
    boolean that_present_shopId = true;
    if (this_present_shopId || that_present_shopId) {
      if (!(this_present_shopId && that_present_shopId))
        return false;
      if (this.shopId != that.shopId)
        return false;
    }

    boolean this_present_goodsId = true;
    boolean that_present_goodsId = true;
    if (this_present_goodsId || that_present_goodsId) {
      if (!(this_present_goodsId && that_present_goodsId))
        return false;
      if (this.goodsId != that.goodsId)
        return false;
    }

    boolean this_present_skuId = true;
    boolean that_present_skuId = true;
    if (this_present_skuId || that_present_skuId) {
      if (!(this_present_skuId && that_present_skuId))
        return false;
      if (this.skuId != that.skuId)
        return false;
    }

    boolean this_present_supplierUid = true && this.isSetSupplierUid();
    boolean that_present_supplierUid = true && that.isSetSupplierUid();
    if (this_present_supplierUid || that_present_supplierUid) {
      if (!(this_present_supplierUid && that_present_supplierUid))
        return false;
      if (!this.supplierUid.equals(that.supplierUid))
        return false;
    }

    boolean this_present_num = true;
    boolean that_present_num = true;
    if (this_present_num || that_present_num) {
      if (!(this_present_num && that_present_num))
        return false;
      if (this.num != that.num)
        return false;
    }

    boolean this_present_goodsTitle = true && this.isSetGoodsTitle();
    boolean that_present_goodsTitle = true && that.isSetGoodsTitle();
    if (this_present_goodsTitle || that_present_goodsTitle) {
      if (!(this_present_goodsTitle && that_present_goodsTitle))
        return false;
      if (!this.goodsTitle.equals(that.goodsTitle))
        return false;
    }

    boolean this_present_singlePrice = true;
    boolean that_present_singlePrice = true;
    if (this_present_singlePrice || that_present_singlePrice) {
      if (!(this_present_singlePrice && that_present_singlePrice))
        return false;
      if (this.singlePrice != that.singlePrice)
        return false;
    }

    boolean this_present_img = true && this.isSetImg();
    boolean that_present_img = true && that.isSetImg();
    if (this_present_img || that_present_img) {
      if (!(this_present_img && that_present_img))
        return false;
      if (!this.img.equals(that.img))
        return false;
    }

    boolean this_present_limit = true;
    boolean that_present_limit = true;
    if (this_present_limit || that_present_limit) {
      if (!(this_present_limit && that_present_limit))
        return false;
      if (this.limit != that.limit)
        return false;
    }

    boolean this_present_start = true;
    boolean that_present_start = true;
    if (this_present_start || that_present_start) {
      if (!(this_present_start && that_present_start))
        return false;
      if (this.start != that.start)
        return false;
    }

    boolean this_present_ids = true && this.isSetIds();
    boolean that_present_ids = true && that.isSetIds();
    if (this_present_ids || that_present_ids) {
      if (!(this_present_ids && that_present_ids))
        return false;
      if (!this.ids.equals(that.ids))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_buyerUid = true && (isSetBuyerUid());
    list.add(present_buyerUid);
    if (present_buyerUid)
      list.add(buyerUid);

    boolean present_shopId = true;
    list.add(present_shopId);
    if (present_shopId)
      list.add(shopId);

    boolean present_goodsId = true;
    list.add(present_goodsId);
    if (present_goodsId)
      list.add(goodsId);

    boolean present_skuId = true;
    list.add(present_skuId);
    if (present_skuId)
      list.add(skuId);

    boolean present_supplierUid = true && (isSetSupplierUid());
    list.add(present_supplierUid);
    if (present_supplierUid)
      list.add(supplierUid);

    boolean present_num = true;
    list.add(present_num);
    if (present_num)
      list.add(num);

    boolean present_goodsTitle = true && (isSetGoodsTitle());
    list.add(present_goodsTitle);
    if (present_goodsTitle)
      list.add(goodsTitle);

    boolean present_singlePrice = true;
    list.add(present_singlePrice);
    if (present_singlePrice)
      list.add(singlePrice);

    boolean present_img = true && (isSetImg());
    list.add(present_img);
    if (present_img)
      list.add(img);

    boolean present_limit = true;
    list.add(present_limit);
    if (present_limit)
      list.add(limit);

    boolean present_start = true;
    list.add(present_start);
    if (present_start)
      list.add(start);

    boolean present_ids = true && (isSetIds());
    list.add(present_ids);
    if (present_ids)
      list.add(ids);

    return list.hashCode();
  }

  @Override
  public int compareTo(CarShopEntity other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBuyerUid()).compareTo(other.isSetBuyerUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuyerUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buyerUid, other.buyerUid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShopId()).compareTo(other.isSetShopId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShopId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shopId, other.shopId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGoodsId()).compareTo(other.isSetGoodsId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGoodsId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.goodsId, other.goodsId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSkuId()).compareTo(other.isSetSkuId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSkuId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.skuId, other.skuId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSupplierUid()).compareTo(other.isSetSupplierUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSupplierUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.supplierUid, other.supplierUid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum()).compareTo(other.isSetNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num, other.num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGoodsTitle()).compareTo(other.isSetGoodsTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGoodsTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.goodsTitle, other.goodsTitle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSinglePrice()).compareTo(other.isSetSinglePrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSinglePrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.singlePrice, other.singlePrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImg()).compareTo(other.isSetImg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.img, other.img);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLimit()).compareTo(other.isSetLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limit, other.limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStart()).compareTo(other.isSetStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, other.start);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIds()).compareTo(other.isSetIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ids, other.ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CarShopEntity(");
    boolean first = true;

    sb.append("buyerUid:");
    if (this.buyerUid == null) {
      sb.append("null");
    } else {
      sb.append(this.buyerUid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("shopId:");
    sb.append(this.shopId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("goodsId:");
    sb.append(this.goodsId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("skuId:");
    sb.append(this.skuId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("supplierUid:");
    if (this.supplierUid == null) {
      sb.append("null");
    } else {
      sb.append(this.supplierUid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("num:");
    sb.append(this.num);
    first = false;
    if (!first) sb.append(", ");
    sb.append("goodsTitle:");
    if (this.goodsTitle == null) {
      sb.append("null");
    } else {
      sb.append(this.goodsTitle);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("singlePrice:");
    sb.append(this.singlePrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("img:");
    if (this.img == null) {
      sb.append("null");
    } else {
      sb.append(this.img);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("limit:");
    sb.append(this.limit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("start:");
    sb.append(this.start);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ids:");
    if (this.ids == null) {
      sb.append("null");
    } else {
      sb.append(this.ids);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CarShopEntityStandardSchemeFactory implements SchemeFactory {
    public CarShopEntityStandardScheme getScheme() {
      return new CarShopEntityStandardScheme();
    }
  }

  private static class CarShopEntityStandardScheme extends StandardScheme<CarShopEntity> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CarShopEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BUYER_UID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.buyerUid = iprot.readString();
              struct.setBuyerUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SHOP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.shopId = iprot.readI32();
              struct.setShopIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // GOODS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.goodsId = iprot.readI32();
              struct.setGoodsIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SKU_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.skuId = iprot.readI32();
              struct.setSkuIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SUPPLIER_UID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.supplierUid = iprot.readString();
              struct.setSupplierUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num = iprot.readI32();
              struct.setNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // GOODS_TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.goodsTitle = iprot.readString();
              struct.setGoodsTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SINGLE_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.singlePrice = iprot.readI32();
              struct.setSinglePriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // IMG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.img = iprot.readString();
              struct.setImgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.limit = iprot.readI32();
              struct.setLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // START
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.start = iprot.readI32();
              struct.setStartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ids = iprot.readString();
              struct.setIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CarShopEntity struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.buyerUid != null) {
        oprot.writeFieldBegin(BUYER_UID_FIELD_DESC);
        oprot.writeString(struct.buyerUid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SHOP_ID_FIELD_DESC);
      oprot.writeI32(struct.shopId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GOODS_ID_FIELD_DESC);
      oprot.writeI32(struct.goodsId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SKU_ID_FIELD_DESC);
      oprot.writeI32(struct.skuId);
      oprot.writeFieldEnd();
      if (struct.supplierUid != null) {
        oprot.writeFieldBegin(SUPPLIER_UID_FIELD_DESC);
        oprot.writeString(struct.supplierUid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NUM_FIELD_DESC);
      oprot.writeI32(struct.num);
      oprot.writeFieldEnd();
      if (struct.goodsTitle != null) {
        oprot.writeFieldBegin(GOODS_TITLE_FIELD_DESC);
        oprot.writeString(struct.goodsTitle);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SINGLE_PRICE_FIELD_DESC);
      oprot.writeI32(struct.singlePrice);
      oprot.writeFieldEnd();
      if (struct.img != null) {
        oprot.writeFieldBegin(IMG_FIELD_DESC);
        oprot.writeString(struct.img);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LIMIT_FIELD_DESC);
      oprot.writeI32(struct.limit);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(START_FIELD_DESC);
      oprot.writeI32(struct.start);
      oprot.writeFieldEnd();
      if (struct.ids != null) {
        oprot.writeFieldBegin(IDS_FIELD_DESC);
        oprot.writeString(struct.ids);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CarShopEntityTupleSchemeFactory implements SchemeFactory {
    public CarShopEntityTupleScheme getScheme() {
      return new CarShopEntityTupleScheme();
    }
  }

  private static class CarShopEntityTupleScheme extends TupleScheme<CarShopEntity> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CarShopEntity struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBuyerUid()) {
        optionals.set(0);
      }
      if (struct.isSetShopId()) {
        optionals.set(1);
      }
      if (struct.isSetGoodsId()) {
        optionals.set(2);
      }
      if (struct.isSetSkuId()) {
        optionals.set(3);
      }
      if (struct.isSetSupplierUid()) {
        optionals.set(4);
      }
      if (struct.isSetNum()) {
        optionals.set(5);
      }
      if (struct.isSetGoodsTitle()) {
        optionals.set(6);
      }
      if (struct.isSetSinglePrice()) {
        optionals.set(7);
      }
      if (struct.isSetImg()) {
        optionals.set(8);
      }
      if (struct.isSetLimit()) {
        optionals.set(9);
      }
      if (struct.isSetStart()) {
        optionals.set(10);
      }
      if (struct.isSetIds()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetBuyerUid()) {
        oprot.writeString(struct.buyerUid);
      }
      if (struct.isSetShopId()) {
        oprot.writeI32(struct.shopId);
      }
      if (struct.isSetGoodsId()) {
        oprot.writeI32(struct.goodsId);
      }
      if (struct.isSetSkuId()) {
        oprot.writeI32(struct.skuId);
      }
      if (struct.isSetSupplierUid()) {
        oprot.writeString(struct.supplierUid);
      }
      if (struct.isSetNum()) {
        oprot.writeI32(struct.num);
      }
      if (struct.isSetGoodsTitle()) {
        oprot.writeString(struct.goodsTitle);
      }
      if (struct.isSetSinglePrice()) {
        oprot.writeI32(struct.singlePrice);
      }
      if (struct.isSetImg()) {
        oprot.writeString(struct.img);
      }
      if (struct.isSetLimit()) {
        oprot.writeI32(struct.limit);
      }
      if (struct.isSetStart()) {
        oprot.writeI32(struct.start);
      }
      if (struct.isSetIds()) {
        oprot.writeString(struct.ids);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CarShopEntity struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.buyerUid = iprot.readString();
        struct.setBuyerUidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.shopId = iprot.readI32();
        struct.setShopIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.goodsId = iprot.readI32();
        struct.setGoodsIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.skuId = iprot.readI32();
        struct.setSkuIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.supplierUid = iprot.readString();
        struct.setSupplierUidIsSet(true);
      }
      if (incoming.get(5)) {
        struct.num = iprot.readI32();
        struct.setNumIsSet(true);
      }
      if (incoming.get(6)) {
        struct.goodsTitle = iprot.readString();
        struct.setGoodsTitleIsSet(true);
      }
      if (incoming.get(7)) {
        struct.singlePrice = iprot.readI32();
        struct.setSinglePriceIsSet(true);
      }
      if (incoming.get(8)) {
        struct.img = iprot.readString();
        struct.setImgIsSet(true);
      }
      if (incoming.get(9)) {
        struct.limit = iprot.readI32();
        struct.setLimitIsSet(true);
      }
      if (incoming.get(10)) {
        struct.start = iprot.readI32();
        struct.setStartIsSet(true);
      }
      if (incoming.get(11)) {
        struct.ids = iprot.readString();
        struct.setIdsIsSet(true);
      }
    }
  }

}


package com.wboly.rpc.entity;

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.EncodingUtils;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import javax.annotation.Generated;

@SuppressWarnings({"rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-11-24")
public class OrderEntity implements org.apache.thrift.TBase<OrderEntity, OrderEntity._Fields>, java.io.Serializable, Cloneable, Comparable<OrderEntity> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OrderEntity");

  private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField BUYER_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("buyerUid", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SHOP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("shopId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField SUPPLIER_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("supplierUid", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("num", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("money", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField DATELINE_FIELD_DESC = new org.apache.thrift.protocol.TField("dateline", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField ADDRESS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("addressId", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField CANCEL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("cancelType", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField PAY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("payType", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField FINISH_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("finishDate", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("limit", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("ids", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField ORDER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("orderIds", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField COURIER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("courierId", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField COURIER_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("courierFee", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField RETURN_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("returnState", org.apache.thrift.protocol.TType.I32, (short)22);
  private static final org.apache.thrift.protocol.TField APPRAISE_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("appraiseState", org.apache.thrift.protocol.TType.I32, (short)23);
  private static final org.apache.thrift.protocol.TField AFTERSALE_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("aftersaleState", org.apache.thrift.protocol.TType.I32, (short)24);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new OrderEntityStandardSchemeFactory());
    schemes.put(TupleScheme.class, new OrderEntityTupleSchemeFactory());
  }

  public String orderId; // required
  public String buyerUid; // required
  public int shopId; // required
  public String supplierUid; // required
  public int num; // required
  public int money; // required
  public int state; // required
  public int code; // required
  public String message; // required
  public int dateline; // required
  public int addressId; // required
  public int cancelType; // required
  public int payType; // required
  public int finishDate; // required
  public String userName; // required
  public int limit; // required
  public int start; // required
  public String ids; // required
  public String orderIds; // required
  public String courierId; // required
  public int courierFee; // required
  public int returnState; // required
  public int appraiseState; // required
  public int aftersaleState; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ORDER_ID((short)1, "orderId"),
    BUYER_UID((short)2, "buyerUid"),
    SHOP_ID((short)3, "shopId"),
    SUPPLIER_UID((short)4, "supplierUid"),
    NUM((short)5, "num"),
    MONEY((short)6, "money"),
    STATE((short)7, "state"),
    CODE((short)8, "code"),
    MESSAGE((short)9, "message"),
    DATELINE((short)10, "dateline"),
    ADDRESS_ID((short)11, "addressId"),
    CANCEL_TYPE((short)12, "cancelType"),
    PAY_TYPE((short)13, "payType"),
    FINISH_DATE((short)14, "finishDate"),
    USER_NAME((short)15, "userName"),
    LIMIT((short)16, "limit"),
    START((short)17, "start"),
    IDS((short)18, "ids"),
    ORDER_IDS((short)19, "orderIds"),
    COURIER_ID((short)20, "courierId"),
    COURIER_FEE((short)21, "courierFee"),
    RETURN_STATE((short)22, "returnState"),
    APPRAISE_STATE((short)23, "appraiseState"),
    AFTERSALE_STATE((short)24, "aftersaleState");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ORDER_ID
          return ORDER_ID;
        case 2: // BUYER_UID
          return BUYER_UID;
        case 3: // SHOP_ID
          return SHOP_ID;
        case 4: // SUPPLIER_UID
          return SUPPLIER_UID;
        case 5: // NUM
          return NUM;
        case 6: // MONEY
          return MONEY;
        case 7: // STATE
          return STATE;
        case 8: // CODE
          return CODE;
        case 9: // MESSAGE
          return MESSAGE;
        case 10: // DATELINE
          return DATELINE;
        case 11: // ADDRESS_ID
          return ADDRESS_ID;
        case 12: // CANCEL_TYPE
          return CANCEL_TYPE;
        case 13: // PAY_TYPE
          return PAY_TYPE;
        case 14: // FINISH_DATE
          return FINISH_DATE;
        case 15: // USER_NAME
          return USER_NAME;
        case 16: // LIMIT
          return LIMIT;
        case 17: // START
          return START;
        case 18: // IDS
          return IDS;
        case 19: // ORDER_IDS
          return ORDER_IDS;
        case 20: // COURIER_ID
          return COURIER_ID;
        case 21: // COURIER_FEE
          return COURIER_FEE;
        case 22: // RETURN_STATE
          return RETURN_STATE;
        case 23: // APPRAISE_STATE
          return APPRAISE_STATE;
        case 24: // AFTERSALE_STATE
          return AFTERSALE_STATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SHOPID_ISSET_ID = 0;
  private static final int __NUM_ISSET_ID = 1;
  private static final int __MONEY_ISSET_ID = 2;
  private static final int __STATE_ISSET_ID = 3;
  private static final int __CODE_ISSET_ID = 4;
  private static final int __DATELINE_ISSET_ID = 5;
  private static final int __ADDRESSID_ISSET_ID = 6;
  private static final int __CANCELTYPE_ISSET_ID = 7;
  private static final int __PAYTYPE_ISSET_ID = 8;
  private static final int __FINISHDATE_ISSET_ID = 9;
  private static final int __LIMIT_ISSET_ID = 10;
  private static final int __START_ISSET_ID = 11;
  private static final int __COURIERFEE_ISSET_ID = 12;
  private static final int __RETURNSTATE_ISSET_ID = 13;
  private static final int __APPRAISESTATE_ISSET_ID = 14;
  private static final int __AFTERSALESTATE_ISSET_ID = 15;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUYER_UID, new org.apache.thrift.meta_data.FieldMetaData("buyerUid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHOP_ID, new org.apache.thrift.meta_data.FieldMetaData("shopId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SUPPLIER_UID, new org.apache.thrift.meta_data.FieldMetaData("supplierUid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NUM, new org.apache.thrift.meta_data.FieldMetaData("num", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MONEY, new org.apache.thrift.meta_data.FieldMetaData("money", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATELINE, new org.apache.thrift.meta_data.FieldMetaData("dateline", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ADDRESS_ID, new org.apache.thrift.meta_data.FieldMetaData("addressId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CANCEL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("cancelType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("payType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FINISH_DATE, new org.apache.thrift.meta_data.FieldMetaData("finishDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LIMIT, new org.apache.thrift.meta_data.FieldMetaData("limit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IDS, new org.apache.thrift.meta_data.FieldMetaData("ids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER_IDS, new org.apache.thrift.meta_data.FieldMetaData("orderIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COURIER_ID, new org.apache.thrift.meta_data.FieldMetaData("courierId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COURIER_FEE, new org.apache.thrift.meta_data.FieldMetaData("courierFee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RETURN_STATE, new org.apache.thrift.meta_data.FieldMetaData("returnState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.APPRAISE_STATE, new org.apache.thrift.meta_data.FieldMetaData("appraiseState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AFTERSALE_STATE, new org.apache.thrift.meta_data.FieldMetaData("aftersaleState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OrderEntity.class, metaDataMap);
  }

  public OrderEntity() {
  }

  public OrderEntity(
    String orderId,
    String buyerUid,
    int shopId,
    String supplierUid,
    int num,
    int money,
    int state,
    int code,
    String message,
    int dateline,
    int addressId,
    int cancelType,
    int payType,
    int finishDate,
    String userName,
    int limit,
    int start,
    String ids,
    String orderIds,
    String courierId,
    int courierFee,
    int returnState,
    int appraiseState,
    int aftersaleState)
  {
    this();
    this.orderId = orderId;
    this.buyerUid = buyerUid;
    this.shopId = shopId;
    setShopIdIsSet(true);
    this.supplierUid = supplierUid;
    this.num = num;
    setNumIsSet(true);
    this.money = money;
    setMoneyIsSet(true);
    this.state = state;
    setStateIsSet(true);
    this.code = code;
    setCodeIsSet(true);
    this.message = message;
    this.dateline = dateline;
    setDatelineIsSet(true);
    this.addressId = addressId;
    setAddressIdIsSet(true);
    this.cancelType = cancelType;
    setCancelTypeIsSet(true);
    this.payType = payType;
    setPayTypeIsSet(true);
    this.finishDate = finishDate;
    setFinishDateIsSet(true);
    this.userName = userName;
    this.limit = limit;
    setLimitIsSet(true);
    this.start = start;
    setStartIsSet(true);
    this.ids = ids;
    this.orderIds = orderIds;
    this.courierId = courierId;
    this.courierFee = courierFee;
    setCourierFeeIsSet(true);
    this.returnState = returnState;
    setReturnStateIsSet(true);
    this.appraiseState = appraiseState;
    setAppraiseStateIsSet(true);
    this.aftersaleState = aftersaleState;
    setAftersaleStateIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OrderEntity(OrderEntity other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetOrderId()) {
      this.orderId = other.orderId;
    }
    if (other.isSetBuyerUid()) {
      this.buyerUid = other.buyerUid;
    }
    this.shopId = other.shopId;
    if (other.isSetSupplierUid()) {
      this.supplierUid = other.supplierUid;
    }
    this.num = other.num;
    this.money = other.money;
    this.state = other.state;
    this.code = other.code;
    if (other.isSetMessage()) {
      this.message = other.message;
    }
    this.dateline = other.dateline;
    this.addressId = other.addressId;
    this.cancelType = other.cancelType;
    this.payType = other.payType;
    this.finishDate = other.finishDate;
    if (other.isSetUserName()) {
      this.userName = other.userName;
    }
    this.limit = other.limit;
    this.start = other.start;
    if (other.isSetIds()) {
      this.ids = other.ids;
    }
    if (other.isSetOrderIds()) {
      this.orderIds = other.orderIds;
    }
    if (other.isSetCourierId()) {
      this.courierId = other.courierId;
    }
    this.courierFee = other.courierFee;
    this.returnState = other.returnState;
    this.appraiseState = other.appraiseState;
    this.aftersaleState = other.aftersaleState;
  }

  public OrderEntity deepCopy() {
    return new OrderEntity(this);
  }

  @Override
  public void clear() {
    this.orderId = null;
    this.buyerUid = null;
    setShopIdIsSet(false);
    this.shopId = 0;
    this.supplierUid = null;
    setNumIsSet(false);
    this.num = 0;
    setMoneyIsSet(false);
    this.money = 0;
    setStateIsSet(false);
    this.state = 0;
    setCodeIsSet(false);
    this.code = 0;
    this.message = null;
    setDatelineIsSet(false);
    this.dateline = 0;
    setAddressIdIsSet(false);
    this.addressId = 0;
    setCancelTypeIsSet(false);
    this.cancelType = 0;
    setPayTypeIsSet(false);
    this.payType = 0;
    setFinishDateIsSet(false);
    this.finishDate = 0;
    this.userName = null;
    setLimitIsSet(false);
    this.limit = 0;
    setStartIsSet(false);
    this.start = 0;
    this.ids = null;
    this.orderIds = null;
    this.courierId = null;
    setCourierFeeIsSet(false);
    this.courierFee = 0;
    setReturnStateIsSet(false);
    this.returnState = 0;
    setAppraiseStateIsSet(false);
    this.appraiseState = 0;
    setAftersaleStateIsSet(false);
    this.aftersaleState = 0;
  }

  public String getOrderId() {
    return this.orderId;
  }

  public OrderEntity setOrderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

  public void unsetOrderId() {
    this.orderId = null;
  }

  /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderId() {
    return this.orderId != null;
  }

  public void setOrderIdIsSet(boolean value) {
    if (!value) {
      this.orderId = null;
    }
  }

  public String getBuyerUid() {
    return this.buyerUid;
  }

  public OrderEntity setBuyerUid(String buyerUid) {
    this.buyerUid = buyerUid;
    return this;
  }

  public void unsetBuyerUid() {
    this.buyerUid = null;
  }

  /** Returns true if field buyerUid is set (has been assigned a value) and false otherwise */
  public boolean isSetBuyerUid() {
    return this.buyerUid != null;
  }

  public void setBuyerUidIsSet(boolean value) {
    if (!value) {
      this.buyerUid = null;
    }
  }

  public int getShopId() {
    return this.shopId;
  }

  public OrderEntity setShopId(int shopId) {
    this.shopId = shopId;
    setShopIdIsSet(true);
    return this;
  }

  public void unsetShopId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOPID_ISSET_ID);
  }

  /** Returns true if field shopId is set (has been assigned a value) and false otherwise */
  public boolean isSetShopId() {
    return EncodingUtils.testBit(__isset_bitfield, __SHOPID_ISSET_ID);
  }

  public void setShopIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOPID_ISSET_ID, value);
  }

  public String getSupplierUid() {
    return this.supplierUid;
  }

  public OrderEntity setSupplierUid(String supplierUid) {
    this.supplierUid = supplierUid;
    return this;
  }

  public void unsetSupplierUid() {
    this.supplierUid = null;
  }

  /** Returns true if field supplierUid is set (has been assigned a value) and false otherwise */
  public boolean isSetSupplierUid() {
    return this.supplierUid != null;
  }

  public void setSupplierUidIsSet(boolean value) {
    if (!value) {
      this.supplierUid = null;
    }
  }

  public int getNum() {
    return this.num;
  }

  public OrderEntity setNum(int num) {
    this.num = num;
    setNumIsSet(true);
    return this;
  }

  public void unsetNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_ISSET_ID);
  }

  /** Returns true if field num is set (has been assigned a value) and false otherwise */
  public boolean isSetNum() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM_ISSET_ID);
  }

  public void setNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_ISSET_ID, value);
  }

  public int getMoney() {
    return this.money;
  }

  public OrderEntity setMoney(int money) {
    this.money = money;
    setMoneyIsSet(true);
    return this;
  }

  public void unsetMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MONEY_ISSET_ID);
  }

  /** Returns true if field money is set (has been assigned a value) and false otherwise */
  public boolean isSetMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __MONEY_ISSET_ID);
  }

  public void setMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MONEY_ISSET_ID, value);
  }

  public int getState() {
    return this.state;
  }

  public OrderEntity setState(int state) {
    this.state = state;
    setStateIsSet(true);
    return this;
  }

  public void unsetState() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATE_ISSET_ID);
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return EncodingUtils.testBit(__isset_bitfield, __STATE_ISSET_ID);
  }

  public void setStateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATE_ISSET_ID, value);
  }

  public int getCode() {
    return this.code;
  }

  public OrderEntity setCode(int code) {
    this.code = code;
    setCodeIsSet(true);
    return this;
  }

  public void unsetCode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CODE_ISSET_ID);
  }

  /** Returns true if field code is set (has been assigned a value) and false otherwise */
  public boolean isSetCode() {
    return EncodingUtils.testBit(__isset_bitfield, __CODE_ISSET_ID);
  }

  public void setCodeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CODE_ISSET_ID, value);
  }

  public String getMessage() {
    return this.message;
  }

  public OrderEntity setMessage(String message) {
    this.message = message;
    return this;
  }

  public void unsetMessage() {
    this.message = null;
  }

  /** Returns true if field message is set (has been assigned a value) and false otherwise */
  public boolean isSetMessage() {
    return this.message != null;
  }

  public void setMessageIsSet(boolean value) {
    if (!value) {
      this.message = null;
    }
  }

  public int getDateline() {
    return this.dateline;
  }

  public OrderEntity setDateline(int dateline) {
    this.dateline = dateline;
    setDatelineIsSet(true);
    return this;
  }

  public void unsetDateline() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATELINE_ISSET_ID);
  }

  /** Returns true if field dateline is set (has been assigned a value) and false otherwise */
  public boolean isSetDateline() {
    return EncodingUtils.testBit(__isset_bitfield, __DATELINE_ISSET_ID);
  }

  public void setDatelineIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATELINE_ISSET_ID, value);
  }

  public int getAddressId() {
    return this.addressId;
  }

  public OrderEntity setAddressId(int addressId) {
    this.addressId = addressId;
    setAddressIdIsSet(true);
    return this;
  }

  public void unsetAddressId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ADDRESSID_ISSET_ID);
  }

  /** Returns true if field addressId is set (has been assigned a value) and false otherwise */
  public boolean isSetAddressId() {
    return EncodingUtils.testBit(__isset_bitfield, __ADDRESSID_ISSET_ID);
  }

  public void setAddressIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ADDRESSID_ISSET_ID, value);
  }

  public int getCancelType() {
    return this.cancelType;
  }

  public OrderEntity setCancelType(int cancelType) {
    this.cancelType = cancelType;
    setCancelTypeIsSet(true);
    return this;
  }

  public void unsetCancelType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CANCELTYPE_ISSET_ID);
  }

  /** Returns true if field cancelType is set (has been assigned a value) and false otherwise */
  public boolean isSetCancelType() {
    return EncodingUtils.testBit(__isset_bitfield, __CANCELTYPE_ISSET_ID);
  }

  public void setCancelTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CANCELTYPE_ISSET_ID, value);
  }

  public int getPayType() {
    return this.payType;
  }

  public OrderEntity setPayType(int payType) {
    this.payType = payType;
    setPayTypeIsSet(true);
    return this;
  }

  public void unsetPayType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAYTYPE_ISSET_ID);
  }

  /** Returns true if field payType is set (has been assigned a value) and false otherwise */
  public boolean isSetPayType() {
    return EncodingUtils.testBit(__isset_bitfield, __PAYTYPE_ISSET_ID);
  }

  public void setPayTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAYTYPE_ISSET_ID, value);
  }

  public int getFinishDate() {
    return this.finishDate;
  }

  public OrderEntity setFinishDate(int finishDate) {
    this.finishDate = finishDate;
    setFinishDateIsSet(true);
    return this;
  }

  public void unsetFinishDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FINISHDATE_ISSET_ID);
  }

  /** Returns true if field finishDate is set (has been assigned a value) and false otherwise */
  public boolean isSetFinishDate() {
    return EncodingUtils.testBit(__isset_bitfield, __FINISHDATE_ISSET_ID);
  }

  public void setFinishDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FINISHDATE_ISSET_ID, value);
  }

  public String getUserName() {
    return this.userName;
  }

  public OrderEntity setUserName(String userName) {
    this.userName = userName;
    return this;
  }

  public void unsetUserName() {
    this.userName = null;
  }

  /** Returns true if field userName is set (has been assigned a value) and false otherwise */
  public boolean isSetUserName() {
    return this.userName != null;
  }

  public void setUserNameIsSet(boolean value) {
    if (!value) {
      this.userName = null;
    }
  }

  public int getLimit() {
    return this.limit;
  }

  public OrderEntity setLimit(int limit) {
    this.limit = limit;
    setLimitIsSet(true);
    return this;
  }

  public void unsetLimit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMIT_ISSET_ID);
  }

  /** Returns true if field limit is set (has been assigned a value) and false otherwise */
  public boolean isSetLimit() {
    return EncodingUtils.testBit(__isset_bitfield, __LIMIT_ISSET_ID);
  }

  public void setLimitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMIT_ISSET_ID, value);
  }

  public int getStart() {
    return this.start;
  }

  public OrderEntity setStart(int start) {
    this.start = start;
    setStartIsSet(true);
    return this;
  }

  public void unsetStart() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __START_ISSET_ID);
  }

  /** Returns true if field start is set (has been assigned a value) and false otherwise */
  public boolean isSetStart() {
    return EncodingUtils.testBit(__isset_bitfield, __START_ISSET_ID);
  }

  public void setStartIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __START_ISSET_ID, value);
  }

  public String getIds() {
    return this.ids;
  }

  public OrderEntity setIds(String ids) {
    this.ids = ids;
    return this;
  }

  public void unsetIds() {
    this.ids = null;
  }

  /** Returns true if field ids is set (has been assigned a value) and false otherwise */
  public boolean isSetIds() {
    return this.ids != null;
  }

  public void setIdsIsSet(boolean value) {
    if (!value) {
      this.ids = null;
    }
  }

  public String getOrderIds() {
    return this.orderIds;
  }

  public OrderEntity setOrderIds(String orderIds) {
    this.orderIds = orderIds;
    return this;
  }

  public void unsetOrderIds() {
    this.orderIds = null;
  }

  /** Returns true if field orderIds is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderIds() {
    return this.orderIds != null;
  }

  public void setOrderIdsIsSet(boolean value) {
    if (!value) {
      this.orderIds = null;
    }
  }

  public String getCourierId() {
    return this.courierId;
  }

  public OrderEntity setCourierId(String courierId) {
    this.courierId = courierId;
    return this;
  }

  public void unsetCourierId() {
    this.courierId = null;
  }

  /** Returns true if field courierId is set (has been assigned a value) and false otherwise */
  public boolean isSetCourierId() {
    return this.courierId != null;
  }

  public void setCourierIdIsSet(boolean value) {
    if (!value) {
      this.courierId = null;
    }
  }

  public int getCourierFee() {
    return this.courierFee;
  }

  public OrderEntity setCourierFee(int courierFee) {
    this.courierFee = courierFee;
    setCourierFeeIsSet(true);
    return this;
  }

  public void unsetCourierFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COURIERFEE_ISSET_ID);
  }

  /** Returns true if field courierFee is set (has been assigned a value) and false otherwise */
  public boolean isSetCourierFee() {
    return EncodingUtils.testBit(__isset_bitfield, __COURIERFEE_ISSET_ID);
  }

  public void setCourierFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COURIERFEE_ISSET_ID, value);
  }

  public int getReturnState() {
    return this.returnState;
  }

  public OrderEntity setReturnState(int returnState) {
    this.returnState = returnState;
    setReturnStateIsSet(true);
    return this;
  }

  public void unsetReturnState() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RETURNSTATE_ISSET_ID);
  }

  /** Returns true if field returnState is set (has been assigned a value) and false otherwise */
  public boolean isSetReturnState() {
    return EncodingUtils.testBit(__isset_bitfield, __RETURNSTATE_ISSET_ID);
  }

  public void setReturnStateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RETURNSTATE_ISSET_ID, value);
  }

  public int getAppraiseState() {
    return this.appraiseState;
  }

  public OrderEntity setAppraiseState(int appraiseState) {
    this.appraiseState = appraiseState;
    setAppraiseStateIsSet(true);
    return this;
  }

  public void unsetAppraiseState() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPRAISESTATE_ISSET_ID);
  }

  /** Returns true if field appraiseState is set (has been assigned a value) and false otherwise */
  public boolean isSetAppraiseState() {
    return EncodingUtils.testBit(__isset_bitfield, __APPRAISESTATE_ISSET_ID);
  }

  public void setAppraiseStateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPRAISESTATE_ISSET_ID, value);
  }

  public int getAftersaleState() {
    return this.aftersaleState;
  }

  public OrderEntity setAftersaleState(int aftersaleState) {
    this.aftersaleState = aftersaleState;
    setAftersaleStateIsSet(true);
    return this;
  }

  public void unsetAftersaleState() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AFTERSALESTATE_ISSET_ID);
  }

  /** Returns true if field aftersaleState is set (has been assigned a value) and false otherwise */
  public boolean isSetAftersaleState() {
    return EncodingUtils.testBit(__isset_bitfield, __AFTERSALESTATE_ISSET_ID);
  }

  public void setAftersaleStateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AFTERSALESTATE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ORDER_ID:
      if (value == null) {
        unsetOrderId();
      } else {
        setOrderId((String)value);
      }
      break;

    case BUYER_UID:
      if (value == null) {
        unsetBuyerUid();
      } else {
        setBuyerUid((String)value);
      }
      break;

    case SHOP_ID:
      if (value == null) {
        unsetShopId();
      } else {
        setShopId((Integer)value);
      }
      break;

    case SUPPLIER_UID:
      if (value == null) {
        unsetSupplierUid();
      } else {
        setSupplierUid((String)value);
      }
      break;

    case NUM:
      if (value == null) {
        unsetNum();
      } else {
        setNum((Integer)value);
      }
      break;

    case MONEY:
      if (value == null) {
        unsetMoney();
      } else {
        setMoney((Integer)value);
      }
      break;

    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((Integer)value);
      }
      break;

    case CODE:
      if (value == null) {
        unsetCode();
      } else {
        setCode((Integer)value);
      }
      break;

    case MESSAGE:
      if (value == null) {
        unsetMessage();
      } else {
        setMessage((String)value);
      }
      break;

    case DATELINE:
      if (value == null) {
        unsetDateline();
      } else {
        setDateline((Integer)value);
      }
      break;

    case ADDRESS_ID:
      if (value == null) {
        unsetAddressId();
      } else {
        setAddressId((Integer)value);
      }
      break;

    case CANCEL_TYPE:
      if (value == null) {
        unsetCancelType();
      } else {
        setCancelType((Integer)value);
      }
      break;

    case PAY_TYPE:
      if (value == null) {
        unsetPayType();
      } else {
        setPayType((Integer)value);
      }
      break;

    case FINISH_DATE:
      if (value == null) {
        unsetFinishDate();
      } else {
        setFinishDate((Integer)value);
      }
      break;

    case USER_NAME:
      if (value == null) {
        unsetUserName();
      } else {
        setUserName((String)value);
      }
      break;

    case LIMIT:
      if (value == null) {
        unsetLimit();
      } else {
        setLimit((Integer)value);
      }
      break;

    case START:
      if (value == null) {
        unsetStart();
      } else {
        setStart((Integer)value);
      }
      break;

    case IDS:
      if (value == null) {
        unsetIds();
      } else {
        setIds((String)value);
      }
      break;

    case ORDER_IDS:
      if (value == null) {
        unsetOrderIds();
      } else {
        setOrderIds((String)value);
      }
      break;

    case COURIER_ID:
      if (value == null) {
        unsetCourierId();
      } else {
        setCourierId((String)value);
      }
      break;

    case COURIER_FEE:
      if (value == null) {
        unsetCourierFee();
      } else {
        setCourierFee((Integer)value);
      }
      break;

    case RETURN_STATE:
      if (value == null) {
        unsetReturnState();
      } else {
        setReturnState((Integer)value);
      }
      break;

    case APPRAISE_STATE:
      if (value == null) {
        unsetAppraiseState();
      } else {
        setAppraiseState((Integer)value);
      }
      break;

    case AFTERSALE_STATE:
      if (value == null) {
        unsetAftersaleState();
      } else {
        setAftersaleState((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ORDER_ID:
      return getOrderId();

    case BUYER_UID:
      return getBuyerUid();

    case SHOP_ID:
      return getShopId();

    case SUPPLIER_UID:
      return getSupplierUid();

    case NUM:
      return getNum();

    case MONEY:
      return getMoney();

    case STATE:
      return getState();

    case CODE:
      return getCode();

    case MESSAGE:
      return getMessage();

    case DATELINE:
      return getDateline();

    case ADDRESS_ID:
      return getAddressId();

    case CANCEL_TYPE:
      return getCancelType();

    case PAY_TYPE:
      return getPayType();

    case FINISH_DATE:
      return getFinishDate();

    case USER_NAME:
      return getUserName();

    case LIMIT:
      return getLimit();

    case START:
      return getStart();

    case IDS:
      return getIds();

    case ORDER_IDS:
      return getOrderIds();

    case COURIER_ID:
      return getCourierId();

    case COURIER_FEE:
      return getCourierFee();

    case RETURN_STATE:
      return getReturnState();

    case APPRAISE_STATE:
      return getAppraiseState();

    case AFTERSALE_STATE:
      return getAftersaleState();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ORDER_ID:
      return isSetOrderId();
    case BUYER_UID:
      return isSetBuyerUid();
    case SHOP_ID:
      return isSetShopId();
    case SUPPLIER_UID:
      return isSetSupplierUid();
    case NUM:
      return isSetNum();
    case MONEY:
      return isSetMoney();
    case STATE:
      return isSetState();
    case CODE:
      return isSetCode();
    case MESSAGE:
      return isSetMessage();
    case DATELINE:
      return isSetDateline();
    case ADDRESS_ID:
      return isSetAddressId();
    case CANCEL_TYPE:
      return isSetCancelType();
    case PAY_TYPE:
      return isSetPayType();
    case FINISH_DATE:
      return isSetFinishDate();
    case USER_NAME:
      return isSetUserName();
    case LIMIT:
      return isSetLimit();
    case START:
      return isSetStart();
    case IDS:
      return isSetIds();
    case ORDER_IDS:
      return isSetOrderIds();
    case COURIER_ID:
      return isSetCourierId();
    case COURIER_FEE:
      return isSetCourierFee();
    case RETURN_STATE:
      return isSetReturnState();
    case APPRAISE_STATE:
      return isSetAppraiseState();
    case AFTERSALE_STATE:
      return isSetAftersaleState();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof OrderEntity)
      return this.equals((OrderEntity)that);
    return false;
  }

  public boolean equals(OrderEntity that) {
    if (that == null)
      return false;

    boolean this_present_orderId = true && this.isSetOrderId();
    boolean that_present_orderId = true && that.isSetOrderId();
    if (this_present_orderId || that_present_orderId) {
      if (!(this_present_orderId && that_present_orderId))
        return false;
      if (!this.orderId.equals(that.orderId))
        return false;
    }

    boolean this_present_buyerUid = true && this.isSetBuyerUid();
    boolean that_present_buyerUid = true && that.isSetBuyerUid();
    if (this_present_buyerUid || that_present_buyerUid) {
      if (!(this_present_buyerUid && that_present_buyerUid))
        return false;
      if (!this.buyerUid.equals(that.buyerUid))
        return false;
    }

    boolean this_present_shopId = true;
    boolean that_present_shopId = true;
    if (this_present_shopId || that_present_shopId) {
      if (!(this_present_shopId && that_present_shopId))
        return false;
      if (this.shopId != that.shopId)
        return false;
    }

    boolean this_present_supplierUid = true && this.isSetSupplierUid();
    boolean that_present_supplierUid = true && that.isSetSupplierUid();
    if (this_present_supplierUid || that_present_supplierUid) {
      if (!(this_present_supplierUid && that_present_supplierUid))
        return false;
      if (!this.supplierUid.equals(that.supplierUid))
        return false;
    }

    boolean this_present_num = true;
    boolean that_present_num = true;
    if (this_present_num || that_present_num) {
      if (!(this_present_num && that_present_num))
        return false;
      if (this.num != that.num)
        return false;
    }

    boolean this_present_money = true;
    boolean that_present_money = true;
    if (this_present_money || that_present_money) {
      if (!(this_present_money && that_present_money))
        return false;
      if (this.money != that.money)
        return false;
    }

    boolean this_present_state = true;
    boolean that_present_state = true;
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (this.state != that.state)
        return false;
    }

    boolean this_present_code = true;
    boolean that_present_code = true;
    if (this_present_code || that_present_code) {
      if (!(this_present_code && that_present_code))
        return false;
      if (this.code != that.code)
        return false;
    }

    boolean this_present_message = true && this.isSetMessage();
    boolean that_present_message = true && that.isSetMessage();
    if (this_present_message || that_present_message) {
      if (!(this_present_message && that_present_message))
        return false;
      if (!this.message.equals(that.message))
        return false;
    }

    boolean this_present_dateline = true;
    boolean that_present_dateline = true;
    if (this_present_dateline || that_present_dateline) {
      if (!(this_present_dateline && that_present_dateline))
        return false;
      if (this.dateline != that.dateline)
        return false;
    }

    boolean this_present_addressId = true;
    boolean that_present_addressId = true;
    if (this_present_addressId || that_present_addressId) {
      if (!(this_present_addressId && that_present_addressId))
        return false;
      if (this.addressId != that.addressId)
        return false;
    }

    boolean this_present_cancelType = true;
    boolean that_present_cancelType = true;
    if (this_present_cancelType || that_present_cancelType) {
      if (!(this_present_cancelType && that_present_cancelType))
        return false;
      if (this.cancelType != that.cancelType)
        return false;
    }

    boolean this_present_payType = true;
    boolean that_present_payType = true;
    if (this_present_payType || that_present_payType) {
      if (!(this_present_payType && that_present_payType))
        return false;
      if (this.payType != that.payType)
        return false;
    }

    boolean this_present_finishDate = true;
    boolean that_present_finishDate = true;
    if (this_present_finishDate || that_present_finishDate) {
      if (!(this_present_finishDate && that_present_finishDate))
        return false;
      if (this.finishDate != that.finishDate)
        return false;
    }

    boolean this_present_userName = true && this.isSetUserName();
    boolean that_present_userName = true && that.isSetUserName();
    if (this_present_userName || that_present_userName) {
      if (!(this_present_userName && that_present_userName))
        return false;
      if (!this.userName.equals(that.userName))
        return false;
    }

    boolean this_present_limit = true;
    boolean that_present_limit = true;
    if (this_present_limit || that_present_limit) {
      if (!(this_present_limit && that_present_limit))
        return false;
      if (this.limit != that.limit)
        return false;
    }

    boolean this_present_start = true;
    boolean that_present_start = true;
    if (this_present_start || that_present_start) {
      if (!(this_present_start && that_present_start))
        return false;
      if (this.start != that.start)
        return false;
    }

    boolean this_present_ids = true && this.isSetIds();
    boolean that_present_ids = true && that.isSetIds();
    if (this_present_ids || that_present_ids) {
      if (!(this_present_ids && that_present_ids))
        return false;
      if (!this.ids.equals(that.ids))
        return false;
    }

    boolean this_present_orderIds = true && this.isSetOrderIds();
    boolean that_present_orderIds = true && that.isSetOrderIds();
    if (this_present_orderIds || that_present_orderIds) {
      if (!(this_present_orderIds && that_present_orderIds))
        return false;
      if (!this.orderIds.equals(that.orderIds))
        return false;
    }

    boolean this_present_courierId = true && this.isSetCourierId();
    boolean that_present_courierId = true && that.isSetCourierId();
    if (this_present_courierId || that_present_courierId) {
      if (!(this_present_courierId && that_present_courierId))
        return false;
      if (!this.courierId.equals(that.courierId))
        return false;
    }

    boolean this_present_courierFee = true;
    boolean that_present_courierFee = true;
    if (this_present_courierFee || that_present_courierFee) {
      if (!(this_present_courierFee && that_present_courierFee))
        return false;
      if (this.courierFee != that.courierFee)
        return false;
    }

    boolean this_present_returnState = true;
    boolean that_present_returnState = true;
    if (this_present_returnState || that_present_returnState) {
      if (!(this_present_returnState && that_present_returnState))
        return false;
      if (this.returnState != that.returnState)
        return false;
    }

    boolean this_present_appraiseState = true;
    boolean that_present_appraiseState = true;
    if (this_present_appraiseState || that_present_appraiseState) {
      if (!(this_present_appraiseState && that_present_appraiseState))
        return false;
      if (this.appraiseState != that.appraiseState)
        return false;
    }

    boolean this_present_aftersaleState = true;
    boolean that_present_aftersaleState = true;
    if (this_present_aftersaleState || that_present_aftersaleState) {
      if (!(this_present_aftersaleState && that_present_aftersaleState))
        return false;
      if (this.aftersaleState != that.aftersaleState)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_orderId = true && (isSetOrderId());
    list.add(present_orderId);
    if (present_orderId)
      list.add(orderId);

    boolean present_buyerUid = true && (isSetBuyerUid());
    list.add(present_buyerUid);
    if (present_buyerUid)
      list.add(buyerUid);

    boolean present_shopId = true;
    list.add(present_shopId);
    if (present_shopId)
      list.add(shopId);

    boolean present_supplierUid = true && (isSetSupplierUid());
    list.add(present_supplierUid);
    if (present_supplierUid)
      list.add(supplierUid);

    boolean present_num = true;
    list.add(present_num);
    if (present_num)
      list.add(num);

    boolean present_money = true;
    list.add(present_money);
    if (present_money)
      list.add(money);

    boolean present_state = true;
    list.add(present_state);
    if (present_state)
      list.add(state);

    boolean present_code = true;
    list.add(present_code);
    if (present_code)
      list.add(code);

    boolean present_message = true && (isSetMessage());
    list.add(present_message);
    if (present_message)
      list.add(message);

    boolean present_dateline = true;
    list.add(present_dateline);
    if (present_dateline)
      list.add(dateline);

    boolean present_addressId = true;
    list.add(present_addressId);
    if (present_addressId)
      list.add(addressId);

    boolean present_cancelType = true;
    list.add(present_cancelType);
    if (present_cancelType)
      list.add(cancelType);

    boolean present_payType = true;
    list.add(present_payType);
    if (present_payType)
      list.add(payType);

    boolean present_finishDate = true;
    list.add(present_finishDate);
    if (present_finishDate)
      list.add(finishDate);

    boolean present_userName = true && (isSetUserName());
    list.add(present_userName);
    if (present_userName)
      list.add(userName);

    boolean present_limit = true;
    list.add(present_limit);
    if (present_limit)
      list.add(limit);

    boolean present_start = true;
    list.add(present_start);
    if (present_start)
      list.add(start);

    boolean present_ids = true && (isSetIds());
    list.add(present_ids);
    if (present_ids)
      list.add(ids);

    boolean present_orderIds = true && (isSetOrderIds());
    list.add(present_orderIds);
    if (present_orderIds)
      list.add(orderIds);

    boolean present_courierId = true && (isSetCourierId());
    list.add(present_courierId);
    if (present_courierId)
      list.add(courierId);

    boolean present_courierFee = true;
    list.add(present_courierFee);
    if (present_courierFee)
      list.add(courierFee);

    boolean present_returnState = true;
    list.add(present_returnState);
    if (present_returnState)
      list.add(returnState);

    boolean present_appraiseState = true;
    list.add(present_appraiseState);
    if (present_appraiseState)
      list.add(appraiseState);

    boolean present_aftersaleState = true;
    list.add(present_aftersaleState);
    if (present_aftersaleState)
      list.add(aftersaleState);

    return list.hashCode();
  }

  @Override
  public int compareTo(OrderEntity other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(other.isSetOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, other.orderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBuyerUid()).compareTo(other.isSetBuyerUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuyerUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buyerUid, other.buyerUid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShopId()).compareTo(other.isSetShopId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShopId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shopId, other.shopId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSupplierUid()).compareTo(other.isSetSupplierUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSupplierUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.supplierUid, other.supplierUid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum()).compareTo(other.isSetNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num, other.num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMoney()).compareTo(other.isSetMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.money, other.money);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetState()).compareTo(other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCode()).compareTo(other.isSetCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDateline()).compareTo(other.isSetDateline());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDateline()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dateline, other.dateline);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddressId()).compareTo(other.isSetAddressId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddressId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addressId, other.addressId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCancelType()).compareTo(other.isSetCancelType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCancelType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cancelType, other.cancelType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayType()).compareTo(other.isSetPayType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payType, other.payType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFinishDate()).compareTo(other.isSetFinishDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFinishDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.finishDate, other.finishDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLimit()).compareTo(other.isSetLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limit, other.limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStart()).compareTo(other.isSetStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, other.start);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIds()).compareTo(other.isSetIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ids, other.ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderIds()).compareTo(other.isSetOrderIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderIds, other.orderIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCourierId()).compareTo(other.isSetCourierId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCourierId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.courierId, other.courierId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCourierFee()).compareTo(other.isSetCourierFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCourierFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.courierFee, other.courierFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReturnState()).compareTo(other.isSetReturnState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReturnState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.returnState, other.returnState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppraiseState()).compareTo(other.isSetAppraiseState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppraiseState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appraiseState, other.appraiseState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAftersaleState()).compareTo(other.isSetAftersaleState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAftersaleState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aftersaleState, other.aftersaleState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("OrderEntity(");
    boolean first = true;

    sb.append("orderId:");
    if (this.orderId == null) {
      sb.append("null");
    } else {
      sb.append(this.orderId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("buyerUid:");
    if (this.buyerUid == null) {
      sb.append("null");
    } else {
      sb.append(this.buyerUid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("shopId:");
    sb.append(this.shopId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("supplierUid:");
    if (this.supplierUid == null) {
      sb.append("null");
    } else {
      sb.append(this.supplierUid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("num:");
    sb.append(this.num);
    first = false;
    if (!first) sb.append(", ");
    sb.append("money:");
    sb.append(this.money);
    first = false;
    if (!first) sb.append(", ");
    sb.append("state:");
    sb.append(this.state);
    first = false;
    if (!first) sb.append(", ");
    sb.append("code:");
    sb.append(this.code);
    first = false;
    if (!first) sb.append(", ");
    sb.append("message:");
    if (this.message == null) {
      sb.append("null");
    } else {
      sb.append(this.message);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dateline:");
    sb.append(this.dateline);
    first = false;
    if (!first) sb.append(", ");
    sb.append("addressId:");
    sb.append(this.addressId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cancelType:");
    sb.append(this.cancelType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("payType:");
    sb.append(this.payType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("finishDate:");
    sb.append(this.finishDate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userName:");
    if (this.userName == null) {
      sb.append("null");
    } else {
      sb.append(this.userName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("limit:");
    sb.append(this.limit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("start:");
    sb.append(this.start);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ids:");
    if (this.ids == null) {
      sb.append("null");
    } else {
      sb.append(this.ids);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderIds:");
    if (this.orderIds == null) {
      sb.append("null");
    } else {
      sb.append(this.orderIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("courierId:");
    if (this.courierId == null) {
      sb.append("null");
    } else {
      sb.append(this.courierId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("courierFee:");
    sb.append(this.courierFee);
    first = false;
    if (!first) sb.append(", ");
    sb.append("returnState:");
    sb.append(this.returnState);
    first = false;
    if (!first) sb.append(", ");
    sb.append("appraiseState:");
    sb.append(this.appraiseState);
    first = false;
    if (!first) sb.append(", ");
    sb.append("aftersaleState:");
    sb.append(this.aftersaleState);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OrderEntityStandardSchemeFactory implements SchemeFactory {
    public OrderEntityStandardScheme getScheme() {
      return new OrderEntityStandardScheme();
    }
  }

  private static class OrderEntityStandardScheme extends StandardScheme<OrderEntity> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, OrderEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderId = iprot.readString();
              struct.setOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BUYER_UID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.buyerUid = iprot.readString();
              struct.setBuyerUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SHOP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.shopId = iprot.readI32();
              struct.setShopIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SUPPLIER_UID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.supplierUid = iprot.readString();
              struct.setSupplierUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num = iprot.readI32();
              struct.setNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.money = iprot.readI32();
              struct.setMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.state = iprot.readI32();
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.code = iprot.readI32();
              struct.setCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.message = iprot.readString();
              struct.setMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DATELINE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dateline = iprot.readI32();
              struct.setDatelineIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ADDRESS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.addressId = iprot.readI32();
              struct.setAddressIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CANCEL_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cancelType = iprot.readI32();
              struct.setCancelTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PAY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.payType = iprot.readI32();
              struct.setPayTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // FINISH_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.finishDate = iprot.readI32();
              struct.setFinishDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userName = iprot.readString();
              struct.setUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.limit = iprot.readI32();
              struct.setLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // START
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.start = iprot.readI32();
              struct.setStartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ids = iprot.readString();
              struct.setIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // ORDER_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderIds = iprot.readString();
              struct.setOrderIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // COURIER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.courierId = iprot.readString();
              struct.setCourierIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // COURIER_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.courierFee = iprot.readI32();
              struct.setCourierFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // RETURN_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.returnState = iprot.readI32();
              struct.setReturnStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // APPRAISE_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.appraiseState = iprot.readI32();
              struct.setAppraiseStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // AFTERSALE_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.aftersaleState = iprot.readI32();
              struct.setAftersaleStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, OrderEntity struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.orderId != null) {
        oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
        oprot.writeString(struct.orderId);
        oprot.writeFieldEnd();
      }
      if (struct.buyerUid != null) {
        oprot.writeFieldBegin(BUYER_UID_FIELD_DESC);
        oprot.writeString(struct.buyerUid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SHOP_ID_FIELD_DESC);
      oprot.writeI32(struct.shopId);
      oprot.writeFieldEnd();
      if (struct.supplierUid != null) {
        oprot.writeFieldBegin(SUPPLIER_UID_FIELD_DESC);
        oprot.writeString(struct.supplierUid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NUM_FIELD_DESC);
      oprot.writeI32(struct.num);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MONEY_FIELD_DESC);
      oprot.writeI32(struct.money);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATE_FIELD_DESC);
      oprot.writeI32(struct.state);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CODE_FIELD_DESC);
      oprot.writeI32(struct.code);
      oprot.writeFieldEnd();
      if (struct.message != null) {
        oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
        oprot.writeString(struct.message);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DATELINE_FIELD_DESC);
      oprot.writeI32(struct.dateline);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ADDRESS_ID_FIELD_DESC);
      oprot.writeI32(struct.addressId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CANCEL_TYPE_FIELD_DESC);
      oprot.writeI32(struct.cancelType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAY_TYPE_FIELD_DESC);
      oprot.writeI32(struct.payType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FINISH_DATE_FIELD_DESC);
      oprot.writeI32(struct.finishDate);
      oprot.writeFieldEnd();
      if (struct.userName != null) {
        oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
        oprot.writeString(struct.userName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LIMIT_FIELD_DESC);
      oprot.writeI32(struct.limit);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(START_FIELD_DESC);
      oprot.writeI32(struct.start);
      oprot.writeFieldEnd();
      if (struct.ids != null) {
        oprot.writeFieldBegin(IDS_FIELD_DESC);
        oprot.writeString(struct.ids);
        oprot.writeFieldEnd();
      }
      if (struct.orderIds != null) {
        oprot.writeFieldBegin(ORDER_IDS_FIELD_DESC);
        oprot.writeString(struct.orderIds);
        oprot.writeFieldEnd();
      }
      if (struct.courierId != null) {
        oprot.writeFieldBegin(COURIER_ID_FIELD_DESC);
        oprot.writeString(struct.courierId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(COURIER_FEE_FIELD_DESC);
      oprot.writeI32(struct.courierFee);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RETURN_STATE_FIELD_DESC);
      oprot.writeI32(struct.returnState);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(APPRAISE_STATE_FIELD_DESC);
      oprot.writeI32(struct.appraiseState);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AFTERSALE_STATE_FIELD_DESC);
      oprot.writeI32(struct.aftersaleState);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OrderEntityTupleSchemeFactory implements SchemeFactory {
    public OrderEntityTupleScheme getScheme() {
      return new OrderEntityTupleScheme();
    }
  }

  private static class OrderEntityTupleScheme extends TupleScheme<OrderEntity> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, OrderEntity struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetOrderId()) {
        optionals.set(0);
      }
      if (struct.isSetBuyerUid()) {
        optionals.set(1);
      }
      if (struct.isSetShopId()) {
        optionals.set(2);
      }
      if (struct.isSetSupplierUid()) {
        optionals.set(3);
      }
      if (struct.isSetNum()) {
        optionals.set(4);
      }
      if (struct.isSetMoney()) {
        optionals.set(5);
      }
      if (struct.isSetState()) {
        optionals.set(6);
      }
      if (struct.isSetCode()) {
        optionals.set(7);
      }
      if (struct.isSetMessage()) {
        optionals.set(8);
      }
      if (struct.isSetDateline()) {
        optionals.set(9);
      }
      if (struct.isSetAddressId()) {
        optionals.set(10);
      }
      if (struct.isSetCancelType()) {
        optionals.set(11);
      }
      if (struct.isSetPayType()) {
        optionals.set(12);
      }
      if (struct.isSetFinishDate()) {
        optionals.set(13);
      }
      if (struct.isSetUserName()) {
        optionals.set(14);
      }
      if (struct.isSetLimit()) {
        optionals.set(15);
      }
      if (struct.isSetStart()) {
        optionals.set(16);
      }
      if (struct.isSetIds()) {
        optionals.set(17);
      }
      if (struct.isSetOrderIds()) {
        optionals.set(18);
      }
      if (struct.isSetCourierId()) {
        optionals.set(19);
      }
      if (struct.isSetCourierFee()) {
        optionals.set(20);
      }
      if (struct.isSetReturnState()) {
        optionals.set(21);
      }
      if (struct.isSetAppraiseState()) {
        optionals.set(22);
      }
      if (struct.isSetAftersaleState()) {
        optionals.set(23);
      }
      oprot.writeBitSet(optionals, 24);
      if (struct.isSetOrderId()) {
        oprot.writeString(struct.orderId);
      }
      if (struct.isSetBuyerUid()) {
        oprot.writeString(struct.buyerUid);
      }
      if (struct.isSetShopId()) {
        oprot.writeI32(struct.shopId);
      }
      if (struct.isSetSupplierUid()) {
        oprot.writeString(struct.supplierUid);
      }
      if (struct.isSetNum()) {
        oprot.writeI32(struct.num);
      }
      if (struct.isSetMoney()) {
        oprot.writeI32(struct.money);
      }
      if (struct.isSetState()) {
        oprot.writeI32(struct.state);
      }
      if (struct.isSetCode()) {
        oprot.writeI32(struct.code);
      }
      if (struct.isSetMessage()) {
        oprot.writeString(struct.message);
      }
      if (struct.isSetDateline()) {
        oprot.writeI32(struct.dateline);
      }
      if (struct.isSetAddressId()) {
        oprot.writeI32(struct.addressId);
      }
      if (struct.isSetCancelType()) {
        oprot.writeI32(struct.cancelType);
      }
      if (struct.isSetPayType()) {
        oprot.writeI32(struct.payType);
      }
      if (struct.isSetFinishDate()) {
        oprot.writeI32(struct.finishDate);
      }
      if (struct.isSetUserName()) {
        oprot.writeString(struct.userName);
      }
      if (struct.isSetLimit()) {
        oprot.writeI32(struct.limit);
      }
      if (struct.isSetStart()) {
        oprot.writeI32(struct.start);
      }
      if (struct.isSetIds()) {
        oprot.writeString(struct.ids);
      }
      if (struct.isSetOrderIds()) {
        oprot.writeString(struct.orderIds);
      }
      if (struct.isSetCourierId()) {
        oprot.writeString(struct.courierId);
      }
      if (struct.isSetCourierFee()) {
        oprot.writeI32(struct.courierFee);
      }
      if (struct.isSetReturnState()) {
        oprot.writeI32(struct.returnState);
      }
      if (struct.isSetAppraiseState()) {
        oprot.writeI32(struct.appraiseState);
      }
      if (struct.isSetAftersaleState()) {
        oprot.writeI32(struct.aftersaleState);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, OrderEntity struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(24);
      if (incoming.get(0)) {
        struct.orderId = iprot.readString();
        struct.setOrderIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.buyerUid = iprot.readString();
        struct.setBuyerUidIsSet(true);
      }
      if (incoming.get(2)) {
        struct.shopId = iprot.readI32();
        struct.setShopIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.supplierUid = iprot.readString();
        struct.setSupplierUidIsSet(true);
      }
      if (incoming.get(4)) {
        struct.num = iprot.readI32();
        struct.setNumIsSet(true);
      }
      if (incoming.get(5)) {
        struct.money = iprot.readI32();
        struct.setMoneyIsSet(true);
      }
      if (incoming.get(6)) {
        struct.state = iprot.readI32();
        struct.setStateIsSet(true);
      }
      if (incoming.get(7)) {
        struct.code = iprot.readI32();
        struct.setCodeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.message = iprot.readString();
        struct.setMessageIsSet(true);
      }
      if (incoming.get(9)) {
        struct.dateline = iprot.readI32();
        struct.setDatelineIsSet(true);
      }
      if (incoming.get(10)) {
        struct.addressId = iprot.readI32();
        struct.setAddressIdIsSet(true);
      }
      if (incoming.get(11)) {
        struct.cancelType = iprot.readI32();
        struct.setCancelTypeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.payType = iprot.readI32();
        struct.setPayTypeIsSet(true);
      }
      if (incoming.get(13)) {
        struct.finishDate = iprot.readI32();
        struct.setFinishDateIsSet(true);
      }
      if (incoming.get(14)) {
        struct.userName = iprot.readString();
        struct.setUserNameIsSet(true);
      }
      if (incoming.get(15)) {
        struct.limit = iprot.readI32();
        struct.setLimitIsSet(true);
      }
      if (incoming.get(16)) {
        struct.start = iprot.readI32();
        struct.setStartIsSet(true);
      }
      if (incoming.get(17)) {
        struct.ids = iprot.readString();
        struct.setIdsIsSet(true);
      }
      if (incoming.get(18)) {
        struct.orderIds = iprot.readString();
        struct.setOrderIdsIsSet(true);
      }
      if (incoming.get(19)) {
        struct.courierId = iprot.readString();
        struct.setCourierIdIsSet(true);
      }
      if (incoming.get(20)) {
        struct.courierFee = iprot.readI32();
        struct.setCourierFeeIsSet(true);
      }
      if (incoming.get(21)) {
        struct.returnState = iprot.readI32();
        struct.setReturnStateIsSet(true);
      }
      if (incoming.get(22)) {
        struct.appraiseState = iprot.readI32();
        struct.setAppraiseStateIsSet(true);
      }
      if (incoming.get(23)) {
        struct.aftersaleState = iprot.readI32();
        struct.setAftersaleStateIsSet(true);
      }
    }
  }

}


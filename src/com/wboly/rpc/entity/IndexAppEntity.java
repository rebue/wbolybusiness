package com.wboly.rpc.entity;

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Generated;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

@SuppressWarnings({"rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-07-14")
public class IndexAppEntity implements org.apache.thrift.TBase<IndexAppEntity, IndexAppEntity._Fields>, java.io.Serializable, Cloneable, Comparable<IndexAppEntity> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IndexAppEntity");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField ISLINE_FIELD_DESC = new org.apache.thrift.protocol.TField("isline", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField SHOP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("shopId", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField GOODS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("goodsId", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField MODULETYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("moduletype", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField NEW_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("newPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField OLD_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("oldPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField LEAST_BAC_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("leastBacLimit", org.apache.thrift.protocol.TType.DOUBLE, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new IndexAppEntityStandardSchemeFactory());
    schemes.put(TupleScheme.class, new IndexAppEntityTupleSchemeFactory());
  }

  public int id; // required
  public String title; // required
  public String content; // required
  public String url; // required
  public String type; // required
  public int isline; // required
  public int shopId; // required
  public int goodsId; // required
  public int moduletype; // required
  public double newPrice; // required
  public double oldPrice; // required
  public double leastBacLimit; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    TITLE((short)2, "title"),
    CONTENT((short)3, "content"),
    URL((short)4, "url"),
    TYPE((short)5, "type"),
    ISLINE((short)6, "isline"),
    SHOP_ID((short)7, "shopId"),
    GOODS_ID((short)8, "goodsId"),
    MODULETYPE((short)9, "moduletype"),
    NEW_PRICE((short)10, "newPrice"),
    OLD_PRICE((short)11, "oldPrice"),
    LEAST_BAC_LIMIT((short)12, "leastBacLimit");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // TITLE
          return TITLE;
        case 3: // CONTENT
          return CONTENT;
        case 4: // URL
          return URL;
        case 5: // TYPE
          return TYPE;
        case 6: // ISLINE
          return ISLINE;
        case 7: // SHOP_ID
          return SHOP_ID;
        case 8: // GOODS_ID
          return GOODS_ID;
        case 9: // MODULETYPE
          return MODULETYPE;
        case 10: // NEW_PRICE
          return NEW_PRICE;
        case 11: // OLD_PRICE
          return OLD_PRICE;
        case 12: // LEAST_BAC_LIMIT
          return LEAST_BAC_LIMIT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __ISLINE_ISSET_ID = 1;
  private static final int __SHOPID_ISSET_ID = 2;
  private static final int __GOODSID_ISSET_ID = 3;
  private static final int __MODULETYPE_ISSET_ID = 4;
  private static final int __NEWPRICE_ISSET_ID = 5;
  private static final int __OLDPRICE_ISSET_ID = 6;
  private static final int __LEASTBACLIMIT_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ISLINE, new org.apache.thrift.meta_data.FieldMetaData("isline", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SHOP_ID, new org.apache.thrift.meta_data.FieldMetaData("shopId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GOODS_ID, new org.apache.thrift.meta_data.FieldMetaData("goodsId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MODULETYPE, new org.apache.thrift.meta_data.FieldMetaData("moduletype", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NEW_PRICE, new org.apache.thrift.meta_data.FieldMetaData("newPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OLD_PRICE, new org.apache.thrift.meta_data.FieldMetaData("oldPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LEAST_BAC_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("leastBacLimit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IndexAppEntity.class, metaDataMap);
  }

  public IndexAppEntity() {
  }

  public IndexAppEntity(
    int id,
    String title,
    String content,
    String url,
    String type,
    int isline,
    int shopId,
    int goodsId,
    int moduletype,
    double newPrice,
    double oldPrice,
    double leastBacLimit)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.title = title;
    this.content = content;
    this.url = url;
    this.type = type;
    this.isline = isline;
    setIslineIsSet(true);
    this.shopId = shopId;
    setShopIdIsSet(true);
    this.goodsId = goodsId;
    setGoodsIdIsSet(true);
    this.moduletype = moduletype;
    setModuletypeIsSet(true);
    this.newPrice = newPrice;
    setNewPriceIsSet(true);
    this.oldPrice = oldPrice;
    setOldPriceIsSet(true);
    this.leastBacLimit = leastBacLimit;
    setLeastBacLimitIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public IndexAppEntity(IndexAppEntity other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetContent()) {
      this.content = other.content;
    }
    if (other.isSetUrl()) {
      this.url = other.url;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    this.isline = other.isline;
    this.shopId = other.shopId;
    this.goodsId = other.goodsId;
    this.moduletype = other.moduletype;
    this.newPrice = other.newPrice;
    this.oldPrice = other.oldPrice;
    this.leastBacLimit = other.leastBacLimit;
  }

  public IndexAppEntity deepCopy() {
    return new IndexAppEntity(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.title = null;
    this.content = null;
    this.url = null;
    this.type = null;
    setIslineIsSet(false);
    this.isline = 0;
    setShopIdIsSet(false);
    this.shopId = 0;
    setGoodsIdIsSet(false);
    this.goodsId = 0;
    setModuletypeIsSet(false);
    this.moduletype = 0;
    setNewPriceIsSet(false);
    this.newPrice = 0.0;
    setOldPriceIsSet(false);
    this.oldPrice = 0.0;
    setLeastBacLimitIsSet(false);
    this.leastBacLimit = 0.0;
  }

  public int getId() {
    return this.id;
  }

  public IndexAppEntity setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getTitle() {
    return this.title;
  }

  public IndexAppEntity setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public String getContent() {
    return this.content;
  }

  public IndexAppEntity setContent(String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public String getUrl() {
    return this.url;
  }

  public IndexAppEntity setUrl(String url) {
    this.url = url;
    return this;
  }

  public void unsetUrl() {
    this.url = null;
  }

  /** Returns true if field url is set (has been assigned a value) and false otherwise */
  public boolean isSetUrl() {
    return this.url != null;
  }

  public void setUrlIsSet(boolean value) {
    if (!value) {
      this.url = null;
    }
  }

  public String getType() {
    return this.type;
  }

  public IndexAppEntity setType(String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public int getIsline() {
    return this.isline;
  }

  public IndexAppEntity setIsline(int isline) {
    this.isline = isline;
    setIslineIsSet(true);
    return this;
  }

  public void unsetIsline() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISLINE_ISSET_ID);
  }

  /** Returns true if field isline is set (has been assigned a value) and false otherwise */
  public boolean isSetIsline() {
    return EncodingUtils.testBit(__isset_bitfield, __ISLINE_ISSET_ID);
  }

  public void setIslineIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISLINE_ISSET_ID, value);
  }

  public int getShopId() {
    return this.shopId;
  }

  public IndexAppEntity setShopId(int shopId) {
    this.shopId = shopId;
    setShopIdIsSet(true);
    return this;
  }

  public void unsetShopId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOPID_ISSET_ID);
  }

  /** Returns true if field shopId is set (has been assigned a value) and false otherwise */
  public boolean isSetShopId() {
    return EncodingUtils.testBit(__isset_bitfield, __SHOPID_ISSET_ID);
  }

  public void setShopIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOPID_ISSET_ID, value);
  }

  public int getGoodsId() {
    return this.goodsId;
  }

  public IndexAppEntity setGoodsId(int goodsId) {
    this.goodsId = goodsId;
    setGoodsIdIsSet(true);
    return this;
  }

  public void unsetGoodsId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GOODSID_ISSET_ID);
  }

  /** Returns true if field goodsId is set (has been assigned a value) and false otherwise */
  public boolean isSetGoodsId() {
    return EncodingUtils.testBit(__isset_bitfield, __GOODSID_ISSET_ID);
  }

  public void setGoodsIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GOODSID_ISSET_ID, value);
  }

  public int getModuletype() {
    return this.moduletype;
  }

  public IndexAppEntity setModuletype(int moduletype) {
    this.moduletype = moduletype;
    setModuletypeIsSet(true);
    return this;
  }

  public void unsetModuletype() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MODULETYPE_ISSET_ID);
  }

  /** Returns true if field moduletype is set (has been assigned a value) and false otherwise */
  public boolean isSetModuletype() {
    return EncodingUtils.testBit(__isset_bitfield, __MODULETYPE_ISSET_ID);
  }

  public void setModuletypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MODULETYPE_ISSET_ID, value);
  }

  public double getNewPrice() {
    return this.newPrice;
  }

  public IndexAppEntity setNewPrice(double newPrice) {
    this.newPrice = newPrice;
    setNewPriceIsSet(true);
    return this;
  }

  public void unsetNewPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEWPRICE_ISSET_ID);
  }

  /** Returns true if field newPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetNewPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __NEWPRICE_ISSET_ID);
  }

  public void setNewPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEWPRICE_ISSET_ID, value);
  }

  public double getOldPrice() {
    return this.oldPrice;
  }

  public IndexAppEntity setOldPrice(double oldPrice) {
    this.oldPrice = oldPrice;
    setOldPriceIsSet(true);
    return this;
  }

  public void unsetOldPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OLDPRICE_ISSET_ID);
  }

  /** Returns true if field oldPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetOldPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __OLDPRICE_ISSET_ID);
  }

  public void setOldPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OLDPRICE_ISSET_ID, value);
  }

  public double getLeastBacLimit() {
    return this.leastBacLimit;
  }

  public IndexAppEntity setLeastBacLimit(double leastBacLimit) {
    this.leastBacLimit = leastBacLimit;
    setLeastBacLimitIsSet(true);
    return this;
  }

  public void unsetLeastBacLimit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEASTBACLIMIT_ISSET_ID);
  }

  /** Returns true if field leastBacLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetLeastBacLimit() {
    return EncodingUtils.testBit(__isset_bitfield, __LEASTBACLIMIT_ISSET_ID);
  }

  public void setLeastBacLimitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEASTBACLIMIT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;

    case URL:
      if (value == null) {
        unsetUrl();
      } else {
        setUrl((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((String)value);
      }
      break;

    case ISLINE:
      if (value == null) {
        unsetIsline();
      } else {
        setIsline((Integer)value);
      }
      break;

    case SHOP_ID:
      if (value == null) {
        unsetShopId();
      } else {
        setShopId((Integer)value);
      }
      break;

    case GOODS_ID:
      if (value == null) {
        unsetGoodsId();
      } else {
        setGoodsId((Integer)value);
      }
      break;

    case MODULETYPE:
      if (value == null) {
        unsetModuletype();
      } else {
        setModuletype((Integer)value);
      }
      break;

    case NEW_PRICE:
      if (value == null) {
        unsetNewPrice();
      } else {
        setNewPrice((Double)value);
      }
      break;

    case OLD_PRICE:
      if (value == null) {
        unsetOldPrice();
      } else {
        setOldPrice((Double)value);
      }
      break;

    case LEAST_BAC_LIMIT:
      if (value == null) {
        unsetLeastBacLimit();
      } else {
        setLeastBacLimit((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case TITLE:
      return getTitle();

    case CONTENT:
      return getContent();

    case URL:
      return getUrl();

    case TYPE:
      return getType();

    case ISLINE:
      return getIsline();

    case SHOP_ID:
      return getShopId();

    case GOODS_ID:
      return getGoodsId();

    case MODULETYPE:
      return getModuletype();

    case NEW_PRICE:
      return getNewPrice();

    case OLD_PRICE:
      return getOldPrice();

    case LEAST_BAC_LIMIT:
      return getLeastBacLimit();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case TITLE:
      return isSetTitle();
    case CONTENT:
      return isSetContent();
    case URL:
      return isSetUrl();
    case TYPE:
      return isSetType();
    case ISLINE:
      return isSetIsline();
    case SHOP_ID:
      return isSetShopId();
    case GOODS_ID:
      return isSetGoodsId();
    case MODULETYPE:
      return isSetModuletype();
    case NEW_PRICE:
      return isSetNewPrice();
    case OLD_PRICE:
      return isSetOldPrice();
    case LEAST_BAC_LIMIT:
      return isSetLeastBacLimit();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof IndexAppEntity)
      return this.equals((IndexAppEntity)that);
    return false;
  }

  public boolean equals(IndexAppEntity that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_url = true && this.isSetUrl();
    boolean that_present_url = true && that.isSetUrl();
    if (this_present_url || that_present_url) {
      if (!(this_present_url && that_present_url))
        return false;
      if (!this.url.equals(that.url))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_isline = true;
    boolean that_present_isline = true;
    if (this_present_isline || that_present_isline) {
      if (!(this_present_isline && that_present_isline))
        return false;
      if (this.isline != that.isline)
        return false;
    }

    boolean this_present_shopId = true;
    boolean that_present_shopId = true;
    if (this_present_shopId || that_present_shopId) {
      if (!(this_present_shopId && that_present_shopId))
        return false;
      if (this.shopId != that.shopId)
        return false;
    }

    boolean this_present_goodsId = true;
    boolean that_present_goodsId = true;
    if (this_present_goodsId || that_present_goodsId) {
      if (!(this_present_goodsId && that_present_goodsId))
        return false;
      if (this.goodsId != that.goodsId)
        return false;
    }

    boolean this_present_moduletype = true;
    boolean that_present_moduletype = true;
    if (this_present_moduletype || that_present_moduletype) {
      if (!(this_present_moduletype && that_present_moduletype))
        return false;
      if (this.moduletype != that.moduletype)
        return false;
    }

    boolean this_present_newPrice = true;
    boolean that_present_newPrice = true;
    if (this_present_newPrice || that_present_newPrice) {
      if (!(this_present_newPrice && that_present_newPrice))
        return false;
      if (this.newPrice != that.newPrice)
        return false;
    }

    boolean this_present_oldPrice = true;
    boolean that_present_oldPrice = true;
    if (this_present_oldPrice || that_present_oldPrice) {
      if (!(this_present_oldPrice && that_present_oldPrice))
        return false;
      if (this.oldPrice != that.oldPrice)
        return false;
    }

    boolean this_present_leastBacLimit = true;
    boolean that_present_leastBacLimit = true;
    if (this_present_leastBacLimit || that_present_leastBacLimit) {
      if (!(this_present_leastBacLimit && that_present_leastBacLimit))
        return false;
      if (this.leastBacLimit != that.leastBacLimit)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_title = true && (isSetTitle());
    list.add(present_title);
    if (present_title)
      list.add(title);

    boolean present_content = true && (isSetContent());
    list.add(present_content);
    if (present_content)
      list.add(content);

    boolean present_url = true && (isSetUrl());
    list.add(present_url);
    if (present_url)
      list.add(url);

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type);

    boolean present_isline = true;
    list.add(present_isline);
    if (present_isline)
      list.add(isline);

    boolean present_shopId = true;
    list.add(present_shopId);
    if (present_shopId)
      list.add(shopId);

    boolean present_goodsId = true;
    list.add(present_goodsId);
    if (present_goodsId)
      list.add(goodsId);

    boolean present_moduletype = true;
    list.add(present_moduletype);
    if (present_moduletype)
      list.add(moduletype);

    boolean present_newPrice = true;
    list.add(present_newPrice);
    if (present_newPrice)
      list.add(newPrice);

    boolean present_oldPrice = true;
    list.add(present_oldPrice);
    if (present_oldPrice)
      list.add(oldPrice);

    boolean present_leastBacLimit = true;
    list.add(present_leastBacLimit);
    if (present_leastBacLimit)
      list.add(leastBacLimit);

    return list.hashCode();
  }

  @Override
  public int compareTo(IndexAppEntity other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUrl()).compareTo(other.isSetUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, other.url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsline()).compareTo(other.isSetIsline());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsline()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isline, other.isline);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShopId()).compareTo(other.isSetShopId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShopId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shopId, other.shopId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGoodsId()).compareTo(other.isSetGoodsId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGoodsId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.goodsId, other.goodsId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetModuletype()).compareTo(other.isSetModuletype());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModuletype()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.moduletype, other.moduletype);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNewPrice()).compareTo(other.isSetNewPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newPrice, other.newPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOldPrice()).compareTo(other.isSetOldPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOldPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldPrice, other.oldPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLeastBacLimit()).compareTo(other.isSetLeastBacLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLeastBacLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.leastBacLimit, other.leastBacLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("IndexAppEntity(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("title:");
    if (this.title == null) {
      sb.append("null");
    } else {
      sb.append(this.title);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("content:");
    if (this.content == null) {
      sb.append("null");
    } else {
      sb.append(this.content);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("url:");
    if (this.url == null) {
      sb.append("null");
    } else {
      sb.append(this.url);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isline:");
    sb.append(this.isline);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shopId:");
    sb.append(this.shopId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("goodsId:");
    sb.append(this.goodsId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("moduletype:");
    sb.append(this.moduletype);
    first = false;
    if (!first) sb.append(", ");
    sb.append("newPrice:");
    sb.append(this.newPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("oldPrice:");
    sb.append(this.oldPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("leastBacLimit:");
    sb.append(this.leastBacLimit);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class IndexAppEntityStandardSchemeFactory implements SchemeFactory {
    public IndexAppEntityStandardScheme getScheme() {
      return new IndexAppEntityStandardScheme();
    }
  }

  private static class IndexAppEntityStandardScheme extends StandardScheme<IndexAppEntity> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, IndexAppEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.url = iprot.readString();
              struct.setUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ISLINE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isline = iprot.readI32();
              struct.setIslineIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SHOP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.shopId = iprot.readI32();
              struct.setShopIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // GOODS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.goodsId = iprot.readI32();
              struct.setGoodsIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MODULETYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.moduletype = iprot.readI32();
              struct.setModuletypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // NEW_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.newPrice = iprot.readDouble();
              struct.setNewPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // OLD_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.oldPrice = iprot.readDouble();
              struct.setOldPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // LEAST_BAC_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.leastBacLimit = iprot.readDouble();
              struct.setLeastBacLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, IndexAppEntity struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(struct.title);
        oprot.writeFieldEnd();
      }
      if (struct.content != null) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        oprot.writeString(struct.content);
        oprot.writeFieldEnd();
      }
      if (struct.url != null) {
        oprot.writeFieldBegin(URL_FIELD_DESC);
        oprot.writeString(struct.url);
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeString(struct.type);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ISLINE_FIELD_DESC);
      oprot.writeI32(struct.isline);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHOP_ID_FIELD_DESC);
      oprot.writeI32(struct.shopId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GOODS_ID_FIELD_DESC);
      oprot.writeI32(struct.goodsId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MODULETYPE_FIELD_DESC);
      oprot.writeI32(struct.moduletype);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NEW_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.newPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OLD_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.oldPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LEAST_BAC_LIMIT_FIELD_DESC);
      oprot.writeDouble(struct.leastBacLimit);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class IndexAppEntityTupleSchemeFactory implements SchemeFactory {
    public IndexAppEntityTupleScheme getScheme() {
      return new IndexAppEntityTupleScheme();
    }
  }

  private static class IndexAppEntityTupleScheme extends TupleScheme<IndexAppEntity> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, IndexAppEntity struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetTitle()) {
        optionals.set(1);
      }
      if (struct.isSetContent()) {
        optionals.set(2);
      }
      if (struct.isSetUrl()) {
        optionals.set(3);
      }
      if (struct.isSetType()) {
        optionals.set(4);
      }
      if (struct.isSetIsline()) {
        optionals.set(5);
      }
      if (struct.isSetShopId()) {
        optionals.set(6);
      }
      if (struct.isSetGoodsId()) {
        optionals.set(7);
      }
      if (struct.isSetModuletype()) {
        optionals.set(8);
      }
      if (struct.isSetNewPrice()) {
        optionals.set(9);
      }
      if (struct.isSetOldPrice()) {
        optionals.set(10);
      }
      if (struct.isSetLeastBacLimit()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetTitle()) {
        oprot.writeString(struct.title);
      }
      if (struct.isSetContent()) {
        oprot.writeString(struct.content);
      }
      if (struct.isSetUrl()) {
        oprot.writeString(struct.url);
      }
      if (struct.isSetType()) {
        oprot.writeString(struct.type);
      }
      if (struct.isSetIsline()) {
        oprot.writeI32(struct.isline);
      }
      if (struct.isSetShopId()) {
        oprot.writeI32(struct.shopId);
      }
      if (struct.isSetGoodsId()) {
        oprot.writeI32(struct.goodsId);
      }
      if (struct.isSetModuletype()) {
        oprot.writeI32(struct.moduletype);
      }
      if (struct.isSetNewPrice()) {
        oprot.writeDouble(struct.newPrice);
      }
      if (struct.isSetOldPrice()) {
        oprot.writeDouble(struct.oldPrice);
      }
      if (struct.isSetLeastBacLimit()) {
        oprot.writeDouble(struct.leastBacLimit);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, IndexAppEntity struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.title = iprot.readString();
        struct.setTitleIsSet(true);
      }
      if (incoming.get(2)) {
        struct.content = iprot.readString();
        struct.setContentIsSet(true);
      }
      if (incoming.get(3)) {
        struct.url = iprot.readString();
        struct.setUrlIsSet(true);
      }
      if (incoming.get(4)) {
        struct.type = iprot.readString();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.isline = iprot.readI32();
        struct.setIslineIsSet(true);
      }
      if (incoming.get(6)) {
        struct.shopId = iprot.readI32();
        struct.setShopIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.goodsId = iprot.readI32();
        struct.setGoodsIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.moduletype = iprot.readI32();
        struct.setModuletypeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.newPrice = iprot.readDouble();
        struct.setNewPriceIsSet(true);
      }
      if (incoming.get(10)) {
        struct.oldPrice = iprot.readDouble();
        struct.setOldPriceIsSet(true);
      }
      if (incoming.get(11)) {
        struct.leastBacLimit = iprot.readDouble();
        struct.setLeastBacLimitIsSet(true);
      }
    }
  }

}


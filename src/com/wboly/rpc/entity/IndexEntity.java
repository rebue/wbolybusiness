package com.wboly.rpc.entity;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Generated;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

@SuppressWarnings({ "rawtypes", "serial", "unchecked" })
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-08-22")
public class IndexEntity implements org.apache.thrift.TBase<IndexEntity, IndexEntity._Fields>, java.io.Serializable,
		Cloneable, Comparable<IndexEntity> {
	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"IndexEntity");

	private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id",
			org.apache.thrift.protocol.TType.I32, (short) 1);
	private static final org.apache.thrift.protocol.TField GOODS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"goodsId", org.apache.thrift.protocol.TType.I32, (short) 2);
	private static final org.apache.thrift.protocol.TField MODULETYPE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"moduletype", org.apache.thrift.protocol.TType.I32, (short) 3);
	private static final org.apache.thrift.protocol.TField NEW_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"newPrice", org.apache.thrift.protocol.TType.STRING, (short) 4);
	private static final org.apache.thrift.protocol.TField OLD_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"oldPrice", org.apache.thrift.protocol.TType.STRING, (short) 5);
	private static final org.apache.thrift.protocol.TField CAROUSEL_FIGURE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"carouselFigureUrl", org.apache.thrift.protocol.TType.STRING, (short) 6);
	private static final org.apache.thrift.protocol.TField CAROUSEL_FIGURE_JUMP_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"carouselFigureJump", org.apache.thrift.protocol.TType.STRING, (short) 7);
	private static final org.apache.thrift.protocol.TField SHOP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"shopId", org.apache.thrift.protocol.TType.I32, (short) 8);
	private static final org.apache.thrift.protocol.TField FACE_IMG_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"faceImg", org.apache.thrift.protocol.TType.STRING, (short) 9);
	private static final org.apache.thrift.protocol.TField PLATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"plateId", org.apache.thrift.protocol.TType.STRING, (short) 10);
	private static final org.apache.thrift.protocol.TField MODULAR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"modularId", org.apache.thrift.protocol.TType.I32, (short) 11);
	private static final org.apache.thrift.protocol.TField LEAST_BAC_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"leastBacLimit", org.apache.thrift.protocol.TType.STRING, (short) 12);
	private static final org.apache.thrift.protocol.TField GOODS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"goodsName", org.apache.thrift.protocol.TType.STRING, (short) 13);
	private static final org.apache.thrift.protocol.TField USERS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"usersId", org.apache.thrift.protocol.TType.STRING, (short) 14);

	private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
	static {
		schemes.put(StandardScheme.class, new IndexEntityStandardSchemeFactory());
		schemes.put(TupleScheme.class, new IndexEntityTupleSchemeFactory());
	}

	public int id; // required
	public int goodsId; // required
	public int moduletype; // required
	public String newPrice; // required
	public String oldPrice; // required
	public String carouselFigureUrl; // required
	public String carouselFigureJump; // required
	public int shopId; // required
	public String faceImg; // required
	public String plateId; // required
	public int modularId; // required
	public String leastBacLimit; // required
	public String goodsName; // required
	public String usersId; // required

	/**
	 * The set of fields this struct contains, along with convenience methods
	 * for finding and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		ID((short) 1, "id"), GOODS_ID((short) 2, "goodsId"), MODULETYPE((short) 3, "moduletype"), NEW_PRICE((short) 4,
				"newPrice"), OLD_PRICE((short) 5, "oldPrice"), CAROUSEL_FIGURE_URL((short) 6,
						"carouselFigureUrl"), CAROUSEL_FIGURE_JUMP((short) 7, "carouselFigureJump"), SHOP_ID((short) 8,
								"shopId"), FACE_IMG((short) 9, "faceImg"), PLATE_ID((short) 10,
										"plateId"), MODULAR_ID((short) 11, "modularId"), LEAST_BAC_LIMIT((short) 12,
												"leastBacLimit"), GOODS_NAME((short) 13,
														"goodsName"), USERS_ID((short) 14, "usersId");

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

		static {
			for (_Fields field : EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not
		 * found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // ID
				return ID;
			case 2: // GOODS_ID
				return GOODS_ID;
			case 3: // MODULETYPE
				return MODULETYPE;
			case 4: // NEW_PRICE
				return NEW_PRICE;
			case 5: // OLD_PRICE
				return OLD_PRICE;
			case 6: // CAROUSEL_FIGURE_URL
				return CAROUSEL_FIGURE_URL;
			case 7: // CAROUSEL_FIGURE_JUMP
				return CAROUSEL_FIGURE_JUMP;
			case 8: // SHOP_ID
				return SHOP_ID;
			case 9: // FACE_IMG
				return FACE_IMG;
			case 10: // PLATE_ID
				return PLATE_ID;
			case 11: // MODULAR_ID
				return MODULAR_ID;
			case 12: // LEAST_BAC_LIMIT
				return LEAST_BAC_LIMIT;
			case 13: // GOODS_NAME
				return GOODS_NAME;
			case 14: // USERS_ID
				return USERS_ID;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception
		 * if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not
		 * found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	private static final int __ID_ISSET_ID = 0;
	private static final int __GOODSID_ISSET_ID = 1;
	private static final int __MODULETYPE_ISSET_ID = 2;
	private static final int __SHOPID_ISSET_ID = 3;
	private static final int __MODULARID_ISSET_ID = 4;
	private byte __isset_bitfield = 0;
	public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.ID,
				new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.GOODS_ID,
				new org.apache.thrift.meta_data.FieldMetaData("goodsId",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.MODULETYPE,
				new org.apache.thrift.meta_data.FieldMetaData("moduletype",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.NEW_PRICE,
				new org.apache.thrift.meta_data.FieldMetaData("newPrice",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.OLD_PRICE,
				new org.apache.thrift.meta_data.FieldMetaData("oldPrice",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.CAROUSEL_FIGURE_URL,
				new org.apache.thrift.meta_data.FieldMetaData("carouselFigureUrl",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.CAROUSEL_FIGURE_JUMP,
				new org.apache.thrift.meta_data.FieldMetaData("carouselFigureJump",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.SHOP_ID,
				new org.apache.thrift.meta_data.FieldMetaData("shopId", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.FACE_IMG,
				new org.apache.thrift.meta_data.FieldMetaData("faceImg",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.PLATE_ID,
				new org.apache.thrift.meta_data.FieldMetaData("plateId",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.MODULAR_ID,
				new org.apache.thrift.meta_data.FieldMetaData("modularId",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.LEAST_BAC_LIMIT,
				new org.apache.thrift.meta_data.FieldMetaData("leastBacLimit",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.GOODS_NAME,
				new org.apache.thrift.meta_data.FieldMetaData("goodsName",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.USERS_ID,
				new org.apache.thrift.meta_data.FieldMetaData("usersId",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		metaDataMap = Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IndexEntity.class, metaDataMap);
	}

	public IndexEntity() {
	}

	public IndexEntity(int id, int goodsId, int moduletype, String newPrice, String oldPrice, String carouselFigureUrl,
			String carouselFigureJump, int shopId, String faceImg, String plateId, int modularId, String leastBacLimit,
			String goodsName, String usersId) {
		this();
		this.id = id;
		setIdIsSet(true);
		this.goodsId = goodsId;
		setGoodsIdIsSet(true);
		this.moduletype = moduletype;
		setModuletypeIsSet(true);
		this.newPrice = newPrice;
		this.oldPrice = oldPrice;
		this.carouselFigureUrl = carouselFigureUrl;
		this.carouselFigureJump = carouselFigureJump;
		this.shopId = shopId;
		setShopIdIsSet(true);
		this.faceImg = faceImg;
		this.plateId = plateId;
		this.modularId = modularId;
		setModularIdIsSet(true);
		this.leastBacLimit = leastBacLimit;
		this.goodsName = goodsName;
		this.usersId = usersId;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public IndexEntity(IndexEntity other) {
		__isset_bitfield = other.__isset_bitfield;
		this.id = other.id;
		this.goodsId = other.goodsId;
		this.moduletype = other.moduletype;
		if (other.isSetNewPrice()) {
			this.newPrice = other.newPrice;
		}
		if (other.isSetOldPrice()) {
			this.oldPrice = other.oldPrice;
		}
		if (other.isSetCarouselFigureUrl()) {
			this.carouselFigureUrl = other.carouselFigureUrl;
		}
		if (other.isSetCarouselFigureJump()) {
			this.carouselFigureJump = other.carouselFigureJump;
		}
		this.shopId = other.shopId;
		if (other.isSetFaceImg()) {
			this.faceImg = other.faceImg;
		}
		if (other.isSetPlateId()) {
			this.plateId = other.plateId;
		}
		this.modularId = other.modularId;
		if (other.isSetLeastBacLimit()) {
			this.leastBacLimit = other.leastBacLimit;
		}
		if (other.isSetGoodsName()) {
			this.goodsName = other.goodsName;
		}
		if (other.isSetUsersId()) {
			this.usersId = other.usersId;
		}
	}

	public IndexEntity deepCopy() {
		return new IndexEntity(this);
	}

	@Override
	public void clear() {
		setIdIsSet(false);
		this.id = 0;
		setGoodsIdIsSet(false);
		this.goodsId = 0;
		setModuletypeIsSet(false);
		this.moduletype = 0;
		this.newPrice = null;
		this.oldPrice = null;
		this.carouselFigureUrl = null;
		this.carouselFigureJump = null;
		setShopIdIsSet(false);
		this.shopId = 0;
		this.faceImg = null;
		this.plateId = null;
		setModularIdIsSet(false);
		this.modularId = 0;
		this.leastBacLimit = null;
		this.goodsName = null;
		this.usersId = null;
	}

	public int getId() {
		return this.id;
	}

	public IndexEntity setId(int id) {
		this.id = id;
		setIdIsSet(true);
		return this;
	}

	public void unsetId() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
	}

	/**
	 * Returns true if field id is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetId() {
		return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
	}

	public void setIdIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
	}

	public int getGoodsId() {
		return this.goodsId;
	}

	public IndexEntity setGoodsId(int goodsId) {
		this.goodsId = goodsId;
		setGoodsIdIsSet(true);
		return this;
	}

	public void unsetGoodsId() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GOODSID_ISSET_ID);
	}

	/**
	 * Returns true if field goodsId is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetGoodsId() {
		return EncodingUtils.testBit(__isset_bitfield, __GOODSID_ISSET_ID);
	}

	public void setGoodsIdIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GOODSID_ISSET_ID, value);
	}

	public int getModuletype() {
		return this.moduletype;
	}

	public IndexEntity setModuletype(int moduletype) {
		this.moduletype = moduletype;
		setModuletypeIsSet(true);
		return this;
	}

	public void unsetModuletype() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MODULETYPE_ISSET_ID);
	}

	/**
	 * Returns true if field moduletype is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetModuletype() {
		return EncodingUtils.testBit(__isset_bitfield, __MODULETYPE_ISSET_ID);
	}

	public void setModuletypeIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MODULETYPE_ISSET_ID, value);
	}

	public String getNewPrice() {
		return this.newPrice;
	}

	public IndexEntity setNewPrice(String newPrice) {
		this.newPrice = newPrice;
		return this;
	}

	public void unsetNewPrice() {
		this.newPrice = null;
	}

	/**
	 * Returns true if field newPrice is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetNewPrice() {
		return this.newPrice != null;
	}

	public void setNewPriceIsSet(boolean value) {
		if (!value) {
			this.newPrice = null;
		}
	}

	public String getOldPrice() {
		return this.oldPrice;
	}

	public IndexEntity setOldPrice(String oldPrice) {
		this.oldPrice = oldPrice;
		return this;
	}

	public void unsetOldPrice() {
		this.oldPrice = null;
	}

	/**
	 * Returns true if field oldPrice is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetOldPrice() {
		return this.oldPrice != null;
	}

	public void setOldPriceIsSet(boolean value) {
		if (!value) {
			this.oldPrice = null;
		}
	}

	public String getCarouselFigureUrl() {
		return this.carouselFigureUrl;
	}

	public IndexEntity setCarouselFigureUrl(String carouselFigureUrl) {
		this.carouselFigureUrl = carouselFigureUrl;
		return this;
	}

	public void unsetCarouselFigureUrl() {
		this.carouselFigureUrl = null;
	}

	/**
	 * Returns true if field carouselFigureUrl is set (has been assigned a
	 * value) and false otherwise
	 */
	public boolean isSetCarouselFigureUrl() {
		return this.carouselFigureUrl != null;
	}

	public void setCarouselFigureUrlIsSet(boolean value) {
		if (!value) {
			this.carouselFigureUrl = null;
		}
	}

	public String getCarouselFigureJump() {
		return this.carouselFigureJump;
	}

	public IndexEntity setCarouselFigureJump(String carouselFigureJump) {
		this.carouselFigureJump = carouselFigureJump;
		return this;
	}

	public void unsetCarouselFigureJump() {
		this.carouselFigureJump = null;
	}

	/**
	 * Returns true if field carouselFigureJump is set (has been assigned a
	 * value) and false otherwise
	 */
	public boolean isSetCarouselFigureJump() {
		return this.carouselFigureJump != null;
	}

	public void setCarouselFigureJumpIsSet(boolean value) {
		if (!value) {
			this.carouselFigureJump = null;
		}
	}

	public int getShopId() {
		return this.shopId;
	}

	public IndexEntity setShopId(int shopId) {
		this.shopId = shopId;
		setShopIdIsSet(true);
		return this;
	}

	public void unsetShopId() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOPID_ISSET_ID);
	}

	/**
	 * Returns true if field shopId is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetShopId() {
		return EncodingUtils.testBit(__isset_bitfield, __SHOPID_ISSET_ID);
	}

	public void setShopIdIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOPID_ISSET_ID, value);
	}

	public String getFaceImg() {
		return this.faceImg;
	}

	public IndexEntity setFaceImg(String faceImg) {
		this.faceImg = faceImg;
		return this;
	}

	public void unsetFaceImg() {
		this.faceImg = null;
	}

	/**
	 * Returns true if field faceImg is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetFaceImg() {
		return this.faceImg != null;
	}

	public void setFaceImgIsSet(boolean value) {
		if (!value) {
			this.faceImg = null;
		}
	}

	public String getPlateId() {
		return this.plateId;
	}

	public IndexEntity setPlateId(String plateId) {
		this.plateId = plateId;
		return this;
	}

	public void unsetPlateId() {
		this.plateId = null;
	}

	/**
	 * Returns true if field plateId is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetPlateId() {
		return this.plateId != null;
	}

	public void setPlateIdIsSet(boolean value) {
		if (!value) {
			this.plateId = null;
		}
	}

	public int getModularId() {
		return this.modularId;
	}

	public IndexEntity setModularId(int modularId) {
		this.modularId = modularId;
		setModularIdIsSet(true);
		return this;
	}

	public void unsetModularId() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MODULARID_ISSET_ID);
	}

	/**
	 * Returns true if field modularId is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetModularId() {
		return EncodingUtils.testBit(__isset_bitfield, __MODULARID_ISSET_ID);
	}

	public void setModularIdIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MODULARID_ISSET_ID, value);
	}

	public String getLeastBacLimit() {
		return this.leastBacLimit;
	}

	public IndexEntity setLeastBacLimit(String leastBacLimit) {
		this.leastBacLimit = leastBacLimit;
		return this;
	}

	public void unsetLeastBacLimit() {
		this.leastBacLimit = null;
	}

	/**
	 * Returns true if field leastBacLimit is set (has been assigned a value)
	 * and false otherwise
	 */
	public boolean isSetLeastBacLimit() {
		return this.leastBacLimit != null;
	}

	public void setLeastBacLimitIsSet(boolean value) {
		if (!value) {
			this.leastBacLimit = null;
		}
	}

	public String getGoodsName() {
		return this.goodsName;
	}

	public IndexEntity setGoodsName(String goodsName) {
		this.goodsName = goodsName;
		return this;
	}

	public void unsetGoodsName() {
		this.goodsName = null;
	}

	/**
	 * Returns true if field goodsName is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetGoodsName() {
		return this.goodsName != null;
	}

	public void setGoodsNameIsSet(boolean value) {
		if (!value) {
			this.goodsName = null;
		}
	}

	public String getUsersId() {
		return this.usersId;
	}

	public IndexEntity setUsersId(String usersId) {
		this.usersId = usersId;
		return this;
	}

	public void unsetUsersId() {
		this.usersId = null;
	}

	/**
	 * Returns true if field usersId is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetUsersId() {
		return this.usersId != null;
	}

	public void setUsersIdIsSet(boolean value) {
		if (!value) {
			this.usersId = null;
		}
	}

	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
		case ID:
			if (value == null) {
				unsetId();
			} else {
				setId((Integer) value);
			}
			break;

		case GOODS_ID:
			if (value == null) {
				unsetGoodsId();
			} else {
				setGoodsId((Integer) value);
			}
			break;

		case MODULETYPE:
			if (value == null) {
				unsetModuletype();
			} else {
				setModuletype((Integer) value);
			}
			break;

		case NEW_PRICE:
			if (value == null) {
				unsetNewPrice();
			} else {
				setNewPrice((String) value);
			}
			break;

		case OLD_PRICE:
			if (value == null) {
				unsetOldPrice();
			} else {
				setOldPrice((String) value);
			}
			break;

		case CAROUSEL_FIGURE_URL:
			if (value == null) {
				unsetCarouselFigureUrl();
			} else {
				setCarouselFigureUrl((String) value);
			}
			break;

		case CAROUSEL_FIGURE_JUMP:
			if (value == null) {
				unsetCarouselFigureJump();
			} else {
				setCarouselFigureJump((String) value);
			}
			break;

		case SHOP_ID:
			if (value == null) {
				unsetShopId();
			} else {
				setShopId((Integer) value);
			}
			break;

		case FACE_IMG:
			if (value == null) {
				unsetFaceImg();
			} else {
				setFaceImg((String) value);
			}
			break;

		case PLATE_ID:
			if (value == null) {
				unsetPlateId();
			} else {
				setPlateId((String) value);
			}
			break;

		case MODULAR_ID:
			if (value == null) {
				unsetModularId();
			} else {
				setModularId((Integer) value);
			}
			break;

		case LEAST_BAC_LIMIT:
			if (value == null) {
				unsetLeastBacLimit();
			} else {
				setLeastBacLimit((String) value);
			}
			break;

		case GOODS_NAME:
			if (value == null) {
				unsetGoodsName();
			} else {
				setGoodsName((String) value);
			}
			break;

		case USERS_ID:
			if (value == null) {
				unsetUsersId();
			} else {
				setUsersId((String) value);
			}
			break;

		}
	}

	public Object getFieldValue(_Fields field) {
		switch (field) {
		case ID:
			return getId();

		case GOODS_ID:
			return getGoodsId();

		case MODULETYPE:
			return getModuletype();

		case NEW_PRICE:
			return getNewPrice();

		case OLD_PRICE:
			return getOldPrice();

		case CAROUSEL_FIGURE_URL:
			return getCarouselFigureUrl();

		case CAROUSEL_FIGURE_JUMP:
			return getCarouselFigureJump();

		case SHOP_ID:
			return getShopId();

		case FACE_IMG:
			return getFaceImg();

		case PLATE_ID:
			return getPlateId();

		case MODULAR_ID:
			return getModularId();

		case LEAST_BAC_LIMIT:
			return getLeastBacLimit();

		case GOODS_NAME:
			return getGoodsName();

		case USERS_ID:
			return getUsersId();

		}
		throw new IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned
	 * a value) and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
		}

		switch (field) {
		case ID:
			return isSetId();
		case GOODS_ID:
			return isSetGoodsId();
		case MODULETYPE:
			return isSetModuletype();
		case NEW_PRICE:
			return isSetNewPrice();
		case OLD_PRICE:
			return isSetOldPrice();
		case CAROUSEL_FIGURE_URL:
			return isSetCarouselFigureUrl();
		case CAROUSEL_FIGURE_JUMP:
			return isSetCarouselFigureJump();
		case SHOP_ID:
			return isSetShopId();
		case FACE_IMG:
			return isSetFaceImg();
		case PLATE_ID:
			return isSetPlateId();
		case MODULAR_ID:
			return isSetModularId();
		case LEAST_BAC_LIMIT:
			return isSetLeastBacLimit();
		case GOODS_NAME:
			return isSetGoodsName();
		case USERS_ID:
			return isSetUsersId();
		}
		throw new IllegalStateException();
	}

	@Override
	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (that instanceof IndexEntity)
			return this.equals((IndexEntity) that);
		return false;
	}

	public boolean equals(IndexEntity that) {
		if (that == null)
			return false;

		boolean this_present_id = true;
		boolean that_present_id = true;
		if (this_present_id || that_present_id) {
			if (!(this_present_id && that_present_id))
				return false;
			if (this.id != that.id)
				return false;
		}

		boolean this_present_goodsId = true;
		boolean that_present_goodsId = true;
		if (this_present_goodsId || that_present_goodsId) {
			if (!(this_present_goodsId && that_present_goodsId))
				return false;
			if (this.goodsId != that.goodsId)
				return false;
		}

		boolean this_present_moduletype = true;
		boolean that_present_moduletype = true;
		if (this_present_moduletype || that_present_moduletype) {
			if (!(this_present_moduletype && that_present_moduletype))
				return false;
			if (this.moduletype != that.moduletype)
				return false;
		}

		boolean this_present_newPrice = true && this.isSetNewPrice();
		boolean that_present_newPrice = true && that.isSetNewPrice();
		if (this_present_newPrice || that_present_newPrice) {
			if (!(this_present_newPrice && that_present_newPrice))
				return false;
			if (!this.newPrice.equals(that.newPrice))
				return false;
		}

		boolean this_present_oldPrice = true && this.isSetOldPrice();
		boolean that_present_oldPrice = true && that.isSetOldPrice();
		if (this_present_oldPrice || that_present_oldPrice) {
			if (!(this_present_oldPrice && that_present_oldPrice))
				return false;
			if (!this.oldPrice.equals(that.oldPrice))
				return false;
		}

		boolean this_present_carouselFigureUrl = true && this.isSetCarouselFigureUrl();
		boolean that_present_carouselFigureUrl = true && that.isSetCarouselFigureUrl();
		if (this_present_carouselFigureUrl || that_present_carouselFigureUrl) {
			if (!(this_present_carouselFigureUrl && that_present_carouselFigureUrl))
				return false;
			if (!this.carouselFigureUrl.equals(that.carouselFigureUrl))
				return false;
		}

		boolean this_present_carouselFigureJump = true && this.isSetCarouselFigureJump();
		boolean that_present_carouselFigureJump = true && that.isSetCarouselFigureJump();
		if (this_present_carouselFigureJump || that_present_carouselFigureJump) {
			if (!(this_present_carouselFigureJump && that_present_carouselFigureJump))
				return false;
			if (!this.carouselFigureJump.equals(that.carouselFigureJump))
				return false;
		}

		boolean this_present_shopId = true;
		boolean that_present_shopId = true;
		if (this_present_shopId || that_present_shopId) {
			if (!(this_present_shopId && that_present_shopId))
				return false;
			if (this.shopId != that.shopId)
				return false;
		}

		boolean this_present_faceImg = true && this.isSetFaceImg();
		boolean that_present_faceImg = true && that.isSetFaceImg();
		if (this_present_faceImg || that_present_faceImg) {
			if (!(this_present_faceImg && that_present_faceImg))
				return false;
			if (!this.faceImg.equals(that.faceImg))
				return false;
		}

		boolean this_present_plateId = true && this.isSetPlateId();
		boolean that_present_plateId = true && that.isSetPlateId();
		if (this_present_plateId || that_present_plateId) {
			if (!(this_present_plateId && that_present_plateId))
				return false;
			if (!this.plateId.equals(that.plateId))
				return false;
		}

		boolean this_present_modularId = true;
		boolean that_present_modularId = true;
		if (this_present_modularId || that_present_modularId) {
			if (!(this_present_modularId && that_present_modularId))
				return false;
			if (this.modularId != that.modularId)
				return false;
		}

		boolean this_present_leastBacLimit = true && this.isSetLeastBacLimit();
		boolean that_present_leastBacLimit = true && that.isSetLeastBacLimit();
		if (this_present_leastBacLimit || that_present_leastBacLimit) {
			if (!(this_present_leastBacLimit && that_present_leastBacLimit))
				return false;
			if (!this.leastBacLimit.equals(that.leastBacLimit))
				return false;
		}

		boolean this_present_goodsName = true && this.isSetGoodsName();
		boolean that_present_goodsName = true && that.isSetGoodsName();
		if (this_present_goodsName || that_present_goodsName) {
			if (!(this_present_goodsName && that_present_goodsName))
				return false;
			if (!this.goodsName.equals(that.goodsName))
				return false;
		}

		boolean this_present_usersId = true && this.isSetUsersId();
		boolean that_present_usersId = true && that.isSetUsersId();
		if (this_present_usersId || that_present_usersId) {
			if (!(this_present_usersId && that_present_usersId))
				return false;
			if (!this.usersId.equals(that.usersId))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		List<Object> list = new ArrayList<Object>();

		boolean present_id = true;
		list.add(present_id);
		if (present_id)
			list.add(id);

		boolean present_goodsId = true;
		list.add(present_goodsId);
		if (present_goodsId)
			list.add(goodsId);

		boolean present_moduletype = true;
		list.add(present_moduletype);
		if (present_moduletype)
			list.add(moduletype);

		boolean present_newPrice = true && (isSetNewPrice());
		list.add(present_newPrice);
		if (present_newPrice)
			list.add(newPrice);

		boolean present_oldPrice = true && (isSetOldPrice());
		list.add(present_oldPrice);
		if (present_oldPrice)
			list.add(oldPrice);

		boolean present_carouselFigureUrl = true && (isSetCarouselFigureUrl());
		list.add(present_carouselFigureUrl);
		if (present_carouselFigureUrl)
			list.add(carouselFigureUrl);

		boolean present_carouselFigureJump = true && (isSetCarouselFigureJump());
		list.add(present_carouselFigureJump);
		if (present_carouselFigureJump)
			list.add(carouselFigureJump);

		boolean present_shopId = true;
		list.add(present_shopId);
		if (present_shopId)
			list.add(shopId);

		boolean present_faceImg = true && (isSetFaceImg());
		list.add(present_faceImg);
		if (present_faceImg)
			list.add(faceImg);

		boolean present_plateId = true && (isSetPlateId());
		list.add(present_plateId);
		if (present_plateId)
			list.add(plateId);

		boolean present_modularId = true;
		list.add(present_modularId);
		if (present_modularId)
			list.add(modularId);

		boolean present_leastBacLimit = true && (isSetLeastBacLimit());
		list.add(present_leastBacLimit);
		if (present_leastBacLimit)
			list.add(leastBacLimit);

		boolean present_goodsName = true && (isSetGoodsName());
		list.add(present_goodsName);
		if (present_goodsName)
			list.add(goodsName);

		boolean present_usersId = true && (isSetUsersId());
		list.add(present_usersId);
		if (present_usersId)
			list.add(usersId);

		return list.hashCode();
	}

	@Override
	public int compareTo(IndexEntity other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetId()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetGoodsId()).compareTo(other.isSetGoodsId());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetGoodsId()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.goodsId, other.goodsId);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetModuletype()).compareTo(other.isSetModuletype());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetModuletype()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.moduletype, other.moduletype);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetNewPrice()).compareTo(other.isSetNewPrice());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetNewPrice()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newPrice, other.newPrice);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetOldPrice()).compareTo(other.isSetOldPrice());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetOldPrice()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldPrice, other.oldPrice);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetCarouselFigureUrl()).compareTo(other.isSetCarouselFigureUrl());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCarouselFigureUrl()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.carouselFigureUrl, other.carouselFigureUrl);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetCarouselFigureJump()).compareTo(other.isSetCarouselFigureJump());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCarouselFigureJump()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.carouselFigureJump, other.carouselFigureJump);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetShopId()).compareTo(other.isSetShopId());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetShopId()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shopId, other.shopId);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetFaceImg()).compareTo(other.isSetFaceImg());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetFaceImg()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.faceImg, other.faceImg);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetPlateId()).compareTo(other.isSetPlateId());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPlateId()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plateId, other.plateId);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetModularId()).compareTo(other.isSetModularId());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetModularId()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modularId, other.modularId);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetLeastBacLimit()).compareTo(other.isSetLeastBacLimit());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetLeastBacLimit()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.leastBacLimit, other.leastBacLimit);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetGoodsName()).compareTo(other.isSetGoodsName());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetGoodsName()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.goodsName, other.goodsName);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetUsersId()).compareTo(other.isSetUsersId());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUsersId()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.usersId, other.usersId);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("IndexEntity(");
		boolean first = true;

		sb.append("id:");
		sb.append(this.id);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("goodsId:");
		sb.append(this.goodsId);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("moduletype:");
		sb.append(this.moduletype);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("newPrice:");
		if (this.newPrice == null) {
			sb.append("null");
		} else {
			sb.append(this.newPrice);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("oldPrice:");
		if (this.oldPrice == null) {
			sb.append("null");
		} else {
			sb.append(this.oldPrice);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("carouselFigureUrl:");
		if (this.carouselFigureUrl == null) {
			sb.append("null");
		} else {
			sb.append(this.carouselFigureUrl);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("carouselFigureJump:");
		if (this.carouselFigureJump == null) {
			sb.append("null");
		} else {
			sb.append(this.carouselFigureJump);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("shopId:");
		sb.append(this.shopId);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("faceImg:");
		if (this.faceImg == null) {
			sb.append("null");
		} else {
			sb.append(this.faceImg);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("plateId:");
		if (this.plateId == null) {
			sb.append("null");
		} else {
			sb.append(this.plateId);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("modularId:");
		sb.append(this.modularId);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("leastBacLimit:");
		if (this.leastBacLimit == null) {
			sb.append("null");
		} else {
			sb.append(this.leastBacLimit);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("goodsName:");
		if (this.goodsName == null) {
			sb.append("null");
		} else {
			sb.append(this.goodsName);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("usersId:");
		if (this.usersId == null) {
			sb.append("null");
		} else {
			sb.append(this.usersId);
		}
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java
			// serialization is wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class IndexEntityStandardSchemeFactory implements SchemeFactory {
		public IndexEntityStandardScheme getScheme() {
			return new IndexEntityStandardScheme();
		}
	}

	private static class IndexEntityStandardScheme extends StandardScheme<IndexEntity> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, IndexEntity struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // ID
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.id = iprot.readI32();
						struct.setIdIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // GOODS_ID
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.goodsId = iprot.readI32();
						struct.setGoodsIdIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // MODULETYPE
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.moduletype = iprot.readI32();
						struct.setModuletypeIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 4: // NEW_PRICE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.newPrice = iprot.readString();
						struct.setNewPriceIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 5: // OLD_PRICE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.oldPrice = iprot.readString();
						struct.setOldPriceIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 6: // CAROUSEL_FIGURE_URL
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.carouselFigureUrl = iprot.readString();
						struct.setCarouselFigureUrlIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 7: // CAROUSEL_FIGURE_JUMP
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.carouselFigureJump = iprot.readString();
						struct.setCarouselFigureJumpIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 8: // SHOP_ID
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.shopId = iprot.readI32();
						struct.setShopIdIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 9: // FACE_IMG
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.faceImg = iprot.readString();
						struct.setFaceImgIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 10: // PLATE_ID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.plateId = iprot.readString();
						struct.setPlateIdIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 11: // MODULAR_ID
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.modularId = iprot.readI32();
						struct.setModularIdIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 12: // LEAST_BAC_LIMIT
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.leastBacLimit = iprot.readString();
						struct.setLeastBacLimitIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 13: // GOODS_NAME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.goodsName = iprot.readString();
						struct.setGoodsNameIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 14: // USERS_ID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.usersId = iprot.readString();
						struct.setUsersIdIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be
			// checked in the validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, IndexEntity struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			oprot.writeFieldBegin(ID_FIELD_DESC);
			oprot.writeI32(struct.id);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(GOODS_ID_FIELD_DESC);
			oprot.writeI32(struct.goodsId);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(MODULETYPE_FIELD_DESC);
			oprot.writeI32(struct.moduletype);
			oprot.writeFieldEnd();
			if (struct.newPrice != null) {
				oprot.writeFieldBegin(NEW_PRICE_FIELD_DESC);
				oprot.writeString(struct.newPrice);
				oprot.writeFieldEnd();
			}
			if (struct.oldPrice != null) {
				oprot.writeFieldBegin(OLD_PRICE_FIELD_DESC);
				oprot.writeString(struct.oldPrice);
				oprot.writeFieldEnd();
			}
			if (struct.carouselFigureUrl != null) {
				oprot.writeFieldBegin(CAROUSEL_FIGURE_URL_FIELD_DESC);
				oprot.writeString(struct.carouselFigureUrl);
				oprot.writeFieldEnd();
			}
			if (struct.carouselFigureJump != null) {
				oprot.writeFieldBegin(CAROUSEL_FIGURE_JUMP_FIELD_DESC);
				oprot.writeString(struct.carouselFigureJump);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(SHOP_ID_FIELD_DESC);
			oprot.writeI32(struct.shopId);
			oprot.writeFieldEnd();
			if (struct.faceImg != null) {
				oprot.writeFieldBegin(FACE_IMG_FIELD_DESC);
				oprot.writeString(struct.faceImg);
				oprot.writeFieldEnd();
			}
			if (struct.plateId != null) {
				oprot.writeFieldBegin(PLATE_ID_FIELD_DESC);
				oprot.writeString(struct.plateId);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(MODULAR_ID_FIELD_DESC);
			oprot.writeI32(struct.modularId);
			oprot.writeFieldEnd();
			if (struct.leastBacLimit != null) {
				oprot.writeFieldBegin(LEAST_BAC_LIMIT_FIELD_DESC);
				oprot.writeString(struct.leastBacLimit);
				oprot.writeFieldEnd();
			}
			if (struct.goodsName != null) {
				oprot.writeFieldBegin(GOODS_NAME_FIELD_DESC);
				oprot.writeString(struct.goodsName);
				oprot.writeFieldEnd();
			}
			if (struct.usersId != null) {
				oprot.writeFieldBegin(USERS_ID_FIELD_DESC);
				oprot.writeString(struct.usersId);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class IndexEntityTupleSchemeFactory implements SchemeFactory {
		public IndexEntityTupleScheme getScheme() {
			return new IndexEntityTupleScheme();
		}
	}

	private static class IndexEntityTupleScheme extends TupleScheme<IndexEntity> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, IndexEntity struct)
				throws org.apache.thrift.TException {
			TTupleProtocol oprot = (TTupleProtocol) prot;
			BitSet optionals = new BitSet();
			if (struct.isSetId()) {
				optionals.set(0);
			}
			if (struct.isSetGoodsId()) {
				optionals.set(1);
			}
			if (struct.isSetModuletype()) {
				optionals.set(2);
			}
			if (struct.isSetNewPrice()) {
				optionals.set(3);
			}
			if (struct.isSetOldPrice()) {
				optionals.set(4);
			}
			if (struct.isSetCarouselFigureUrl()) {
				optionals.set(5);
			}
			if (struct.isSetCarouselFigureJump()) {
				optionals.set(6);
			}
			if (struct.isSetShopId()) {
				optionals.set(7);
			}
			if (struct.isSetFaceImg()) {
				optionals.set(8);
			}
			if (struct.isSetPlateId()) {
				optionals.set(9);
			}
			if (struct.isSetModularId()) {
				optionals.set(10);
			}
			if (struct.isSetLeastBacLimit()) {
				optionals.set(11);
			}
			if (struct.isSetGoodsName()) {
				optionals.set(12);
			}
			if (struct.isSetUsersId()) {
				optionals.set(13);
			}
			oprot.writeBitSet(optionals, 14);
			if (struct.isSetId()) {
				oprot.writeI32(struct.id);
			}
			if (struct.isSetGoodsId()) {
				oprot.writeI32(struct.goodsId);
			}
			if (struct.isSetModuletype()) {
				oprot.writeI32(struct.moduletype);
			}
			if (struct.isSetNewPrice()) {
				oprot.writeString(struct.newPrice);
			}
			if (struct.isSetOldPrice()) {
				oprot.writeString(struct.oldPrice);
			}
			if (struct.isSetCarouselFigureUrl()) {
				oprot.writeString(struct.carouselFigureUrl);
			}
			if (struct.isSetCarouselFigureJump()) {
				oprot.writeString(struct.carouselFigureJump);
			}
			if (struct.isSetShopId()) {
				oprot.writeI32(struct.shopId);
			}
			if (struct.isSetFaceImg()) {
				oprot.writeString(struct.faceImg);
			}
			if (struct.isSetPlateId()) {
				oprot.writeString(struct.plateId);
			}
			if (struct.isSetModularId()) {
				oprot.writeI32(struct.modularId);
			}
			if (struct.isSetLeastBacLimit()) {
				oprot.writeString(struct.leastBacLimit);
			}
			if (struct.isSetGoodsName()) {
				oprot.writeString(struct.goodsName);
			}
			if (struct.isSetUsersId()) {
				oprot.writeString(struct.usersId);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, IndexEntity struct)
				throws org.apache.thrift.TException {
			TTupleProtocol iprot = (TTupleProtocol) prot;
			BitSet incoming = iprot.readBitSet(14);
			if (incoming.get(0)) {
				struct.id = iprot.readI32();
				struct.setIdIsSet(true);
			}
			if (incoming.get(1)) {
				struct.goodsId = iprot.readI32();
				struct.setGoodsIdIsSet(true);
			}
			if (incoming.get(2)) {
				struct.moduletype = iprot.readI32();
				struct.setModuletypeIsSet(true);
			}
			if (incoming.get(3)) {
				struct.newPrice = iprot.readString();
				struct.setNewPriceIsSet(true);
			}
			if (incoming.get(4)) {
				struct.oldPrice = iprot.readString();
				struct.setOldPriceIsSet(true);
			}
			if (incoming.get(5)) {
				struct.carouselFigureUrl = iprot.readString();
				struct.setCarouselFigureUrlIsSet(true);
			}
			if (incoming.get(6)) {
				struct.carouselFigureJump = iprot.readString();
				struct.setCarouselFigureJumpIsSet(true);
			}
			if (incoming.get(7)) {
				struct.shopId = iprot.readI32();
				struct.setShopIdIsSet(true);
			}
			if (incoming.get(8)) {
				struct.faceImg = iprot.readString();
				struct.setFaceImgIsSet(true);
			}
			if (incoming.get(9)) {
				struct.plateId = iprot.readString();
				struct.setPlateIdIsSet(true);
			}
			if (incoming.get(10)) {
				struct.modularId = iprot.readI32();
				struct.setModularIdIsSet(true);
			}
			if (incoming.get(11)) {
				struct.leastBacLimit = iprot.readString();
				struct.setLeastBacLimitIsSet(true);
			}
			if (incoming.get(12)) {
				struct.goodsName = iprot.readString();
				struct.setGoodsNameIsSet(true);
			}
			if (incoming.get(13)) {
				struct.usersId = iprot.readString();
				struct.setUsersIdIsSet(true);
			}
		}
	}

}

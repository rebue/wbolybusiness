package com.wboly.rpc.entity;

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Generated;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

@SuppressWarnings({"rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-11-08")
public class MyOrderNoEntity implements org.apache.thrift.TBase<MyOrderNoEntity, MyOrderNoEntity._Fields>, java.io.Serializable, Cloneable, Comparable<MyOrderNoEntity> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MyOrderNoEntity");

  private static final org.apache.thrift.protocol.TField GOODS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("goodsId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SHOP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("shopId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField BUYER_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("buyerUid", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField SUPPLIER_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("supplierUid", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("num", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("money", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField DATELINE_FIELD_DESC = new org.apache.thrift.protocol.TField("dateline", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField ADDRESS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("addressId", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField CANCEL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("cancelType", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField PAY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("payType", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField USERS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("usersId", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField RETAIL_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("retailPrice", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField GOODS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("goodsName", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField FINISH_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("finishDate", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField IMG_FIELD_DESC = new org.apache.thrift.protocol.TField("img", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField MY_ORDER_NO_ENTITY_LISTS_FIELD_DESC = new org.apache.thrift.protocol.TField("myOrderNoEntityLists", org.apache.thrift.protocol.TType.LIST, (short)20);
  private static final org.apache.thrift.protocol.TField TOAL_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("toalMoney", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField PAGE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNo", org.apache.thrift.protocol.TType.I32, (short)22);
  private static final org.apache.thrift.protocol.TField TOTAL_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("totalCount", org.apache.thrift.protocol.TType.I32, (short)23);
  private static final org.apache.thrift.protocol.TField SUMRETAIL_BAC_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("sumretailBacLimit", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField REBATES_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("rebatesDate", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField RETAIL_BAC_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("retailBacLimit", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField SKU_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("skuId", org.apache.thrift.protocol.TType.STRING, (short)27);
  private static final org.apache.thrift.protocol.TField BARCODE_FIELD_DESC = new org.apache.thrift.protocol.TField("barcode", org.apache.thrift.protocol.TType.STRING, (short)28);
  private static final org.apache.thrift.protocol.TField APPRAISE_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("appraiseState", org.apache.thrift.protocol.TType.STRING, (short)29);
  private static final org.apache.thrift.protocol.TField AFTERSALE_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("aftersaleState", org.apache.thrift.protocol.TType.STRING, (short)30);
  private static final org.apache.thrift.protocol.TField RETURN_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("returnState", org.apache.thrift.protocol.TType.STRING, (short)31);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MyOrderNoEntityStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MyOrderNoEntityTupleSchemeFactory());
  }

  public String goodsId; // required
  public String orderId; // required
  public String shopId; // required
  public String buyerUid; // required
  public String supplierUid; // required
  public String num; // required
  public String money; // required
  public String state; // required
  public String code; // required
  public String message; // required
  public String dateline; // required
  public String addressId; // required
  public String cancelType; // required
  public String payType; // required
  public String usersId; // required
  public String retailPrice; // required
  public String goodsName; // required
  public String finishDate; // required
  public String img; // required
  public List<MyOrderNoEntity> myOrderNoEntityLists=new ArrayList<>(); // required
  public String toalMoney; // required
  public int pageNo; // required
  public int totalCount; // required
  public String sumretailBacLimit; // required
  public String rebatesDate; // required
  public String retailBacLimit; // required
  public String skuId; // required
  public String barcode; // required
  public String appraiseState; // required
  public String aftersaleState; // required
  public String returnState; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    GOODS_ID((short)1, "goodsId"),
    ORDER_ID((short)2, "orderId"),
    SHOP_ID((short)3, "shopId"),
    BUYER_UID((short)4, "buyerUid"),
    SUPPLIER_UID((short)5, "supplierUid"),
    NUM((short)6, "num"),
    MONEY((short)7, "money"),
    STATE((short)8, "state"),
    CODE((short)9, "code"),
    MESSAGE((short)10, "message"),
    DATELINE((short)11, "dateline"),
    ADDRESS_ID((short)12, "addressId"),
    CANCEL_TYPE((short)13, "cancelType"),
    PAY_TYPE((short)14, "payType"),
    USERS_ID((short)15, "usersId"),
    RETAIL_PRICE((short)16, "retailPrice"),
    GOODS_NAME((short)17, "goodsName"),
    FINISH_DATE((short)18, "finishDate"),
    IMG((short)19, "img"),
    MY_ORDER_NO_ENTITY_LISTS((short)20, "myOrderNoEntityLists"),
    TOAL_MONEY((short)21, "toalMoney"),
    PAGE_NO((short)22, "pageNo"),
    TOTAL_COUNT((short)23, "totalCount"),
    SUMRETAIL_BAC_LIMIT((short)24, "sumretailBacLimit"),
    REBATES_DATE((short)25, "rebatesDate"),
    RETAIL_BAC_LIMIT((short)26, "retailBacLimit"),
    SKU_ID((short)27, "skuId"),
    BARCODE((short)28, "barcode"),
    APPRAISE_STATE((short)29, "appraiseState"),
    AFTERSALE_STATE((short)30, "aftersaleState"),
    RETURN_STATE((short)31, "returnState");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // GOODS_ID
          return GOODS_ID;
        case 2: // ORDER_ID
          return ORDER_ID;
        case 3: // SHOP_ID
          return SHOP_ID;
        case 4: // BUYER_UID
          return BUYER_UID;
        case 5: // SUPPLIER_UID
          return SUPPLIER_UID;
        case 6: // NUM
          return NUM;
        case 7: // MONEY
          return MONEY;
        case 8: // STATE
          return STATE;
        case 9: // CODE
          return CODE;
        case 10: // MESSAGE
          return MESSAGE;
        case 11: // DATELINE
          return DATELINE;
        case 12: // ADDRESS_ID
          return ADDRESS_ID;
        case 13: // CANCEL_TYPE
          return CANCEL_TYPE;
        case 14: // PAY_TYPE
          return PAY_TYPE;
        case 15: // USERS_ID
          return USERS_ID;
        case 16: // RETAIL_PRICE
          return RETAIL_PRICE;
        case 17: // GOODS_NAME
          return GOODS_NAME;
        case 18: // FINISH_DATE
          return FINISH_DATE;
        case 19: // IMG
          return IMG;
        case 20: // MY_ORDER_NO_ENTITY_LISTS
          return MY_ORDER_NO_ENTITY_LISTS;
        case 21: // TOAL_MONEY
          return TOAL_MONEY;
        case 22: // PAGE_NO
          return PAGE_NO;
        case 23: // TOTAL_COUNT
          return TOTAL_COUNT;
        case 24: // SUMRETAIL_BAC_LIMIT
          return SUMRETAIL_BAC_LIMIT;
        case 25: // REBATES_DATE
          return REBATES_DATE;
        case 26: // RETAIL_BAC_LIMIT
          return RETAIL_BAC_LIMIT;
        case 27: // SKU_ID
          return SKU_ID;
        case 28: // BARCODE
          return BARCODE;
        case 29: // APPRAISE_STATE
          return APPRAISE_STATE;
        case 30: // AFTERSALE_STATE
          return AFTERSALE_STATE;
        case 31: // RETURN_STATE
          return RETURN_STATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PAGENO_ISSET_ID = 0;
  private static final int __TOTALCOUNT_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GOODS_ID, new org.apache.thrift.meta_data.FieldMetaData("goodsId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHOP_ID, new org.apache.thrift.meta_data.FieldMetaData("shopId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUYER_UID, new org.apache.thrift.meta_data.FieldMetaData("buyerUid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUPPLIER_UID, new org.apache.thrift.meta_data.FieldMetaData("supplierUid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NUM, new org.apache.thrift.meta_data.FieldMetaData("num", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MONEY, new org.apache.thrift.meta_data.FieldMetaData("money", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATELINE, new org.apache.thrift.meta_data.FieldMetaData("dateline", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADDRESS_ID, new org.apache.thrift.meta_data.FieldMetaData("addressId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CANCEL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("cancelType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("payType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USERS_ID, new org.apache.thrift.meta_data.FieldMetaData("usersId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RETAIL_PRICE, new org.apache.thrift.meta_data.FieldMetaData("retailPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GOODS_NAME, new org.apache.thrift.meta_data.FieldMetaData("goodsName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FINISH_DATE, new org.apache.thrift.meta_data.FieldMetaData("finishDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMG, new org.apache.thrift.meta_data.FieldMetaData("img", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MY_ORDER_NO_ENTITY_LISTS, new org.apache.thrift.meta_data.FieldMetaData("myOrderNoEntityLists", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "MyOrderNoEntity"))));
    tmpMap.put(_Fields.TOAL_MONEY, new org.apache.thrift.meta_data.FieldMetaData("toalMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAGE_NO, new org.apache.thrift.meta_data.FieldMetaData("pageNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_COUNT, new org.apache.thrift.meta_data.FieldMetaData("totalCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SUMRETAIL_BAC_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("sumretailBacLimit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REBATES_DATE, new org.apache.thrift.meta_data.FieldMetaData("rebatesDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RETAIL_BAC_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("retailBacLimit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SKU_ID, new org.apache.thrift.meta_data.FieldMetaData("skuId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BARCODE, new org.apache.thrift.meta_data.FieldMetaData("barcode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APPRAISE_STATE, new org.apache.thrift.meta_data.FieldMetaData("appraiseState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AFTERSALE_STATE, new org.apache.thrift.meta_data.FieldMetaData("aftersaleState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RETURN_STATE, new org.apache.thrift.meta_data.FieldMetaData("returnState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MyOrderNoEntity.class, metaDataMap);
  }

  public MyOrderNoEntity() {
  }

  public MyOrderNoEntity(
    String goodsId,
    String orderId,
    String shopId,
    String buyerUid,
    String supplierUid,
    String num,
    String money,
    String state,
    String code,
    String message,
    String dateline,
    String addressId,
    String cancelType,
    String payType,
    String usersId,
    String retailPrice,
    String goodsName,
    String finishDate,
    String img,
    List<MyOrderNoEntity> myOrderNoEntityLists,
    String toalMoney,
    int pageNo,
    int totalCount,
    String sumretailBacLimit,
    String rebatesDate,
    String retailBacLimit,
    String skuId,
    String barcode,
    String appraiseState,
    String aftersaleState,
    String returnState)
  {
    this();
    this.goodsId = goodsId;
    this.orderId = orderId;
    this.shopId = shopId;
    this.buyerUid = buyerUid;
    this.supplierUid = supplierUid;
    this.num = num;
    this.money = money;
    this.state = state;
    this.code = code;
    this.message = message;
    this.dateline = dateline;
    this.addressId = addressId;
    this.cancelType = cancelType;
    this.payType = payType;
    this.usersId = usersId;
    this.retailPrice = retailPrice;
    this.goodsName = goodsName;
    this.finishDate = finishDate;
    this.img = img;
    this.myOrderNoEntityLists = myOrderNoEntityLists;
    this.toalMoney = toalMoney;
    this.pageNo = pageNo;
    setPageNoIsSet(true);
    this.totalCount = totalCount;
    setTotalCountIsSet(true);
    this.sumretailBacLimit = sumretailBacLimit;
    this.rebatesDate = rebatesDate;
    this.retailBacLimit = retailBacLimit;
    this.skuId = skuId;
    this.barcode = barcode;
    this.appraiseState = appraiseState;
    this.aftersaleState = aftersaleState;
    this.returnState = returnState;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MyOrderNoEntity(MyOrderNoEntity other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetGoodsId()) {
      this.goodsId = other.goodsId;
    }
    if (other.isSetOrderId()) {
      this.orderId = other.orderId;
    }
    if (other.isSetShopId()) {
      this.shopId = other.shopId;
    }
    if (other.isSetBuyerUid()) {
      this.buyerUid = other.buyerUid;
    }
    if (other.isSetSupplierUid()) {
      this.supplierUid = other.supplierUid;
    }
    if (other.isSetNum()) {
      this.num = other.num;
    }
    if (other.isSetMoney()) {
      this.money = other.money;
    }
    if (other.isSetState()) {
      this.state = other.state;
    }
    if (other.isSetCode()) {
      this.code = other.code;
    }
    if (other.isSetMessage()) {
      this.message = other.message;
    }
    if (other.isSetDateline()) {
      this.dateline = other.dateline;
    }
    if (other.isSetAddressId()) {
      this.addressId = other.addressId;
    }
    if (other.isSetCancelType()) {
      this.cancelType = other.cancelType;
    }
    if (other.isSetPayType()) {
      this.payType = other.payType;
    }
    if (other.isSetUsersId()) {
      this.usersId = other.usersId;
    }
    if (other.isSetRetailPrice()) {
      this.retailPrice = other.retailPrice;
    }
    if (other.isSetGoodsName()) {
      this.goodsName = other.goodsName;
    }
    if (other.isSetFinishDate()) {
      this.finishDate = other.finishDate;
    }
    if (other.isSetImg()) {
      this.img = other.img;
    }
    if (other.isSetMyOrderNoEntityLists()) {
      List<MyOrderNoEntity> __this__myOrderNoEntityLists = new ArrayList<MyOrderNoEntity>(other.myOrderNoEntityLists.size());
      for (MyOrderNoEntity other_element : other.myOrderNoEntityLists) {
        __this__myOrderNoEntityLists.add(other_element);
      }
      this.myOrderNoEntityLists = __this__myOrderNoEntityLists;
    }
    if (other.isSetToalMoney()) {
      this.toalMoney = other.toalMoney;
    }
    this.pageNo = other.pageNo;
    this.totalCount = other.totalCount;
    if (other.isSetSumretailBacLimit()) {
      this.sumretailBacLimit = other.sumretailBacLimit;
    }
    if (other.isSetRebatesDate()) {
      this.rebatesDate = other.rebatesDate;
    }
    if (other.isSetRetailBacLimit()) {
      this.retailBacLimit = other.retailBacLimit;
    }
    if (other.isSetSkuId()) {
      this.skuId = other.skuId;
    }
    if (other.isSetBarcode()) {
      this.barcode = other.barcode;
    }
    if (other.isSetAppraiseState()) {
      this.appraiseState = other.appraiseState;
    }
    if (other.isSetAftersaleState()) {
      this.aftersaleState = other.aftersaleState;
    }
    if (other.isSetReturnState()) {
      this.returnState = other.returnState;
    }
  }

  public MyOrderNoEntity deepCopy() {
    return new MyOrderNoEntity(this);
  }

  @Override
  public void clear() {
    this.goodsId = null;
    this.orderId = null;
    this.shopId = null;
    this.buyerUid = null;
    this.supplierUid = null;
    this.num = null;
    this.money = null;
    this.state = null;
    this.code = null;
    this.message = null;
    this.dateline = null;
    this.addressId = null;
    this.cancelType = null;
    this.payType = null;
    this.usersId = null;
    this.retailPrice = null;
    this.goodsName = null;
    this.finishDate = null;
    this.img = null;
    this.myOrderNoEntityLists = null;
    this.toalMoney = null;
    setPageNoIsSet(false);
    this.pageNo = 0;
    setTotalCountIsSet(false);
    this.totalCount = 0;
    this.sumretailBacLimit = null;
    this.rebatesDate = null;
    this.retailBacLimit = null;
    this.skuId = null;
    this.barcode = null;
    this.appraiseState = null;
    this.aftersaleState = null;
    this.returnState = null;
  }

  public String getGoodsId() {
    return this.goodsId;
  }

  public MyOrderNoEntity setGoodsId(String goodsId) {
    this.goodsId = goodsId;
    return this;
  }

  public void unsetGoodsId() {
    this.goodsId = null;
  }

  /** Returns true if field goodsId is set (has been assigned a value) and false otherwise */
  public boolean isSetGoodsId() {
    return this.goodsId != null;
  }

  public void setGoodsIdIsSet(boolean value) {
    if (!value) {
      this.goodsId = null;
    }
  }

  public String getOrderId() {
    return this.orderId;
  }

  public MyOrderNoEntity setOrderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

  public void unsetOrderId() {
    this.orderId = null;
  }

  /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderId() {
    return this.orderId != null;
  }

  public void setOrderIdIsSet(boolean value) {
    if (!value) {
      this.orderId = null;
    }
  }

  public String getShopId() {
    return this.shopId;
  }

  public MyOrderNoEntity setShopId(String shopId) {
    this.shopId = shopId;
    return this;
  }

  public void unsetShopId() {
    this.shopId = null;
  }

  /** Returns true if field shopId is set (has been assigned a value) and false otherwise */
  public boolean isSetShopId() {
    return this.shopId != null;
  }

  public void setShopIdIsSet(boolean value) {
    if (!value) {
      this.shopId = null;
    }
  }

  public String getBuyerUid() {
    return this.buyerUid;
  }

  public MyOrderNoEntity setBuyerUid(String buyerUid) {
    this.buyerUid = buyerUid;
    return this;
  }

  public void unsetBuyerUid() {
    this.buyerUid = null;
  }

  /** Returns true if field buyerUid is set (has been assigned a value) and false otherwise */
  public boolean isSetBuyerUid() {
    return this.buyerUid != null;
  }

  public void setBuyerUidIsSet(boolean value) {
    if (!value) {
      this.buyerUid = null;
    }
  }

  public String getSupplierUid() {
    return this.supplierUid;
  }

  public MyOrderNoEntity setSupplierUid(String supplierUid) {
    this.supplierUid = supplierUid;
    return this;
  }

  public void unsetSupplierUid() {
    this.supplierUid = null;
  }

  /** Returns true if field supplierUid is set (has been assigned a value) and false otherwise */
  public boolean isSetSupplierUid() {
    return this.supplierUid != null;
  }

  public void setSupplierUidIsSet(boolean value) {
    if (!value) {
      this.supplierUid = null;
    }
  }

  public String getNum() {
    return this.num;
  }

  public MyOrderNoEntity setNum(String num) {
    this.num = num;
    return this;
  }

  public void unsetNum() {
    this.num = null;
  }

  /** Returns true if field num is set (has been assigned a value) and false otherwise */
  public boolean isSetNum() {
    return this.num != null;
  }

  public void setNumIsSet(boolean value) {
    if (!value) {
      this.num = null;
    }
  }

  public String getMoney() {
    return this.money;
  }

  public MyOrderNoEntity setMoney(String money) {
    this.money = money;
    return this;
  }

  public void unsetMoney() {
    this.money = null;
  }

  /** Returns true if field money is set (has been assigned a value) and false otherwise */
  public boolean isSetMoney() {
    return this.money != null;
  }

  public void setMoneyIsSet(boolean value) {
    if (!value) {
      this.money = null;
    }
  }

  public String getState() {
    return this.state;
  }

  public MyOrderNoEntity setState(String state) {
    this.state = state;
    return this;
  }

  public void unsetState() {
    this.state = null;
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return this.state != null;
  }

  public void setStateIsSet(boolean value) {
    if (!value) {
      this.state = null;
    }
  }

  public String getCode() {
    return this.code;
  }

  public MyOrderNoEntity setCode(String code) {
    this.code = code;
    return this;
  }

  public void unsetCode() {
    this.code = null;
  }

  /** Returns true if field code is set (has been assigned a value) and false otherwise */
  public boolean isSetCode() {
    return this.code != null;
  }

  public void setCodeIsSet(boolean value) {
    if (!value) {
      this.code = null;
    }
  }

  public String getMessage() {
    return this.message;
  }

  public MyOrderNoEntity setMessage(String message) {
    this.message = message;
    return this;
  }

  public void unsetMessage() {
    this.message = null;
  }

  /** Returns true if field message is set (has been assigned a value) and false otherwise */
  public boolean isSetMessage() {
    return this.message != null;
  }

  public void setMessageIsSet(boolean value) {
    if (!value) {
      this.message = null;
    }
  }

  public String getDateline() {
    return this.dateline;
  }

  public MyOrderNoEntity setDateline(String dateline) {
    this.dateline = dateline;
    return this;
  }

  public void unsetDateline() {
    this.dateline = null;
  }

  /** Returns true if field dateline is set (has been assigned a value) and false otherwise */
  public boolean isSetDateline() {
    return this.dateline != null;
  }

  public void setDatelineIsSet(boolean value) {
    if (!value) {
      this.dateline = null;
    }
  }

  public String getAddressId() {
    return this.addressId;
  }

  public MyOrderNoEntity setAddressId(String addressId) {
    this.addressId = addressId;
    return this;
  }

  public void unsetAddressId() {
    this.addressId = null;
  }

  /** Returns true if field addressId is set (has been assigned a value) and false otherwise */
  public boolean isSetAddressId() {
    return this.addressId != null;
  }

  public void setAddressIdIsSet(boolean value) {
    if (!value) {
      this.addressId = null;
    }
  }

  public String getCancelType() {
    return this.cancelType;
  }

  public MyOrderNoEntity setCancelType(String cancelType) {
    this.cancelType = cancelType;
    return this;
  }

  public void unsetCancelType() {
    this.cancelType = null;
  }

  /** Returns true if field cancelType is set (has been assigned a value) and false otherwise */
  public boolean isSetCancelType() {
    return this.cancelType != null;
  }

  public void setCancelTypeIsSet(boolean value) {
    if (!value) {
      this.cancelType = null;
    }
  }

  public String getPayType() {
    return this.payType;
  }

  public MyOrderNoEntity setPayType(String payType) {
    this.payType = payType;
    return this;
  }

  public void unsetPayType() {
    this.payType = null;
  }

  /** Returns true if field payType is set (has been assigned a value) and false otherwise */
  public boolean isSetPayType() {
    return this.payType != null;
  }

  public void setPayTypeIsSet(boolean value) {
    if (!value) {
      this.payType = null;
    }
  }

  public String getUsersId() {
    return this.usersId;
  }

  public MyOrderNoEntity setUsersId(String usersId) {
    this.usersId = usersId;
    return this;
  }

  public void unsetUsersId() {
    this.usersId = null;
  }

  /** Returns true if field usersId is set (has been assigned a value) and false otherwise */
  public boolean isSetUsersId() {
    return this.usersId != null;
  }

  public void setUsersIdIsSet(boolean value) {
    if (!value) {
      this.usersId = null;
    }
  }

  public String getRetailPrice() {
    return this.retailPrice;
  }

  public MyOrderNoEntity setRetailPrice(String retailPrice) {
    this.retailPrice = retailPrice;
    return this;
  }

  public void unsetRetailPrice() {
    this.retailPrice = null;
  }

  /** Returns true if field retailPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetRetailPrice() {
    return this.retailPrice != null;
  }

  public void setRetailPriceIsSet(boolean value) {
    if (!value) {
      this.retailPrice = null;
    }
  }

  public String getGoodsName() {
    return this.goodsName;
  }

  public MyOrderNoEntity setGoodsName(String goodsName) {
    this.goodsName = goodsName;
    return this;
  }

  public void unsetGoodsName() {
    this.goodsName = null;
  }

  /** Returns true if field goodsName is set (has been assigned a value) and false otherwise */
  public boolean isSetGoodsName() {
    return this.goodsName != null;
  }

  public void setGoodsNameIsSet(boolean value) {
    if (!value) {
      this.goodsName = null;
    }
  }

  public String getFinishDate() {
    return this.finishDate;
  }

  public MyOrderNoEntity setFinishDate(String finishDate) {
    this.finishDate = finishDate;
    return this;
  }

  public void unsetFinishDate() {
    this.finishDate = null;
  }

  /** Returns true if field finishDate is set (has been assigned a value) and false otherwise */
  public boolean isSetFinishDate() {
    return this.finishDate != null;
  }

  public void setFinishDateIsSet(boolean value) {
    if (!value) {
      this.finishDate = null;
    }
  }

  public String getImg() {
    return this.img;
  }

  public MyOrderNoEntity setImg(String img) {
    this.img = img;
    return this;
  }

  public void unsetImg() {
    this.img = null;
  }

  /** Returns true if field img is set (has been assigned a value) and false otherwise */
  public boolean isSetImg() {
    return this.img != null;
  }

  public void setImgIsSet(boolean value) {
    if (!value) {
      this.img = null;
    }
  }

  public int getMyOrderNoEntityListsSize() {
    return (this.myOrderNoEntityLists == null) ? 0 : this.myOrderNoEntityLists.size();
  }

  public java.util.Iterator<MyOrderNoEntity> getMyOrderNoEntityListsIterator() {
    return (this.myOrderNoEntityLists == null) ? null : this.myOrderNoEntityLists.iterator();
  }

  public void addToMyOrderNoEntityLists(MyOrderNoEntity elem) {
    if (this.myOrderNoEntityLists == null) {
      this.myOrderNoEntityLists = new ArrayList<MyOrderNoEntity>();
    }
    this.myOrderNoEntityLists.add(elem);
  }

  public List<MyOrderNoEntity> getMyOrderNoEntityLists() {
    return this.myOrderNoEntityLists;
  }

  public MyOrderNoEntity setMyOrderNoEntityLists(List<MyOrderNoEntity> myOrderNoEntityLists) {
    this.myOrderNoEntityLists = myOrderNoEntityLists;
    return this;
  }

  public void unsetMyOrderNoEntityLists() {
    this.myOrderNoEntityLists = null;
  }

  /** Returns true if field myOrderNoEntityLists is set (has been assigned a value) and false otherwise */
  public boolean isSetMyOrderNoEntityLists() {
    return this.myOrderNoEntityLists != null;
  }

  public void setMyOrderNoEntityListsIsSet(boolean value) {
    if (!value) {
      this.myOrderNoEntityLists = null;
    }
  }

  public String getToalMoney() {
    return this.toalMoney;
  }

  public MyOrderNoEntity setToalMoney(String toalMoney) {
    this.toalMoney = toalMoney;
    return this;
  }

  public void unsetToalMoney() {
    this.toalMoney = null;
  }

  /** Returns true if field toalMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetToalMoney() {
    return this.toalMoney != null;
  }

  public void setToalMoneyIsSet(boolean value) {
    if (!value) {
      this.toalMoney = null;
    }
  }

  public int getPageNo() {
    return this.pageNo;
  }

  public MyOrderNoEntity setPageNo(int pageNo) {
    this.pageNo = pageNo;
    setPageNoIsSet(true);
    return this;
  }

  public void unsetPageNo() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGENO_ISSET_ID);
  }

  /** Returns true if field pageNo is set (has been assigned a value) and false otherwise */
  public boolean isSetPageNo() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGENO_ISSET_ID);
  }

  public void setPageNoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGENO_ISSET_ID, value);
  }

  public int getTotalCount() {
    return this.totalCount;
  }

  public MyOrderNoEntity setTotalCount(int totalCount) {
    this.totalCount = totalCount;
    setTotalCountIsSet(true);
    return this;
  }

  public void unsetTotalCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALCOUNT_ISSET_ID);
  }

  /** Returns true if field totalCount is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalCount() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALCOUNT_ISSET_ID);
  }

  public void setTotalCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALCOUNT_ISSET_ID, value);
  }

  public String getSumretailBacLimit() {
    return this.sumretailBacLimit;
  }

  public MyOrderNoEntity setSumretailBacLimit(String sumretailBacLimit) {
    this.sumretailBacLimit = sumretailBacLimit;
    return this;
  }

  public void unsetSumretailBacLimit() {
    this.sumretailBacLimit = null;
  }

  /** Returns true if field sumretailBacLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetSumretailBacLimit() {
    return this.sumretailBacLimit != null;
  }

  public void setSumretailBacLimitIsSet(boolean value) {
    if (!value) {
      this.sumretailBacLimit = null;
    }
  }

  public String getRebatesDate() {
    return this.rebatesDate;
  }

  public MyOrderNoEntity setRebatesDate(String rebatesDate) {
    this.rebatesDate = rebatesDate;
    return this;
  }

  public void unsetRebatesDate() {
    this.rebatesDate = null;
  }

  /** Returns true if field rebatesDate is set (has been assigned a value) and false otherwise */
  public boolean isSetRebatesDate() {
    return this.rebatesDate != null;
  }

  public void setRebatesDateIsSet(boolean value) {
    if (!value) {
      this.rebatesDate = null;
    }
  }

  public String getRetailBacLimit() {
    return this.retailBacLimit;
  }

  public MyOrderNoEntity setRetailBacLimit(String retailBacLimit) {
    this.retailBacLimit = retailBacLimit;
    return this;
  }

  public void unsetRetailBacLimit() {
    this.retailBacLimit = null;
  }

  /** Returns true if field retailBacLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetRetailBacLimit() {
    return this.retailBacLimit != null;
  }

  public void setRetailBacLimitIsSet(boolean value) {
    if (!value) {
      this.retailBacLimit = null;
    }
  }

  public String getSkuId() {
    return this.skuId;
  }

  public MyOrderNoEntity setSkuId(String skuId) {
    this.skuId = skuId;
    return this;
  }

  public void unsetSkuId() {
    this.skuId = null;
  }

  /** Returns true if field skuId is set (has been assigned a value) and false otherwise */
  public boolean isSetSkuId() {
    return this.skuId != null;
  }

  public void setSkuIdIsSet(boolean value) {
    if (!value) {
      this.skuId = null;
    }
  }

  public String getBarcode() {
    return this.barcode;
  }

  public MyOrderNoEntity setBarcode(String barcode) {
    this.barcode = barcode;
    return this;
  }

  public void unsetBarcode() {
    this.barcode = null;
  }

  /** Returns true if field barcode is set (has been assigned a value) and false otherwise */
  public boolean isSetBarcode() {
    return this.barcode != null;
  }

  public void setBarcodeIsSet(boolean value) {
    if (!value) {
      this.barcode = null;
    }
  }

  public String getAppraiseState() {
    return this.appraiseState;
  }

  public MyOrderNoEntity setAppraiseState(String appraiseState) {
    this.appraiseState = appraiseState;
    return this;
  }

  public void unsetAppraiseState() {
    this.appraiseState = null;
  }

  /** Returns true if field appraiseState is set (has been assigned a value) and false otherwise */
  public boolean isSetAppraiseState() {
    return this.appraiseState != null;
  }

  public void setAppraiseStateIsSet(boolean value) {
    if (!value) {
      this.appraiseState = null;
    }
  }

  public String getAftersaleState() {
    return this.aftersaleState;
  }

  public MyOrderNoEntity setAftersaleState(String aftersaleState) {
    this.aftersaleState = aftersaleState;
    return this;
  }

  public void unsetAftersaleState() {
    this.aftersaleState = null;
  }

  /** Returns true if field aftersaleState is set (has been assigned a value) and false otherwise */
  public boolean isSetAftersaleState() {
    return this.aftersaleState != null;
  }

  public void setAftersaleStateIsSet(boolean value) {
    if (!value) {
      this.aftersaleState = null;
    }
  }

  public String getReturnState() {
    return this.returnState;
  }

  public MyOrderNoEntity setReturnState(String returnState) {
    this.returnState = returnState;
    return this;
  }

  public void unsetReturnState() {
    this.returnState = null;
  }

  /** Returns true if field returnState is set (has been assigned a value) and false otherwise */
  public boolean isSetReturnState() {
    return this.returnState != null;
  }

  public void setReturnStateIsSet(boolean value) {
    if (!value) {
      this.returnState = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case GOODS_ID:
      if (value == null) {
        unsetGoodsId();
      } else {
        setGoodsId((String)value);
      }
      break;

    case ORDER_ID:
      if (value == null) {
        unsetOrderId();
      } else {
        setOrderId((String)value);
      }
      break;

    case SHOP_ID:
      if (value == null) {
        unsetShopId();
      } else {
        setShopId((String)value);
      }
      break;

    case BUYER_UID:
      if (value == null) {
        unsetBuyerUid();
      } else {
        setBuyerUid((String)value);
      }
      break;

    case SUPPLIER_UID:
      if (value == null) {
        unsetSupplierUid();
      } else {
        setSupplierUid((String)value);
      }
      break;

    case NUM:
      if (value == null) {
        unsetNum();
      } else {
        setNum((String)value);
      }
      break;

    case MONEY:
      if (value == null) {
        unsetMoney();
      } else {
        setMoney((String)value);
      }
      break;

    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((String)value);
      }
      break;

    case CODE:
      if (value == null) {
        unsetCode();
      } else {
        setCode((String)value);
      }
      break;

    case MESSAGE:
      if (value == null) {
        unsetMessage();
      } else {
        setMessage((String)value);
      }
      break;

    case DATELINE:
      if (value == null) {
        unsetDateline();
      } else {
        setDateline((String)value);
      }
      break;

    case ADDRESS_ID:
      if (value == null) {
        unsetAddressId();
      } else {
        setAddressId((String)value);
      }
      break;

    case CANCEL_TYPE:
      if (value == null) {
        unsetCancelType();
      } else {
        setCancelType((String)value);
      }
      break;

    case PAY_TYPE:
      if (value == null) {
        unsetPayType();
      } else {
        setPayType((String)value);
      }
      break;

    case USERS_ID:
      if (value == null) {
        unsetUsersId();
      } else {
        setUsersId((String)value);
      }
      break;

    case RETAIL_PRICE:
      if (value == null) {
        unsetRetailPrice();
      } else {
        setRetailPrice((String)value);
      }
      break;

    case GOODS_NAME:
      if (value == null) {
        unsetGoodsName();
      } else {
        setGoodsName((String)value);
      }
      break;

    case FINISH_DATE:
      if (value == null) {
        unsetFinishDate();
      } else {
        setFinishDate((String)value);
      }
      break;

    case IMG:
      if (value == null) {
        unsetImg();
      } else {
        setImg((String)value);
      }
      break;

    case MY_ORDER_NO_ENTITY_LISTS:
      if (value == null) {
        unsetMyOrderNoEntityLists();
      } else {
        setMyOrderNoEntityLists((List<MyOrderNoEntity>)value);
      }
      break;

    case TOAL_MONEY:
      if (value == null) {
        unsetToalMoney();
      } else {
        setToalMoney((String)value);
      }
      break;

    case PAGE_NO:
      if (value == null) {
        unsetPageNo();
      } else {
        setPageNo((Integer)value);
      }
      break;

    case TOTAL_COUNT:
      if (value == null) {
        unsetTotalCount();
      } else {
        setTotalCount((Integer)value);
      }
      break;

    case SUMRETAIL_BAC_LIMIT:
      if (value == null) {
        unsetSumretailBacLimit();
      } else {
        setSumretailBacLimit((String)value);
      }
      break;

    case REBATES_DATE:
      if (value == null) {
        unsetRebatesDate();
      } else {
        setRebatesDate((String)value);
      }
      break;

    case RETAIL_BAC_LIMIT:
      if (value == null) {
        unsetRetailBacLimit();
      } else {
        setRetailBacLimit((String)value);
      }
      break;

    case SKU_ID:
      if (value == null) {
        unsetSkuId();
      } else {
        setSkuId((String)value);
      }
      break;

    case BARCODE:
      if (value == null) {
        unsetBarcode();
      } else {
        setBarcode((String)value);
      }
      break;

    case APPRAISE_STATE:
      if (value == null) {
        unsetAppraiseState();
      } else {
        setAppraiseState((String)value);
      }
      break;

    case AFTERSALE_STATE:
      if (value == null) {
        unsetAftersaleState();
      } else {
        setAftersaleState((String)value);
      }
      break;

    case RETURN_STATE:
      if (value == null) {
        unsetReturnState();
      } else {
        setReturnState((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case GOODS_ID:
      return getGoodsId();

    case ORDER_ID:
      return getOrderId();

    case SHOP_ID:
      return getShopId();

    case BUYER_UID:
      return getBuyerUid();

    case SUPPLIER_UID:
      return getSupplierUid();

    case NUM:
      return getNum();

    case MONEY:
      return getMoney();

    case STATE:
      return getState();

    case CODE:
      return getCode();

    case MESSAGE:
      return getMessage();

    case DATELINE:
      return getDateline();

    case ADDRESS_ID:
      return getAddressId();

    case CANCEL_TYPE:
      return getCancelType();

    case PAY_TYPE:
      return getPayType();

    case USERS_ID:
      return getUsersId();

    case RETAIL_PRICE:
      return getRetailPrice();

    case GOODS_NAME:
      return getGoodsName();

    case FINISH_DATE:
      return getFinishDate();

    case IMG:
      return getImg();

    case MY_ORDER_NO_ENTITY_LISTS:
      return getMyOrderNoEntityLists();

    case TOAL_MONEY:
      return getToalMoney();

    case PAGE_NO:
      return getPageNo();

    case TOTAL_COUNT:
      return getTotalCount();

    case SUMRETAIL_BAC_LIMIT:
      return getSumretailBacLimit();

    case REBATES_DATE:
      return getRebatesDate();

    case RETAIL_BAC_LIMIT:
      return getRetailBacLimit();

    case SKU_ID:
      return getSkuId();

    case BARCODE:
      return getBarcode();

    case APPRAISE_STATE:
      return getAppraiseState();

    case AFTERSALE_STATE:
      return getAftersaleState();

    case RETURN_STATE:
      return getReturnState();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case GOODS_ID:
      return isSetGoodsId();
    case ORDER_ID:
      return isSetOrderId();
    case SHOP_ID:
      return isSetShopId();
    case BUYER_UID:
      return isSetBuyerUid();
    case SUPPLIER_UID:
      return isSetSupplierUid();
    case NUM:
      return isSetNum();
    case MONEY:
      return isSetMoney();
    case STATE:
      return isSetState();
    case CODE:
      return isSetCode();
    case MESSAGE:
      return isSetMessage();
    case DATELINE:
      return isSetDateline();
    case ADDRESS_ID:
      return isSetAddressId();
    case CANCEL_TYPE:
      return isSetCancelType();
    case PAY_TYPE:
      return isSetPayType();
    case USERS_ID:
      return isSetUsersId();
    case RETAIL_PRICE:
      return isSetRetailPrice();
    case GOODS_NAME:
      return isSetGoodsName();
    case FINISH_DATE:
      return isSetFinishDate();
    case IMG:
      return isSetImg();
    case MY_ORDER_NO_ENTITY_LISTS:
      return isSetMyOrderNoEntityLists();
    case TOAL_MONEY:
      return isSetToalMoney();
    case PAGE_NO:
      return isSetPageNo();
    case TOTAL_COUNT:
      return isSetTotalCount();
    case SUMRETAIL_BAC_LIMIT:
      return isSetSumretailBacLimit();
    case REBATES_DATE:
      return isSetRebatesDate();
    case RETAIL_BAC_LIMIT:
      return isSetRetailBacLimit();
    case SKU_ID:
      return isSetSkuId();
    case BARCODE:
      return isSetBarcode();
    case APPRAISE_STATE:
      return isSetAppraiseState();
    case AFTERSALE_STATE:
      return isSetAftersaleState();
    case RETURN_STATE:
      return isSetReturnState();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MyOrderNoEntity)
      return this.equals((MyOrderNoEntity)that);
    return false;
  }

  public boolean equals(MyOrderNoEntity that) {
    if (that == null)
      return false;

    boolean this_present_goodsId = true && this.isSetGoodsId();
    boolean that_present_goodsId = true && that.isSetGoodsId();
    if (this_present_goodsId || that_present_goodsId) {
      if (!(this_present_goodsId && that_present_goodsId))
        return false;
      if (!this.goodsId.equals(that.goodsId))
        return false;
    }

    boolean this_present_orderId = true && this.isSetOrderId();
    boolean that_present_orderId = true && that.isSetOrderId();
    if (this_present_orderId || that_present_orderId) {
      if (!(this_present_orderId && that_present_orderId))
        return false;
      if (!this.orderId.equals(that.orderId))
        return false;
    }

    boolean this_present_shopId = true && this.isSetShopId();
    boolean that_present_shopId = true && that.isSetShopId();
    if (this_present_shopId || that_present_shopId) {
      if (!(this_present_shopId && that_present_shopId))
        return false;
      if (!this.shopId.equals(that.shopId))
        return false;
    }

    boolean this_present_buyerUid = true && this.isSetBuyerUid();
    boolean that_present_buyerUid = true && that.isSetBuyerUid();
    if (this_present_buyerUid || that_present_buyerUid) {
      if (!(this_present_buyerUid && that_present_buyerUid))
        return false;
      if (!this.buyerUid.equals(that.buyerUid))
        return false;
    }

    boolean this_present_supplierUid = true && this.isSetSupplierUid();
    boolean that_present_supplierUid = true && that.isSetSupplierUid();
    if (this_present_supplierUid || that_present_supplierUid) {
      if (!(this_present_supplierUid && that_present_supplierUid))
        return false;
      if (!this.supplierUid.equals(that.supplierUid))
        return false;
    }

    boolean this_present_num = true && this.isSetNum();
    boolean that_present_num = true && that.isSetNum();
    if (this_present_num || that_present_num) {
      if (!(this_present_num && that_present_num))
        return false;
      if (!this.num.equals(that.num))
        return false;
    }

    boolean this_present_money = true && this.isSetMoney();
    boolean that_present_money = true && that.isSetMoney();
    if (this_present_money || that_present_money) {
      if (!(this_present_money && that_present_money))
        return false;
      if (!this.money.equals(that.money))
        return false;
    }

    boolean this_present_state = true && this.isSetState();
    boolean that_present_state = true && that.isSetState();
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (!this.state.equals(that.state))
        return false;
    }

    boolean this_present_code = true && this.isSetCode();
    boolean that_present_code = true && that.isSetCode();
    if (this_present_code || that_present_code) {
      if (!(this_present_code && that_present_code))
        return false;
      if (!this.code.equals(that.code))
        return false;
    }

    boolean this_present_message = true && this.isSetMessage();
    boolean that_present_message = true && that.isSetMessage();
    if (this_present_message || that_present_message) {
      if (!(this_present_message && that_present_message))
        return false;
      if (!this.message.equals(that.message))
        return false;
    }

    boolean this_present_dateline = true && this.isSetDateline();
    boolean that_present_dateline = true && that.isSetDateline();
    if (this_present_dateline || that_present_dateline) {
      if (!(this_present_dateline && that_present_dateline))
        return false;
      if (!this.dateline.equals(that.dateline))
        return false;
    }

    boolean this_present_addressId = true && this.isSetAddressId();
    boolean that_present_addressId = true && that.isSetAddressId();
    if (this_present_addressId || that_present_addressId) {
      if (!(this_present_addressId && that_present_addressId))
        return false;
      if (!this.addressId.equals(that.addressId))
        return false;
    }

    boolean this_present_cancelType = true && this.isSetCancelType();
    boolean that_present_cancelType = true && that.isSetCancelType();
    if (this_present_cancelType || that_present_cancelType) {
      if (!(this_present_cancelType && that_present_cancelType))
        return false;
      if (!this.cancelType.equals(that.cancelType))
        return false;
    }

    boolean this_present_payType = true && this.isSetPayType();
    boolean that_present_payType = true && that.isSetPayType();
    if (this_present_payType || that_present_payType) {
      if (!(this_present_payType && that_present_payType))
        return false;
      if (!this.payType.equals(that.payType))
        return false;
    }

    boolean this_present_usersId = true && this.isSetUsersId();
    boolean that_present_usersId = true && that.isSetUsersId();
    if (this_present_usersId || that_present_usersId) {
      if (!(this_present_usersId && that_present_usersId))
        return false;
      if (!this.usersId.equals(that.usersId))
        return false;
    }

    boolean this_present_retailPrice = true && this.isSetRetailPrice();
    boolean that_present_retailPrice = true && that.isSetRetailPrice();
    if (this_present_retailPrice || that_present_retailPrice) {
      if (!(this_present_retailPrice && that_present_retailPrice))
        return false;
      if (!this.retailPrice.equals(that.retailPrice))
        return false;
    }

    boolean this_present_goodsName = true && this.isSetGoodsName();
    boolean that_present_goodsName = true && that.isSetGoodsName();
    if (this_present_goodsName || that_present_goodsName) {
      if (!(this_present_goodsName && that_present_goodsName))
        return false;
      if (!this.goodsName.equals(that.goodsName))
        return false;
    }

    boolean this_present_finishDate = true && this.isSetFinishDate();
    boolean that_present_finishDate = true && that.isSetFinishDate();
    if (this_present_finishDate || that_present_finishDate) {
      if (!(this_present_finishDate && that_present_finishDate))
        return false;
      if (!this.finishDate.equals(that.finishDate))
        return false;
    }

    boolean this_present_img = true && this.isSetImg();
    boolean that_present_img = true && that.isSetImg();
    if (this_present_img || that_present_img) {
      if (!(this_present_img && that_present_img))
        return false;
      if (!this.img.equals(that.img))
        return false;
    }

    boolean this_present_myOrderNoEntityLists = true && this.isSetMyOrderNoEntityLists();
    boolean that_present_myOrderNoEntityLists = true && that.isSetMyOrderNoEntityLists();
    if (this_present_myOrderNoEntityLists || that_present_myOrderNoEntityLists) {
      if (!(this_present_myOrderNoEntityLists && that_present_myOrderNoEntityLists))
        return false;
      if (!this.myOrderNoEntityLists.equals(that.myOrderNoEntityLists))
        return false;
    }

    boolean this_present_toalMoney = true && this.isSetToalMoney();
    boolean that_present_toalMoney = true && that.isSetToalMoney();
    if (this_present_toalMoney || that_present_toalMoney) {
      if (!(this_present_toalMoney && that_present_toalMoney))
        return false;
      if (!this.toalMoney.equals(that.toalMoney))
        return false;
    }

    boolean this_present_pageNo = true;
    boolean that_present_pageNo = true;
    if (this_present_pageNo || that_present_pageNo) {
      if (!(this_present_pageNo && that_present_pageNo))
        return false;
      if (this.pageNo != that.pageNo)
        return false;
    }

    boolean this_present_totalCount = true;
    boolean that_present_totalCount = true;
    if (this_present_totalCount || that_present_totalCount) {
      if (!(this_present_totalCount && that_present_totalCount))
        return false;
      if (this.totalCount != that.totalCount)
        return false;
    }

    boolean this_present_sumretailBacLimit = true && this.isSetSumretailBacLimit();
    boolean that_present_sumretailBacLimit = true && that.isSetSumretailBacLimit();
    if (this_present_sumretailBacLimit || that_present_sumretailBacLimit) {
      if (!(this_present_sumretailBacLimit && that_present_sumretailBacLimit))
        return false;
      if (!this.sumretailBacLimit.equals(that.sumretailBacLimit))
        return false;
    }

    boolean this_present_rebatesDate = true && this.isSetRebatesDate();
    boolean that_present_rebatesDate = true && that.isSetRebatesDate();
    if (this_present_rebatesDate || that_present_rebatesDate) {
      if (!(this_present_rebatesDate && that_present_rebatesDate))
        return false;
      if (!this.rebatesDate.equals(that.rebatesDate))
        return false;
    }

    boolean this_present_retailBacLimit = true && this.isSetRetailBacLimit();
    boolean that_present_retailBacLimit = true && that.isSetRetailBacLimit();
    if (this_present_retailBacLimit || that_present_retailBacLimit) {
      if (!(this_present_retailBacLimit && that_present_retailBacLimit))
        return false;
      if (!this.retailBacLimit.equals(that.retailBacLimit))
        return false;
    }

    boolean this_present_skuId = true && this.isSetSkuId();
    boolean that_present_skuId = true && that.isSetSkuId();
    if (this_present_skuId || that_present_skuId) {
      if (!(this_present_skuId && that_present_skuId))
        return false;
      if (!this.skuId.equals(that.skuId))
        return false;
    }

    boolean this_present_barcode = true && this.isSetBarcode();
    boolean that_present_barcode = true && that.isSetBarcode();
    if (this_present_barcode || that_present_barcode) {
      if (!(this_present_barcode && that_present_barcode))
        return false;
      if (!this.barcode.equals(that.barcode))
        return false;
    }

    boolean this_present_appraiseState = true && this.isSetAppraiseState();
    boolean that_present_appraiseState = true && that.isSetAppraiseState();
    if (this_present_appraiseState || that_present_appraiseState) {
      if (!(this_present_appraiseState && that_present_appraiseState))
        return false;
      if (!this.appraiseState.equals(that.appraiseState))
        return false;
    }

    boolean this_present_aftersaleState = true && this.isSetAftersaleState();
    boolean that_present_aftersaleState = true && that.isSetAftersaleState();
    if (this_present_aftersaleState || that_present_aftersaleState) {
      if (!(this_present_aftersaleState && that_present_aftersaleState))
        return false;
      if (!this.aftersaleState.equals(that.aftersaleState))
        return false;
    }

    boolean this_present_returnState = true && this.isSetReturnState();
    boolean that_present_returnState = true && that.isSetReturnState();
    if (this_present_returnState || that_present_returnState) {
      if (!(this_present_returnState && that_present_returnState))
        return false;
      if (!this.returnState.equals(that.returnState))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_goodsId = true && (isSetGoodsId());
    list.add(present_goodsId);
    if (present_goodsId)
      list.add(goodsId);

    boolean present_orderId = true && (isSetOrderId());
    list.add(present_orderId);
    if (present_orderId)
      list.add(orderId);

    boolean present_shopId = true && (isSetShopId());
    list.add(present_shopId);
    if (present_shopId)
      list.add(shopId);

    boolean present_buyerUid = true && (isSetBuyerUid());
    list.add(present_buyerUid);
    if (present_buyerUid)
      list.add(buyerUid);

    boolean present_supplierUid = true && (isSetSupplierUid());
    list.add(present_supplierUid);
    if (present_supplierUid)
      list.add(supplierUid);

    boolean present_num = true && (isSetNum());
    list.add(present_num);
    if (present_num)
      list.add(num);

    boolean present_money = true && (isSetMoney());
    list.add(present_money);
    if (present_money)
      list.add(money);

    boolean present_state = true && (isSetState());
    list.add(present_state);
    if (present_state)
      list.add(state);

    boolean present_code = true && (isSetCode());
    list.add(present_code);
    if (present_code)
      list.add(code);

    boolean present_message = true && (isSetMessage());
    list.add(present_message);
    if (present_message)
      list.add(message);

    boolean present_dateline = true && (isSetDateline());
    list.add(present_dateline);
    if (present_dateline)
      list.add(dateline);

    boolean present_addressId = true && (isSetAddressId());
    list.add(present_addressId);
    if (present_addressId)
      list.add(addressId);

    boolean present_cancelType = true && (isSetCancelType());
    list.add(present_cancelType);
    if (present_cancelType)
      list.add(cancelType);

    boolean present_payType = true && (isSetPayType());
    list.add(present_payType);
    if (present_payType)
      list.add(payType);

    boolean present_usersId = true && (isSetUsersId());
    list.add(present_usersId);
    if (present_usersId)
      list.add(usersId);

    boolean present_retailPrice = true && (isSetRetailPrice());
    list.add(present_retailPrice);
    if (present_retailPrice)
      list.add(retailPrice);

    boolean present_goodsName = true && (isSetGoodsName());
    list.add(present_goodsName);
    if (present_goodsName)
      list.add(goodsName);

    boolean present_finishDate = true && (isSetFinishDate());
    list.add(present_finishDate);
    if (present_finishDate)
      list.add(finishDate);

    boolean present_img = true && (isSetImg());
    list.add(present_img);
    if (present_img)
      list.add(img);

    boolean present_myOrderNoEntityLists = true && (isSetMyOrderNoEntityLists());
    list.add(present_myOrderNoEntityLists);
    if (present_myOrderNoEntityLists)
      list.add(myOrderNoEntityLists);

    boolean present_toalMoney = true && (isSetToalMoney());
    list.add(present_toalMoney);
    if (present_toalMoney)
      list.add(toalMoney);

    boolean present_pageNo = true;
    list.add(present_pageNo);
    if (present_pageNo)
      list.add(pageNo);

    boolean present_totalCount = true;
    list.add(present_totalCount);
    if (present_totalCount)
      list.add(totalCount);

    boolean present_sumretailBacLimit = true && (isSetSumretailBacLimit());
    list.add(present_sumretailBacLimit);
    if (present_sumretailBacLimit)
      list.add(sumretailBacLimit);

    boolean present_rebatesDate = true && (isSetRebatesDate());
    list.add(present_rebatesDate);
    if (present_rebatesDate)
      list.add(rebatesDate);

    boolean present_retailBacLimit = true && (isSetRetailBacLimit());
    list.add(present_retailBacLimit);
    if (present_retailBacLimit)
      list.add(retailBacLimit);

    boolean present_skuId = true && (isSetSkuId());
    list.add(present_skuId);
    if (present_skuId)
      list.add(skuId);

    boolean present_barcode = true && (isSetBarcode());
    list.add(present_barcode);
    if (present_barcode)
      list.add(barcode);

    boolean present_appraiseState = true && (isSetAppraiseState());
    list.add(present_appraiseState);
    if (present_appraiseState)
      list.add(appraiseState);

    boolean present_aftersaleState = true && (isSetAftersaleState());
    list.add(present_aftersaleState);
    if (present_aftersaleState)
      list.add(aftersaleState);

    boolean present_returnState = true && (isSetReturnState());
    list.add(present_returnState);
    if (present_returnState)
      list.add(returnState);

    return list.hashCode();
  }

  @Override
  public int compareTo(MyOrderNoEntity other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetGoodsId()).compareTo(other.isSetGoodsId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGoodsId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.goodsId, other.goodsId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(other.isSetOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, other.orderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShopId()).compareTo(other.isSetShopId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShopId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shopId, other.shopId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBuyerUid()).compareTo(other.isSetBuyerUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuyerUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buyerUid, other.buyerUid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSupplierUid()).compareTo(other.isSetSupplierUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSupplierUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.supplierUid, other.supplierUid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum()).compareTo(other.isSetNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num, other.num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMoney()).compareTo(other.isSetMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.money, other.money);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetState()).compareTo(other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCode()).compareTo(other.isSetCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDateline()).compareTo(other.isSetDateline());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDateline()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dateline, other.dateline);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddressId()).compareTo(other.isSetAddressId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddressId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addressId, other.addressId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCancelType()).compareTo(other.isSetCancelType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCancelType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cancelType, other.cancelType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayType()).compareTo(other.isSetPayType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payType, other.payType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUsersId()).compareTo(other.isSetUsersId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsersId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.usersId, other.usersId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRetailPrice()).compareTo(other.isSetRetailPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRetailPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.retailPrice, other.retailPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGoodsName()).compareTo(other.isSetGoodsName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGoodsName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.goodsName, other.goodsName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFinishDate()).compareTo(other.isSetFinishDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFinishDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.finishDate, other.finishDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImg()).compareTo(other.isSetImg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.img, other.img);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMyOrderNoEntityLists()).compareTo(other.isSetMyOrderNoEntityLists());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMyOrderNoEntityLists()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myOrderNoEntityLists, other.myOrderNoEntityLists);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToalMoney()).compareTo(other.isSetToalMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToalMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toalMoney, other.toalMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPageNo()).compareTo(other.isSetPageNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNo, other.pageNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalCount()).compareTo(other.isSetTotalCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalCount, other.totalCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSumretailBacLimit()).compareTo(other.isSetSumretailBacLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSumretailBacLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sumretailBacLimit, other.sumretailBacLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRebatesDate()).compareTo(other.isSetRebatesDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRebatesDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rebatesDate, other.rebatesDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRetailBacLimit()).compareTo(other.isSetRetailBacLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRetailBacLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.retailBacLimit, other.retailBacLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSkuId()).compareTo(other.isSetSkuId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSkuId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.skuId, other.skuId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBarcode()).compareTo(other.isSetBarcode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBarcode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.barcode, other.barcode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppraiseState()).compareTo(other.isSetAppraiseState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppraiseState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appraiseState, other.appraiseState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAftersaleState()).compareTo(other.isSetAftersaleState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAftersaleState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aftersaleState, other.aftersaleState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReturnState()).compareTo(other.isSetReturnState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReturnState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.returnState, other.returnState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MyOrderNoEntity(");
    boolean first = true;

    sb.append("goodsId:");
    if (this.goodsId == null) {
      sb.append("null");
    } else {
      sb.append(this.goodsId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderId:");
    if (this.orderId == null) {
      sb.append("null");
    } else {
      sb.append(this.orderId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("shopId:");
    if (this.shopId == null) {
      sb.append("null");
    } else {
      sb.append(this.shopId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("buyerUid:");
    if (this.buyerUid == null) {
      sb.append("null");
    } else {
      sb.append(this.buyerUid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("supplierUid:");
    if (this.supplierUid == null) {
      sb.append("null");
    } else {
      sb.append(this.supplierUid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("num:");
    if (this.num == null) {
      sb.append("null");
    } else {
      sb.append(this.num);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("money:");
    if (this.money == null) {
      sb.append("null");
    } else {
      sb.append(this.money);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("state:");
    if (this.state == null) {
      sb.append("null");
    } else {
      sb.append(this.state);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("code:");
    if (this.code == null) {
      sb.append("null");
    } else {
      sb.append(this.code);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("message:");
    if (this.message == null) {
      sb.append("null");
    } else {
      sb.append(this.message);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dateline:");
    if (this.dateline == null) {
      sb.append("null");
    } else {
      sb.append(this.dateline);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("addressId:");
    if (this.addressId == null) {
      sb.append("null");
    } else {
      sb.append(this.addressId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cancelType:");
    if (this.cancelType == null) {
      sb.append("null");
    } else {
      sb.append(this.cancelType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("payType:");
    if (this.payType == null) {
      sb.append("null");
    } else {
      sb.append(this.payType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("usersId:");
    if (this.usersId == null) {
      sb.append("null");
    } else {
      sb.append(this.usersId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("retailPrice:");
    if (this.retailPrice == null) {
      sb.append("null");
    } else {
      sb.append(this.retailPrice);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("goodsName:");
    if (this.goodsName == null) {
      sb.append("null");
    } else {
      sb.append(this.goodsName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("finishDate:");
    if (this.finishDate == null) {
      sb.append("null");
    } else {
      sb.append(this.finishDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("img:");
    if (this.img == null) {
      sb.append("null");
    } else {
      sb.append(this.img);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("myOrderNoEntityLists:");
    if (this.myOrderNoEntityLists == null) {
      sb.append("null");
    } else {
      sb.append(this.myOrderNoEntityLists);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("toalMoney:");
    if (this.toalMoney == null) {
      sb.append("null");
    } else {
      sb.append(this.toalMoney);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pageNo:");
    sb.append(this.pageNo);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalCount:");
    sb.append(this.totalCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sumretailBacLimit:");
    if (this.sumretailBacLimit == null) {
      sb.append("null");
    } else {
      sb.append(this.sumretailBacLimit);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rebatesDate:");
    if (this.rebatesDate == null) {
      sb.append("null");
    } else {
      sb.append(this.rebatesDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("retailBacLimit:");
    if (this.retailBacLimit == null) {
      sb.append("null");
    } else {
      sb.append(this.retailBacLimit);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("skuId:");
    if (this.skuId == null) {
      sb.append("null");
    } else {
      sb.append(this.skuId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("barcode:");
    if (this.barcode == null) {
      sb.append("null");
    } else {
      sb.append(this.barcode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("appraiseState:");
    if (this.appraiseState == null) {
      sb.append("null");
    } else {
      sb.append(this.appraiseState);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("aftersaleState:");
    if (this.aftersaleState == null) {
      sb.append("null");
    } else {
      sb.append(this.aftersaleState);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("returnState:");
    if (this.returnState == null) {
      sb.append("null");
    } else {
      sb.append(this.returnState);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MyOrderNoEntityStandardSchemeFactory implements SchemeFactory {
    public MyOrderNoEntityStandardScheme getScheme() {
      return new MyOrderNoEntityStandardScheme();
    }
  }

  private static class MyOrderNoEntityStandardScheme extends StandardScheme<MyOrderNoEntity> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MyOrderNoEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // GOODS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.goodsId = iprot.readString();
              struct.setGoodsIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderId = iprot.readString();
              struct.setOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SHOP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.shopId = iprot.readString();
              struct.setShopIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BUYER_UID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.buyerUid = iprot.readString();
              struct.setBuyerUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SUPPLIER_UID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.supplierUid = iprot.readString();
              struct.setSupplierUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.num = iprot.readString();
              struct.setNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.money = iprot.readString();
              struct.setMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.state = iprot.readString();
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.code = iprot.readString();
              struct.setCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.message = iprot.readString();
              struct.setMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DATELINE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dateline = iprot.readString();
              struct.setDatelineIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ADDRESS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.addressId = iprot.readString();
              struct.setAddressIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CANCEL_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cancelType = iprot.readString();
              struct.setCancelTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // PAY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.payType = iprot.readString();
              struct.setPayTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // USERS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.usersId = iprot.readString();
              struct.setUsersIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // RETAIL_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.retailPrice = iprot.readString();
              struct.setRetailPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // GOODS_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.goodsName = iprot.readString();
              struct.setGoodsNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // FINISH_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.finishDate = iprot.readString();
              struct.setFinishDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // IMG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.img = iprot.readString();
              struct.setImgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // MY_ORDER_NO_ENTITY_LISTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.myOrderNoEntityLists = new ArrayList<MyOrderNoEntity>(_list0.size);
                MyOrderNoEntity _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new MyOrderNoEntity();
                  _elem1.read(iprot);
                  struct.myOrderNoEntityLists.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setMyOrderNoEntityListsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // TOAL_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.toalMoney = iprot.readString();
              struct.setToalMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // PAGE_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pageNo = iprot.readI32();
              struct.setPageNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // TOTAL_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalCount = iprot.readI32();
              struct.setTotalCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // SUMRETAIL_BAC_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sumretailBacLimit = iprot.readString();
              struct.setSumretailBacLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // REBATES_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rebatesDate = iprot.readString();
              struct.setRebatesDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // RETAIL_BAC_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.retailBacLimit = iprot.readString();
              struct.setRetailBacLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // SKU_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.skuId = iprot.readString();
              struct.setSkuIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // BARCODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.barcode = iprot.readString();
              struct.setBarcodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // APPRAISE_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appraiseState = iprot.readString();
              struct.setAppraiseStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // AFTERSALE_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.aftersaleState = iprot.readString();
              struct.setAftersaleStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // RETURN_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.returnState = iprot.readString();
              struct.setReturnStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MyOrderNoEntity struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.goodsId != null) {
        oprot.writeFieldBegin(GOODS_ID_FIELD_DESC);
        oprot.writeString(struct.goodsId);
        oprot.writeFieldEnd();
      }
      if (struct.orderId != null) {
        oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
        oprot.writeString(struct.orderId);
        oprot.writeFieldEnd();
      }
      if (struct.shopId != null) {
        oprot.writeFieldBegin(SHOP_ID_FIELD_DESC);
        oprot.writeString(struct.shopId);
        oprot.writeFieldEnd();
      }
      if (struct.buyerUid != null) {
        oprot.writeFieldBegin(BUYER_UID_FIELD_DESC);
        oprot.writeString(struct.buyerUid);
        oprot.writeFieldEnd();
      }
      if (struct.supplierUid != null) {
        oprot.writeFieldBegin(SUPPLIER_UID_FIELD_DESC);
        oprot.writeString(struct.supplierUid);
        oprot.writeFieldEnd();
      }
      if (struct.num != null) {
        oprot.writeFieldBegin(NUM_FIELD_DESC);
        oprot.writeString(struct.num);
        oprot.writeFieldEnd();
      }
      if (struct.money != null) {
        oprot.writeFieldBegin(MONEY_FIELD_DESC);
        oprot.writeString(struct.money);
        oprot.writeFieldEnd();
      }
      if (struct.state != null) {
        oprot.writeFieldBegin(STATE_FIELD_DESC);
        oprot.writeString(struct.state);
        oprot.writeFieldEnd();
      }
      if (struct.code != null) {
        oprot.writeFieldBegin(CODE_FIELD_DESC);
        oprot.writeString(struct.code);
        oprot.writeFieldEnd();
      }
      if (struct.message != null) {
        oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
        oprot.writeString(struct.message);
        oprot.writeFieldEnd();
      }
      if (struct.dateline != null) {
        oprot.writeFieldBegin(DATELINE_FIELD_DESC);
        oprot.writeString(struct.dateline);
        oprot.writeFieldEnd();
      }
      if (struct.addressId != null) {
        oprot.writeFieldBegin(ADDRESS_ID_FIELD_DESC);
        oprot.writeString(struct.addressId);
        oprot.writeFieldEnd();
      }
      if (struct.cancelType != null) {
        oprot.writeFieldBegin(CANCEL_TYPE_FIELD_DESC);
        oprot.writeString(struct.cancelType);
        oprot.writeFieldEnd();
      }
      if (struct.payType != null) {
        oprot.writeFieldBegin(PAY_TYPE_FIELD_DESC);
        oprot.writeString(struct.payType);
        oprot.writeFieldEnd();
      }
      if (struct.usersId != null) {
        oprot.writeFieldBegin(USERS_ID_FIELD_DESC);
        oprot.writeString(struct.usersId);
        oprot.writeFieldEnd();
      }
      if (struct.retailPrice != null) {
        oprot.writeFieldBegin(RETAIL_PRICE_FIELD_DESC);
        oprot.writeString(struct.retailPrice);
        oprot.writeFieldEnd();
      }
      if (struct.goodsName != null) {
        oprot.writeFieldBegin(GOODS_NAME_FIELD_DESC);
        oprot.writeString(struct.goodsName);
        oprot.writeFieldEnd();
      }
      if (struct.finishDate != null) {
        oprot.writeFieldBegin(FINISH_DATE_FIELD_DESC);
        oprot.writeString(struct.finishDate);
        oprot.writeFieldEnd();
      }
      if (struct.img != null) {
        oprot.writeFieldBegin(IMG_FIELD_DESC);
        oprot.writeString(struct.img);
        oprot.writeFieldEnd();
      }
      if (struct.myOrderNoEntityLists != null) {
        oprot.writeFieldBegin(MY_ORDER_NO_ENTITY_LISTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.myOrderNoEntityLists.size()));
          for (MyOrderNoEntity _iter3 : struct.myOrderNoEntityLists)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.toalMoney != null) {
        oprot.writeFieldBegin(TOAL_MONEY_FIELD_DESC);
        oprot.writeString(struct.toalMoney);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAGE_NO_FIELD_DESC);
      oprot.writeI32(struct.pageNo);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_COUNT_FIELD_DESC);
      oprot.writeI32(struct.totalCount);
      oprot.writeFieldEnd();
      if (struct.sumretailBacLimit != null) {
        oprot.writeFieldBegin(SUMRETAIL_BAC_LIMIT_FIELD_DESC);
        oprot.writeString(struct.sumretailBacLimit);
        oprot.writeFieldEnd();
      }
      if (struct.rebatesDate != null) {
        oprot.writeFieldBegin(REBATES_DATE_FIELD_DESC);
        oprot.writeString(struct.rebatesDate);
        oprot.writeFieldEnd();
      }
      if (struct.retailBacLimit != null) {
        oprot.writeFieldBegin(RETAIL_BAC_LIMIT_FIELD_DESC);
        oprot.writeString(struct.retailBacLimit);
        oprot.writeFieldEnd();
      }
      if (struct.skuId != null) {
        oprot.writeFieldBegin(SKU_ID_FIELD_DESC);
        oprot.writeString(struct.skuId);
        oprot.writeFieldEnd();
      }
      if (struct.barcode != null) {
        oprot.writeFieldBegin(BARCODE_FIELD_DESC);
        oprot.writeString(struct.barcode);
        oprot.writeFieldEnd();
      }
      if (struct.appraiseState != null) {
        oprot.writeFieldBegin(APPRAISE_STATE_FIELD_DESC);
        oprot.writeString(struct.appraiseState);
        oprot.writeFieldEnd();
      }
      if (struct.aftersaleState != null) {
        oprot.writeFieldBegin(AFTERSALE_STATE_FIELD_DESC);
        oprot.writeString(struct.aftersaleState);
        oprot.writeFieldEnd();
      }
      if (struct.returnState != null) {
        oprot.writeFieldBegin(RETURN_STATE_FIELD_DESC);
        oprot.writeString(struct.returnState);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MyOrderNoEntityTupleSchemeFactory implements SchemeFactory {
    public MyOrderNoEntityTupleScheme getScheme() {
      return new MyOrderNoEntityTupleScheme();
    }
  }

  private static class MyOrderNoEntityTupleScheme extends TupleScheme<MyOrderNoEntity> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MyOrderNoEntity struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetGoodsId()) {
        optionals.set(0);
      }
      if (struct.isSetOrderId()) {
        optionals.set(1);
      }
      if (struct.isSetShopId()) {
        optionals.set(2);
      }
      if (struct.isSetBuyerUid()) {
        optionals.set(3);
      }
      if (struct.isSetSupplierUid()) {
        optionals.set(4);
      }
      if (struct.isSetNum()) {
        optionals.set(5);
      }
      if (struct.isSetMoney()) {
        optionals.set(6);
      }
      if (struct.isSetState()) {
        optionals.set(7);
      }
      if (struct.isSetCode()) {
        optionals.set(8);
      }
      if (struct.isSetMessage()) {
        optionals.set(9);
      }
      if (struct.isSetDateline()) {
        optionals.set(10);
      }
      if (struct.isSetAddressId()) {
        optionals.set(11);
      }
      if (struct.isSetCancelType()) {
        optionals.set(12);
      }
      if (struct.isSetPayType()) {
        optionals.set(13);
      }
      if (struct.isSetUsersId()) {
        optionals.set(14);
      }
      if (struct.isSetRetailPrice()) {
        optionals.set(15);
      }
      if (struct.isSetGoodsName()) {
        optionals.set(16);
      }
      if (struct.isSetFinishDate()) {
        optionals.set(17);
      }
      if (struct.isSetImg()) {
        optionals.set(18);
      }
      if (struct.isSetMyOrderNoEntityLists()) {
        optionals.set(19);
      }
      if (struct.isSetToalMoney()) {
        optionals.set(20);
      }
      if (struct.isSetPageNo()) {
        optionals.set(21);
      }
      if (struct.isSetTotalCount()) {
        optionals.set(22);
      }
      if (struct.isSetSumretailBacLimit()) {
        optionals.set(23);
      }
      if (struct.isSetRebatesDate()) {
        optionals.set(24);
      }
      if (struct.isSetRetailBacLimit()) {
        optionals.set(25);
      }
      if (struct.isSetSkuId()) {
        optionals.set(26);
      }
      if (struct.isSetBarcode()) {
        optionals.set(27);
      }
      if (struct.isSetAppraiseState()) {
        optionals.set(28);
      }
      if (struct.isSetAftersaleState()) {
        optionals.set(29);
      }
      if (struct.isSetReturnState()) {
        optionals.set(30);
      }
      oprot.writeBitSet(optionals, 31);
      if (struct.isSetGoodsId()) {
        oprot.writeString(struct.goodsId);
      }
      if (struct.isSetOrderId()) {
        oprot.writeString(struct.orderId);
      }
      if (struct.isSetShopId()) {
        oprot.writeString(struct.shopId);
      }
      if (struct.isSetBuyerUid()) {
        oprot.writeString(struct.buyerUid);
      }
      if (struct.isSetSupplierUid()) {
        oprot.writeString(struct.supplierUid);
      }
      if (struct.isSetNum()) {
        oprot.writeString(struct.num);
      }
      if (struct.isSetMoney()) {
        oprot.writeString(struct.money);
      }
      if (struct.isSetState()) {
        oprot.writeString(struct.state);
      }
      if (struct.isSetCode()) {
        oprot.writeString(struct.code);
      }
      if (struct.isSetMessage()) {
        oprot.writeString(struct.message);
      }
      if (struct.isSetDateline()) {
        oprot.writeString(struct.dateline);
      }
      if (struct.isSetAddressId()) {
        oprot.writeString(struct.addressId);
      }
      if (struct.isSetCancelType()) {
        oprot.writeString(struct.cancelType);
      }
      if (struct.isSetPayType()) {
        oprot.writeString(struct.payType);
      }
      if (struct.isSetUsersId()) {
        oprot.writeString(struct.usersId);
      }
      if (struct.isSetRetailPrice()) {
        oprot.writeString(struct.retailPrice);
      }
      if (struct.isSetGoodsName()) {
        oprot.writeString(struct.goodsName);
      }
      if (struct.isSetFinishDate()) {
        oprot.writeString(struct.finishDate);
      }
      if (struct.isSetImg()) {
        oprot.writeString(struct.img);
      }
      if (struct.isSetMyOrderNoEntityLists()) {
        {
          oprot.writeI32(struct.myOrderNoEntityLists.size());
          for (MyOrderNoEntity _iter4 : struct.myOrderNoEntityLists)
          {
            _iter4.write(oprot);
          }
        }
      }
      if (struct.isSetToalMoney()) {
        oprot.writeString(struct.toalMoney);
      }
      if (struct.isSetPageNo()) {
        oprot.writeI32(struct.pageNo);
      }
      if (struct.isSetTotalCount()) {
        oprot.writeI32(struct.totalCount);
      }
      if (struct.isSetSumretailBacLimit()) {
        oprot.writeString(struct.sumretailBacLimit);
      }
      if (struct.isSetRebatesDate()) {
        oprot.writeString(struct.rebatesDate);
      }
      if (struct.isSetRetailBacLimit()) {
        oprot.writeString(struct.retailBacLimit);
      }
      if (struct.isSetSkuId()) {
        oprot.writeString(struct.skuId);
      }
      if (struct.isSetBarcode()) {
        oprot.writeString(struct.barcode);
      }
      if (struct.isSetAppraiseState()) {
        oprot.writeString(struct.appraiseState);
      }
      if (struct.isSetAftersaleState()) {
        oprot.writeString(struct.aftersaleState);
      }
      if (struct.isSetReturnState()) {
        oprot.writeString(struct.returnState);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MyOrderNoEntity struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(31);
      if (incoming.get(0)) {
        struct.goodsId = iprot.readString();
        struct.setGoodsIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.orderId = iprot.readString();
        struct.setOrderIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.shopId = iprot.readString();
        struct.setShopIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.buyerUid = iprot.readString();
        struct.setBuyerUidIsSet(true);
      }
      if (incoming.get(4)) {
        struct.supplierUid = iprot.readString();
        struct.setSupplierUidIsSet(true);
      }
      if (incoming.get(5)) {
        struct.num = iprot.readString();
        struct.setNumIsSet(true);
      }
      if (incoming.get(6)) {
        struct.money = iprot.readString();
        struct.setMoneyIsSet(true);
      }
      if (incoming.get(7)) {
        struct.state = iprot.readString();
        struct.setStateIsSet(true);
      }
      if (incoming.get(8)) {
        struct.code = iprot.readString();
        struct.setCodeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.message = iprot.readString();
        struct.setMessageIsSet(true);
      }
      if (incoming.get(10)) {
        struct.dateline = iprot.readString();
        struct.setDatelineIsSet(true);
      }
      if (incoming.get(11)) {
        struct.addressId = iprot.readString();
        struct.setAddressIdIsSet(true);
      }
      if (incoming.get(12)) {
        struct.cancelType = iprot.readString();
        struct.setCancelTypeIsSet(true);
      }
      if (incoming.get(13)) {
        struct.payType = iprot.readString();
        struct.setPayTypeIsSet(true);
      }
      if (incoming.get(14)) {
        struct.usersId = iprot.readString();
        struct.setUsersIdIsSet(true);
      }
      if (incoming.get(15)) {
        struct.retailPrice = iprot.readString();
        struct.setRetailPriceIsSet(true);
      }
      if (incoming.get(16)) {
        struct.goodsName = iprot.readString();
        struct.setGoodsNameIsSet(true);
      }
      if (incoming.get(17)) {
        struct.finishDate = iprot.readString();
        struct.setFinishDateIsSet(true);
      }
      if (incoming.get(18)) {
        struct.img = iprot.readString();
        struct.setImgIsSet(true);
      }
      if (incoming.get(19)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.myOrderNoEntityLists = new ArrayList<MyOrderNoEntity>(_list5.size);
          MyOrderNoEntity _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = new MyOrderNoEntity();
            _elem6.read(iprot);
            struct.myOrderNoEntityLists.add(_elem6);
          }
        }
        struct.setMyOrderNoEntityListsIsSet(true);
      }
      if (incoming.get(20)) {
        struct.toalMoney = iprot.readString();
        struct.setToalMoneyIsSet(true);
      }
      if (incoming.get(21)) {
        struct.pageNo = iprot.readI32();
        struct.setPageNoIsSet(true);
      }
      if (incoming.get(22)) {
        struct.totalCount = iprot.readI32();
        struct.setTotalCountIsSet(true);
      }
      if (incoming.get(23)) {
        struct.sumretailBacLimit = iprot.readString();
        struct.setSumretailBacLimitIsSet(true);
      }
      if (incoming.get(24)) {
        struct.rebatesDate = iprot.readString();
        struct.setRebatesDateIsSet(true);
      }
      if (incoming.get(25)) {
        struct.retailBacLimit = iprot.readString();
        struct.setRetailBacLimitIsSet(true);
      }
      if (incoming.get(26)) {
        struct.skuId = iprot.readString();
        struct.setSkuIdIsSet(true);
      }
      if (incoming.get(27)) {
        struct.barcode = iprot.readString();
        struct.setBarcodeIsSet(true);
      }
      if (incoming.get(28)) {
        struct.appraiseState = iprot.readString();
        struct.setAppraiseStateIsSet(true);
      }
      if (incoming.get(29)) {
        struct.aftersaleState = iprot.readString();
        struct.setAftersaleStateIsSet(true);
      }
      if (incoming.get(30)) {
        struct.returnState = iprot.readString();
        struct.setReturnStateIsSet(true);
      }
    }
  }

}


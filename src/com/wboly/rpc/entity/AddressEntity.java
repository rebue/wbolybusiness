package com.wboly.rpc.entity;

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.EncodingUtils;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import javax.annotation.Generated;

@SuppressWarnings({"rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-11-24")
public class AddressEntity implements org.apache.thrift.TBase<AddressEntity, AddressEntity._Fields>, java.io.Serializable, Cloneable, Comparable<AddressEntity> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AddressEntity");

  private static final org.apache.thrift.protocol.TField ADDRESS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("addressId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PROVINCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("provinceId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField PROVINCE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("provinceName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cityId", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField CITY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cityName", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField AREA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("areaId", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField AREA_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("areaName", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField STREET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("streetId", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField STREET_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("streetName", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("address", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField REAL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("realName", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("phone", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField MOBILE_FIELD_DESC = new org.apache.thrift.protocol.TField("mobile", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField IS_DEFAULT_FIELD_DESC = new org.apache.thrift.protocol.TField("isDefault", org.apache.thrift.protocol.TType.I32, (short)15);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AddressEntityStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AddressEntityTupleSchemeFactory());
  }

  public int addressId; // required
  public String userId; // required
  public int provinceId; // required
  public String provinceName; // required
  public int cityId; // required
  public String cityName; // required
  public int areaId; // required
  public String areaName; // required
  public int streetId; // required
  public String streetName; // required
  public String address; // required
  public String realName; // required
  public String phone; // required
  public String mobile; // required
  public int isDefault; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ADDRESS_ID((short)1, "addressId"),
    USER_ID((short)2, "userId"),
    PROVINCE_ID((short)3, "provinceId"),
    PROVINCE_NAME((short)4, "provinceName"),
    CITY_ID((short)5, "cityId"),
    CITY_NAME((short)6, "cityName"),
    AREA_ID((short)7, "areaId"),
    AREA_NAME((short)8, "areaName"),
    STREET_ID((short)9, "streetId"),
    STREET_NAME((short)10, "streetName"),
    ADDRESS((short)11, "address"),
    REAL_NAME((short)12, "realName"),
    PHONE((short)13, "phone"),
    MOBILE((short)14, "mobile"),
    IS_DEFAULT((short)15, "isDefault");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ADDRESS_ID
          return ADDRESS_ID;
        case 2: // USER_ID
          return USER_ID;
        case 3: // PROVINCE_ID
          return PROVINCE_ID;
        case 4: // PROVINCE_NAME
          return PROVINCE_NAME;
        case 5: // CITY_ID
          return CITY_ID;
        case 6: // CITY_NAME
          return CITY_NAME;
        case 7: // AREA_ID
          return AREA_ID;
        case 8: // AREA_NAME
          return AREA_NAME;
        case 9: // STREET_ID
          return STREET_ID;
        case 10: // STREET_NAME
          return STREET_NAME;
        case 11: // ADDRESS
          return ADDRESS;
        case 12: // REAL_NAME
          return REAL_NAME;
        case 13: // PHONE
          return PHONE;
        case 14: // MOBILE
          return MOBILE;
        case 15: // IS_DEFAULT
          return IS_DEFAULT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ADDRESSID_ISSET_ID = 0;
  private static final int __PROVINCEID_ISSET_ID = 1;
  private static final int __CITYID_ISSET_ID = 2;
  private static final int __AREAID_ISSET_ID = 3;
  private static final int __STREETID_ISSET_ID = 4;
  private static final int __ISDEFAULT_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ADDRESS_ID, new org.apache.thrift.meta_data.FieldMetaData("addressId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROVINCE_ID, new org.apache.thrift.meta_data.FieldMetaData("provinceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROVINCE_NAME, new org.apache.thrift.meta_data.FieldMetaData("provinceName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CITY_ID, new org.apache.thrift.meta_data.FieldMetaData("cityId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CITY_NAME, new org.apache.thrift.meta_data.FieldMetaData("cityName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AREA_ID, new org.apache.thrift.meta_data.FieldMetaData("areaId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AREA_NAME, new org.apache.thrift.meta_data.FieldMetaData("areaName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STREET_ID, new org.apache.thrift.meta_data.FieldMetaData("streetId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STREET_NAME, new org.apache.thrift.meta_data.FieldMetaData("streetName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("address", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REAL_NAME, new org.apache.thrift.meta_data.FieldMetaData("realName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PHONE, new org.apache.thrift.meta_data.FieldMetaData("phone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MOBILE, new org.apache.thrift.meta_data.FieldMetaData("mobile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_DEFAULT, new org.apache.thrift.meta_data.FieldMetaData("isDefault", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AddressEntity.class, metaDataMap);
  }

  public AddressEntity() {
  }

  public AddressEntity(
    int addressId,
    String userId,
    int provinceId,
    String provinceName,
    int cityId,
    String cityName,
    int areaId,
    String areaName,
    int streetId,
    String streetName,
    String address,
    String realName,
    String phone,
    String mobile,
    int isDefault)
  {
    this();
    this.addressId = addressId;
    setAddressIdIsSet(true);
    this.userId = userId;
    this.provinceId = provinceId;
    setProvinceIdIsSet(true);
    this.provinceName = provinceName;
    this.cityId = cityId;
    setCityIdIsSet(true);
    this.cityName = cityName;
    this.areaId = areaId;
    setAreaIdIsSet(true);
    this.areaName = areaName;
    this.streetId = streetId;
    setStreetIdIsSet(true);
    this.streetName = streetName;
    this.address = address;
    this.realName = realName;
    this.phone = phone;
    this.mobile = mobile;
    this.isDefault = isDefault;
    setIsDefaultIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AddressEntity(AddressEntity other) {
    __isset_bitfield = other.__isset_bitfield;
    this.addressId = other.addressId;
    if (other.isSetUserId()) {
      this.userId = other.userId;
    }
    this.provinceId = other.provinceId;
    if (other.isSetProvinceName()) {
      this.provinceName = other.provinceName;
    }
    this.cityId = other.cityId;
    if (other.isSetCityName()) {
      this.cityName = other.cityName;
    }
    this.areaId = other.areaId;
    if (other.isSetAreaName()) {
      this.areaName = other.areaName;
    }
    this.streetId = other.streetId;
    if (other.isSetStreetName()) {
      this.streetName = other.streetName;
    }
    if (other.isSetAddress()) {
      this.address = other.address;
    }
    if (other.isSetRealName()) {
      this.realName = other.realName;
    }
    if (other.isSetPhone()) {
      this.phone = other.phone;
    }
    if (other.isSetMobile()) {
      this.mobile = other.mobile;
    }
    this.isDefault = other.isDefault;
  }

  public AddressEntity deepCopy() {
    return new AddressEntity(this);
  }

  @Override
  public void clear() {
    setAddressIdIsSet(false);
    this.addressId = 0;
    this.userId = null;
    setProvinceIdIsSet(false);
    this.provinceId = 0;
    this.provinceName = null;
    setCityIdIsSet(false);
    this.cityId = 0;
    this.cityName = null;
    setAreaIdIsSet(false);
    this.areaId = 0;
    this.areaName = null;
    setStreetIdIsSet(false);
    this.streetId = 0;
    this.streetName = null;
    this.address = null;
    this.realName = null;
    this.phone = null;
    this.mobile = null;
    setIsDefaultIsSet(false);
    this.isDefault = 0;
  }

  public int getAddressId() {
    return this.addressId;
  }

  public AddressEntity setAddressId(int addressId) {
    this.addressId = addressId;
    setAddressIdIsSet(true);
    return this;
  }

  public void unsetAddressId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ADDRESSID_ISSET_ID);
  }

  /** Returns true if field addressId is set (has been assigned a value) and false otherwise */
  public boolean isSetAddressId() {
    return EncodingUtils.testBit(__isset_bitfield, __ADDRESSID_ISSET_ID);
  }

  public void setAddressIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ADDRESSID_ISSET_ID, value);
  }

  public String getUserId() {
    return this.userId;
  }

  public AddressEntity setUserId(String userId) {
    this.userId = userId;
    return this;
  }

  public void unsetUserId() {
    this.userId = null;
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return this.userId != null;
  }

  public void setUserIdIsSet(boolean value) {
    if (!value) {
      this.userId = null;
    }
  }

  public int getProvinceId() {
    return this.provinceId;
  }

  public AddressEntity setProvinceId(int provinceId) {
    this.provinceId = provinceId;
    setProvinceIdIsSet(true);
    return this;
  }

  public void unsetProvinceId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROVINCEID_ISSET_ID);
  }

  /** Returns true if field provinceId is set (has been assigned a value) and false otherwise */
  public boolean isSetProvinceId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROVINCEID_ISSET_ID);
  }

  public void setProvinceIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROVINCEID_ISSET_ID, value);
  }

  public String getProvinceName() {
    return this.provinceName;
  }

  public AddressEntity setProvinceName(String provinceName) {
    this.provinceName = provinceName;
    return this;
  }

  public void unsetProvinceName() {
    this.provinceName = null;
  }

  /** Returns true if field provinceName is set (has been assigned a value) and false otherwise */
  public boolean isSetProvinceName() {
    return this.provinceName != null;
  }

  public void setProvinceNameIsSet(boolean value) {
    if (!value) {
      this.provinceName = null;
    }
  }

  public int getCityId() {
    return this.cityId;
  }

  public AddressEntity setCityId(int cityId) {
    this.cityId = cityId;
    setCityIdIsSet(true);
    return this;
  }

  public void unsetCityId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CITYID_ISSET_ID);
  }

  /** Returns true if field cityId is set (has been assigned a value) and false otherwise */
  public boolean isSetCityId() {
    return EncodingUtils.testBit(__isset_bitfield, __CITYID_ISSET_ID);
  }

  public void setCityIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CITYID_ISSET_ID, value);
  }

  public String getCityName() {
    return this.cityName;
  }

  public AddressEntity setCityName(String cityName) {
    this.cityName = cityName;
    return this;
  }

  public void unsetCityName() {
    this.cityName = null;
  }

  /** Returns true if field cityName is set (has been assigned a value) and false otherwise */
  public boolean isSetCityName() {
    return this.cityName != null;
  }

  public void setCityNameIsSet(boolean value) {
    if (!value) {
      this.cityName = null;
    }
  }

  public int getAreaId() {
    return this.areaId;
  }

  public AddressEntity setAreaId(int areaId) {
    this.areaId = areaId;
    setAreaIdIsSet(true);
    return this;
  }

  public void unsetAreaId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AREAID_ISSET_ID);
  }

  /** Returns true if field areaId is set (has been assigned a value) and false otherwise */
  public boolean isSetAreaId() {
    return EncodingUtils.testBit(__isset_bitfield, __AREAID_ISSET_ID);
  }

  public void setAreaIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AREAID_ISSET_ID, value);
  }

  public String getAreaName() {
    return this.areaName;
  }

  public AddressEntity setAreaName(String areaName) {
    this.areaName = areaName;
    return this;
  }

  public void unsetAreaName() {
    this.areaName = null;
  }

  /** Returns true if field areaName is set (has been assigned a value) and false otherwise */
  public boolean isSetAreaName() {
    return this.areaName != null;
  }

  public void setAreaNameIsSet(boolean value) {
    if (!value) {
      this.areaName = null;
    }
  }

  public int getStreetId() {
    return this.streetId;
  }

  public AddressEntity setStreetId(int streetId) {
    this.streetId = streetId;
    setStreetIdIsSet(true);
    return this;
  }

  public void unsetStreetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STREETID_ISSET_ID);
  }

  /** Returns true if field streetId is set (has been assigned a value) and false otherwise */
  public boolean isSetStreetId() {
    return EncodingUtils.testBit(__isset_bitfield, __STREETID_ISSET_ID);
  }

  public void setStreetIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STREETID_ISSET_ID, value);
  }

  public String getStreetName() {
    return this.streetName;
  }

  public AddressEntity setStreetName(String streetName) {
    this.streetName = streetName;
    return this;
  }

  public void unsetStreetName() {
    this.streetName = null;
  }

  /** Returns true if field streetName is set (has been assigned a value) and false otherwise */
  public boolean isSetStreetName() {
    return this.streetName != null;
  }

  public void setStreetNameIsSet(boolean value) {
    if (!value) {
      this.streetName = null;
    }
  }

  public String getAddress() {
    return this.address;
  }

  public AddressEntity setAddress(String address) {
    this.address = address;
    return this;
  }

  public void unsetAddress() {
    this.address = null;
  }

  /** Returns true if field address is set (has been assigned a value) and false otherwise */
  public boolean isSetAddress() {
    return this.address != null;
  }

  public void setAddressIsSet(boolean value) {
    if (!value) {
      this.address = null;
    }
  }

  public String getRealName() {
    return this.realName;
  }

  public AddressEntity setRealName(String realName) {
    this.realName = realName;
    return this;
  }

  public void unsetRealName() {
    this.realName = null;
  }

  /** Returns true if field realName is set (has been assigned a value) and false otherwise */
  public boolean isSetRealName() {
    return this.realName != null;
  }

  public void setRealNameIsSet(boolean value) {
    if (!value) {
      this.realName = null;
    }
  }

  public String getPhone() {
    return this.phone;
  }

  public AddressEntity setPhone(String phone) {
    this.phone = phone;
    return this;
  }

  public void unsetPhone() {
    this.phone = null;
  }

  /** Returns true if field phone is set (has been assigned a value) and false otherwise */
  public boolean isSetPhone() {
    return this.phone != null;
  }

  public void setPhoneIsSet(boolean value) {
    if (!value) {
      this.phone = null;
    }
  }

  public String getMobile() {
    return this.mobile;
  }

  public AddressEntity setMobile(String mobile) {
    this.mobile = mobile;
    return this;
  }

  public void unsetMobile() {
    this.mobile = null;
  }

  /** Returns true if field mobile is set (has been assigned a value) and false otherwise */
  public boolean isSetMobile() {
    return this.mobile != null;
  }

  public void setMobileIsSet(boolean value) {
    if (!value) {
      this.mobile = null;
    }
  }

  public int getIsDefault() {
    return this.isDefault;
  }

  public AddressEntity setIsDefault(int isDefault) {
    this.isDefault = isDefault;
    setIsDefaultIsSet(true);
    return this;
  }

  public void unsetIsDefault() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISDEFAULT_ISSET_ID);
  }

  /** Returns true if field isDefault is set (has been assigned a value) and false otherwise */
  public boolean isSetIsDefault() {
    return EncodingUtils.testBit(__isset_bitfield, __ISDEFAULT_ISSET_ID);
  }

  public void setIsDefaultIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISDEFAULT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ADDRESS_ID:
      if (value == null) {
        unsetAddressId();
      } else {
        setAddressId((Integer)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((String)value);
      }
      break;

    case PROVINCE_ID:
      if (value == null) {
        unsetProvinceId();
      } else {
        setProvinceId((Integer)value);
      }
      break;

    case PROVINCE_NAME:
      if (value == null) {
        unsetProvinceName();
      } else {
        setProvinceName((String)value);
      }
      break;

    case CITY_ID:
      if (value == null) {
        unsetCityId();
      } else {
        setCityId((Integer)value);
      }
      break;

    case CITY_NAME:
      if (value == null) {
        unsetCityName();
      } else {
        setCityName((String)value);
      }
      break;

    case AREA_ID:
      if (value == null) {
        unsetAreaId();
      } else {
        setAreaId((Integer)value);
      }
      break;

    case AREA_NAME:
      if (value == null) {
        unsetAreaName();
      } else {
        setAreaName((String)value);
      }
      break;

    case STREET_ID:
      if (value == null) {
        unsetStreetId();
      } else {
        setStreetId((Integer)value);
      }
      break;

    case STREET_NAME:
      if (value == null) {
        unsetStreetName();
      } else {
        setStreetName((String)value);
      }
      break;

    case ADDRESS:
      if (value == null) {
        unsetAddress();
      } else {
        setAddress((String)value);
      }
      break;

    case REAL_NAME:
      if (value == null) {
        unsetRealName();
      } else {
        setRealName((String)value);
      }
      break;

    case PHONE:
      if (value == null) {
        unsetPhone();
      } else {
        setPhone((String)value);
      }
      break;

    case MOBILE:
      if (value == null) {
        unsetMobile();
      } else {
        setMobile((String)value);
      }
      break;

    case IS_DEFAULT:
      if (value == null) {
        unsetIsDefault();
      } else {
        setIsDefault((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ADDRESS_ID:
      return getAddressId();

    case USER_ID:
      return getUserId();

    case PROVINCE_ID:
      return getProvinceId();

    case PROVINCE_NAME:
      return getProvinceName();

    case CITY_ID:
      return getCityId();

    case CITY_NAME:
      return getCityName();

    case AREA_ID:
      return getAreaId();

    case AREA_NAME:
      return getAreaName();

    case STREET_ID:
      return getStreetId();

    case STREET_NAME:
      return getStreetName();

    case ADDRESS:
      return getAddress();

    case REAL_NAME:
      return getRealName();

    case PHONE:
      return getPhone();

    case MOBILE:
      return getMobile();

    case IS_DEFAULT:
      return getIsDefault();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ADDRESS_ID:
      return isSetAddressId();
    case USER_ID:
      return isSetUserId();
    case PROVINCE_ID:
      return isSetProvinceId();
    case PROVINCE_NAME:
      return isSetProvinceName();
    case CITY_ID:
      return isSetCityId();
    case CITY_NAME:
      return isSetCityName();
    case AREA_ID:
      return isSetAreaId();
    case AREA_NAME:
      return isSetAreaName();
    case STREET_ID:
      return isSetStreetId();
    case STREET_NAME:
      return isSetStreetName();
    case ADDRESS:
      return isSetAddress();
    case REAL_NAME:
      return isSetRealName();
    case PHONE:
      return isSetPhone();
    case MOBILE:
      return isSetMobile();
    case IS_DEFAULT:
      return isSetIsDefault();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AddressEntity)
      return this.equals((AddressEntity)that);
    return false;
  }

  public boolean equals(AddressEntity that) {
    if (that == null)
      return false;

    boolean this_present_addressId = true;
    boolean that_present_addressId = true;
    if (this_present_addressId || that_present_addressId) {
      if (!(this_present_addressId && that_present_addressId))
        return false;
      if (this.addressId != that.addressId)
        return false;
    }

    boolean this_present_userId = true && this.isSetUserId();
    boolean that_present_userId = true && that.isSetUserId();
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (!this.userId.equals(that.userId))
        return false;
    }

    boolean this_present_provinceId = true;
    boolean that_present_provinceId = true;
    if (this_present_provinceId || that_present_provinceId) {
      if (!(this_present_provinceId && that_present_provinceId))
        return false;
      if (this.provinceId != that.provinceId)
        return false;
    }

    boolean this_present_provinceName = true && this.isSetProvinceName();
    boolean that_present_provinceName = true && that.isSetProvinceName();
    if (this_present_provinceName || that_present_provinceName) {
      if (!(this_present_provinceName && that_present_provinceName))
        return false;
      if (!this.provinceName.equals(that.provinceName))
        return false;
    }

    boolean this_present_cityId = true;
    boolean that_present_cityId = true;
    if (this_present_cityId || that_present_cityId) {
      if (!(this_present_cityId && that_present_cityId))
        return false;
      if (this.cityId != that.cityId)
        return false;
    }

    boolean this_present_cityName = true && this.isSetCityName();
    boolean that_present_cityName = true && that.isSetCityName();
    if (this_present_cityName || that_present_cityName) {
      if (!(this_present_cityName && that_present_cityName))
        return false;
      if (!this.cityName.equals(that.cityName))
        return false;
    }

    boolean this_present_areaId = true;
    boolean that_present_areaId = true;
    if (this_present_areaId || that_present_areaId) {
      if (!(this_present_areaId && that_present_areaId))
        return false;
      if (this.areaId != that.areaId)
        return false;
    }

    boolean this_present_areaName = true && this.isSetAreaName();
    boolean that_present_areaName = true && that.isSetAreaName();
    if (this_present_areaName || that_present_areaName) {
      if (!(this_present_areaName && that_present_areaName))
        return false;
      if (!this.areaName.equals(that.areaName))
        return false;
    }

    boolean this_present_streetId = true;
    boolean that_present_streetId = true;
    if (this_present_streetId || that_present_streetId) {
      if (!(this_present_streetId && that_present_streetId))
        return false;
      if (this.streetId != that.streetId)
        return false;
    }

    boolean this_present_streetName = true && this.isSetStreetName();
    boolean that_present_streetName = true && that.isSetStreetName();
    if (this_present_streetName || that_present_streetName) {
      if (!(this_present_streetName && that_present_streetName))
        return false;
      if (!this.streetName.equals(that.streetName))
        return false;
    }

    boolean this_present_address = true && this.isSetAddress();
    boolean that_present_address = true && that.isSetAddress();
    if (this_present_address || that_present_address) {
      if (!(this_present_address && that_present_address))
        return false;
      if (!this.address.equals(that.address))
        return false;
    }

    boolean this_present_realName = true && this.isSetRealName();
    boolean that_present_realName = true && that.isSetRealName();
    if (this_present_realName || that_present_realName) {
      if (!(this_present_realName && that_present_realName))
        return false;
      if (!this.realName.equals(that.realName))
        return false;
    }

    boolean this_present_phone = true && this.isSetPhone();
    boolean that_present_phone = true && that.isSetPhone();
    if (this_present_phone || that_present_phone) {
      if (!(this_present_phone && that_present_phone))
        return false;
      if (!this.phone.equals(that.phone))
        return false;
    }

    boolean this_present_mobile = true && this.isSetMobile();
    boolean that_present_mobile = true && that.isSetMobile();
    if (this_present_mobile || that_present_mobile) {
      if (!(this_present_mobile && that_present_mobile))
        return false;
      if (!this.mobile.equals(that.mobile))
        return false;
    }

    boolean this_present_isDefault = true;
    boolean that_present_isDefault = true;
    if (this_present_isDefault || that_present_isDefault) {
      if (!(this_present_isDefault && that_present_isDefault))
        return false;
      if (this.isDefault != that.isDefault)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_addressId = true;
    list.add(present_addressId);
    if (present_addressId)
      list.add(addressId);

    boolean present_userId = true && (isSetUserId());
    list.add(present_userId);
    if (present_userId)
      list.add(userId);

    boolean present_provinceId = true;
    list.add(present_provinceId);
    if (present_provinceId)
      list.add(provinceId);

    boolean present_provinceName = true && (isSetProvinceName());
    list.add(present_provinceName);
    if (present_provinceName)
      list.add(provinceName);

    boolean present_cityId = true;
    list.add(present_cityId);
    if (present_cityId)
      list.add(cityId);

    boolean present_cityName = true && (isSetCityName());
    list.add(present_cityName);
    if (present_cityName)
      list.add(cityName);

    boolean present_areaId = true;
    list.add(present_areaId);
    if (present_areaId)
      list.add(areaId);

    boolean present_areaName = true && (isSetAreaName());
    list.add(present_areaName);
    if (present_areaName)
      list.add(areaName);

    boolean present_streetId = true;
    list.add(present_streetId);
    if (present_streetId)
      list.add(streetId);

    boolean present_streetName = true && (isSetStreetName());
    list.add(present_streetName);
    if (present_streetName)
      list.add(streetName);

    boolean present_address = true && (isSetAddress());
    list.add(present_address);
    if (present_address)
      list.add(address);

    boolean present_realName = true && (isSetRealName());
    list.add(present_realName);
    if (present_realName)
      list.add(realName);

    boolean present_phone = true && (isSetPhone());
    list.add(present_phone);
    if (present_phone)
      list.add(phone);

    boolean present_mobile = true && (isSetMobile());
    list.add(present_mobile);
    if (present_mobile)
      list.add(mobile);

    boolean present_isDefault = true;
    list.add(present_isDefault);
    if (present_isDefault)
      list.add(isDefault);

    return list.hashCode();
  }

  @Override
  public int compareTo(AddressEntity other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAddressId()).compareTo(other.isSetAddressId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddressId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addressId, other.addressId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProvinceId()).compareTo(other.isSetProvinceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProvinceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.provinceId, other.provinceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProvinceName()).compareTo(other.isSetProvinceName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProvinceName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.provinceName, other.provinceName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCityId()).compareTo(other.isSetCityId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCityId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cityId, other.cityId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCityName()).compareTo(other.isSetCityName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCityName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cityName, other.cityName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAreaId()).compareTo(other.isSetAreaId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAreaId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.areaId, other.areaId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAreaName()).compareTo(other.isSetAreaName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAreaName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.areaName, other.areaName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStreetId()).compareTo(other.isSetStreetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStreetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.streetId, other.streetId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStreetName()).compareTo(other.isSetStreetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStreetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.streetName, other.streetName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddress()).compareTo(other.isSetAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.address, other.address);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRealName()).compareTo(other.isSetRealName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRealName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realName, other.realName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhone()).compareTo(other.isSetPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phone, other.phone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMobile()).compareTo(other.isSetMobile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMobile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobile, other.mobile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsDefault()).compareTo(other.isSetIsDefault());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsDefault()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isDefault, other.isDefault);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AddressEntity(");
    boolean first = true;

    sb.append("addressId:");
    sb.append(this.addressId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userId:");
    if (this.userId == null) {
      sb.append("null");
    } else {
      sb.append(this.userId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("provinceId:");
    sb.append(this.provinceId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("provinceName:");
    if (this.provinceName == null) {
      sb.append("null");
    } else {
      sb.append(this.provinceName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cityId:");
    sb.append(this.cityId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cityName:");
    if (this.cityName == null) {
      sb.append("null");
    } else {
      sb.append(this.cityName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("areaId:");
    sb.append(this.areaId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("areaName:");
    if (this.areaName == null) {
      sb.append("null");
    } else {
      sb.append(this.areaName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("streetId:");
    sb.append(this.streetId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("streetName:");
    if (this.streetName == null) {
      sb.append("null");
    } else {
      sb.append(this.streetName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("address:");
    if (this.address == null) {
      sb.append("null");
    } else {
      sb.append(this.address);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("realName:");
    if (this.realName == null) {
      sb.append("null");
    } else {
      sb.append(this.realName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("phone:");
    if (this.phone == null) {
      sb.append("null");
    } else {
      sb.append(this.phone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mobile:");
    if (this.mobile == null) {
      sb.append("null");
    } else {
      sb.append(this.mobile);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isDefault:");
    sb.append(this.isDefault);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AddressEntityStandardSchemeFactory implements SchemeFactory {
    public AddressEntityStandardScheme getScheme() {
      return new AddressEntityStandardScheme();
    }
  }

  private static class AddressEntityStandardScheme extends StandardScheme<AddressEntity> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AddressEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ADDRESS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.addressId = iprot.readI32();
              struct.setAddressIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userId = iprot.readString();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PROVINCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.provinceId = iprot.readI32();
              struct.setProvinceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PROVINCE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.provinceName = iprot.readString();
              struct.setProvinceNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CITY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cityId = iprot.readI32();
              struct.setCityIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CITY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cityName = iprot.readString();
              struct.setCityNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // AREA_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.areaId = iprot.readI32();
              struct.setAreaIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // AREA_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.areaName = iprot.readString();
              struct.setAreaNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // STREET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.streetId = iprot.readI32();
              struct.setStreetIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // STREET_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.streetName = iprot.readString();
              struct.setStreetNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.address = iprot.readString();
              struct.setAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // REAL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.realName = iprot.readString();
              struct.setRealNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.phone = iprot.readString();
              struct.setPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // MOBILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mobile = iprot.readString();
              struct.setMobileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // IS_DEFAULT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isDefault = iprot.readI32();
              struct.setIsDefaultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AddressEntity struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ADDRESS_ID_FIELD_DESC);
      oprot.writeI32(struct.addressId);
      oprot.writeFieldEnd();
      if (struct.userId != null) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeString(struct.userId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PROVINCE_ID_FIELD_DESC);
      oprot.writeI32(struct.provinceId);
      oprot.writeFieldEnd();
      if (struct.provinceName != null) {
        oprot.writeFieldBegin(PROVINCE_NAME_FIELD_DESC);
        oprot.writeString(struct.provinceName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CITY_ID_FIELD_DESC);
      oprot.writeI32(struct.cityId);
      oprot.writeFieldEnd();
      if (struct.cityName != null) {
        oprot.writeFieldBegin(CITY_NAME_FIELD_DESC);
        oprot.writeString(struct.cityName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(AREA_ID_FIELD_DESC);
      oprot.writeI32(struct.areaId);
      oprot.writeFieldEnd();
      if (struct.areaName != null) {
        oprot.writeFieldBegin(AREA_NAME_FIELD_DESC);
        oprot.writeString(struct.areaName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STREET_ID_FIELD_DESC);
      oprot.writeI32(struct.streetId);
      oprot.writeFieldEnd();
      if (struct.streetName != null) {
        oprot.writeFieldBegin(STREET_NAME_FIELD_DESC);
        oprot.writeString(struct.streetName);
        oprot.writeFieldEnd();
      }
      if (struct.address != null) {
        oprot.writeFieldBegin(ADDRESS_FIELD_DESC);
        oprot.writeString(struct.address);
        oprot.writeFieldEnd();
      }
      if (struct.realName != null) {
        oprot.writeFieldBegin(REAL_NAME_FIELD_DESC);
        oprot.writeString(struct.realName);
        oprot.writeFieldEnd();
      }
      if (struct.phone != null) {
        oprot.writeFieldBegin(PHONE_FIELD_DESC);
        oprot.writeString(struct.phone);
        oprot.writeFieldEnd();
      }
      if (struct.mobile != null) {
        oprot.writeFieldBegin(MOBILE_FIELD_DESC);
        oprot.writeString(struct.mobile);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_DEFAULT_FIELD_DESC);
      oprot.writeI32(struct.isDefault);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AddressEntityTupleSchemeFactory implements SchemeFactory {
    public AddressEntityTupleScheme getScheme() {
      return new AddressEntityTupleScheme();
    }
  }

  private static class AddressEntityTupleScheme extends TupleScheme<AddressEntity> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AddressEntity struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAddressId()) {
        optionals.set(0);
      }
      if (struct.isSetUserId()) {
        optionals.set(1);
      }
      if (struct.isSetProvinceId()) {
        optionals.set(2);
      }
      if (struct.isSetProvinceName()) {
        optionals.set(3);
      }
      if (struct.isSetCityId()) {
        optionals.set(4);
      }
      if (struct.isSetCityName()) {
        optionals.set(5);
      }
      if (struct.isSetAreaId()) {
        optionals.set(6);
      }
      if (struct.isSetAreaName()) {
        optionals.set(7);
      }
      if (struct.isSetStreetId()) {
        optionals.set(8);
      }
      if (struct.isSetStreetName()) {
        optionals.set(9);
      }
      if (struct.isSetAddress()) {
        optionals.set(10);
      }
      if (struct.isSetRealName()) {
        optionals.set(11);
      }
      if (struct.isSetPhone()) {
        optionals.set(12);
      }
      if (struct.isSetMobile()) {
        optionals.set(13);
      }
      if (struct.isSetIsDefault()) {
        optionals.set(14);
      }
      oprot.writeBitSet(optionals, 15);
      if (struct.isSetAddressId()) {
        oprot.writeI32(struct.addressId);
      }
      if (struct.isSetUserId()) {
        oprot.writeString(struct.userId);
      }
      if (struct.isSetProvinceId()) {
        oprot.writeI32(struct.provinceId);
      }
      if (struct.isSetProvinceName()) {
        oprot.writeString(struct.provinceName);
      }
      if (struct.isSetCityId()) {
        oprot.writeI32(struct.cityId);
      }
      if (struct.isSetCityName()) {
        oprot.writeString(struct.cityName);
      }
      if (struct.isSetAreaId()) {
        oprot.writeI32(struct.areaId);
      }
      if (struct.isSetAreaName()) {
        oprot.writeString(struct.areaName);
      }
      if (struct.isSetStreetId()) {
        oprot.writeI32(struct.streetId);
      }
      if (struct.isSetStreetName()) {
        oprot.writeString(struct.streetName);
      }
      if (struct.isSetAddress()) {
        oprot.writeString(struct.address);
      }
      if (struct.isSetRealName()) {
        oprot.writeString(struct.realName);
      }
      if (struct.isSetPhone()) {
        oprot.writeString(struct.phone);
      }
      if (struct.isSetMobile()) {
        oprot.writeString(struct.mobile);
      }
      if (struct.isSetIsDefault()) {
        oprot.writeI32(struct.isDefault);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AddressEntity struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(15);
      if (incoming.get(0)) {
        struct.addressId = iprot.readI32();
        struct.setAddressIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.userId = iprot.readString();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.provinceId = iprot.readI32();
        struct.setProvinceIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.provinceName = iprot.readString();
        struct.setProvinceNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.cityId = iprot.readI32();
        struct.setCityIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.cityName = iprot.readString();
        struct.setCityNameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.areaId = iprot.readI32();
        struct.setAreaIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.areaName = iprot.readString();
        struct.setAreaNameIsSet(true);
      }
      if (incoming.get(8)) {
        struct.streetId = iprot.readI32();
        struct.setStreetIdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.streetName = iprot.readString();
        struct.setStreetNameIsSet(true);
      }
      if (incoming.get(10)) {
        struct.address = iprot.readString();
        struct.setAddressIsSet(true);
      }
      if (incoming.get(11)) {
        struct.realName = iprot.readString();
        struct.setRealNameIsSet(true);
      }
      if (incoming.get(12)) {
        struct.phone = iprot.readString();
        struct.setPhoneIsSet(true);
      }
      if (incoming.get(13)) {
        struct.mobile = iprot.readString();
        struct.setMobileIsSet(true);
      }
      if (incoming.get(14)) {
        struct.isDefault = iprot.readI32();
        struct.setIsDefaultIsSet(true);
      }
    }
  }

}


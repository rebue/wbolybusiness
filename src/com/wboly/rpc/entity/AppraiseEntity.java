package com.wboly.rpc.entity;

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.EncodingUtils;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import javax.annotation.Generated;

@SuppressWarnings({"rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-11-24")
public class AppraiseEntity implements org.apache.thrift.TBase<AppraiseEntity, AppraiseEntity._Fields>, java.io.Serializable, Cloneable, Comparable<AppraiseEntity> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppraiseEntity");

  private static final org.apache.thrift.protocol.TField BUYER_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("buyerUid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField BUYER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("buyerName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField GOODS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("goodsId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField REPLY_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("replyMessage", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField DATELINE_FIELD_DESC = new org.apache.thrift.protocol.TField("dateline", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField SHOP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("shopId", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField IS_IMG_FIELD_DESC = new org.apache.thrift.protocol.TField("isImg", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField IMGS_FIELD_DESC = new org.apache.thrift.protocol.TField("imgs", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("limit", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField BABYEVALUATION_FIELD_DESC = new org.apache.thrift.protocol.TField("babyevaluation", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField LOGI_STICS_SERVICE_FIELD_DESC = new org.apache.thrift.protocol.TField("logiSticsService", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField SELLER_SERVICE_FIELD_DESC = new org.apache.thrift.protocol.TField("sellerService", org.apache.thrift.protocol.TType.I32, (short)15);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AppraiseEntityStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AppraiseEntityTupleSchemeFactory());
  }

  public String buyerUid; // required
  public String buyerName; // required
  public int goodsId; // required
  public String content; // required
  public String replyMessage; // required
  public String dateline; // required
  public String shopId; // required
  public int isImg; // required
  public String imgs; // required
  public int limit; // required
  public int start; // required
  public int type; // required
  public int babyevaluation; // required
  public int logiSticsService; // required
  public int sellerService; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BUYER_UID((short)1, "buyerUid"),
    BUYER_NAME((short)2, "buyerName"),
    GOODS_ID((short)3, "goodsId"),
    CONTENT((short)4, "content"),
    REPLY_MESSAGE((short)5, "replyMessage"),
    DATELINE((short)6, "dateline"),
    SHOP_ID((short)7, "shopId"),
    IS_IMG((short)8, "isImg"),
    IMGS((short)9, "imgs"),
    LIMIT((short)10, "limit"),
    START((short)11, "start"),
    TYPE((short)12, "type"),
    BABYEVALUATION((short)13, "babyevaluation"),
    LOGI_STICS_SERVICE((short)14, "logiSticsService"),
    SELLER_SERVICE((short)15, "sellerService");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BUYER_UID
          return BUYER_UID;
        case 2: // BUYER_NAME
          return BUYER_NAME;
        case 3: // GOODS_ID
          return GOODS_ID;
        case 4: // CONTENT
          return CONTENT;
        case 5: // REPLY_MESSAGE
          return REPLY_MESSAGE;
        case 6: // DATELINE
          return DATELINE;
        case 7: // SHOP_ID
          return SHOP_ID;
        case 8: // IS_IMG
          return IS_IMG;
        case 9: // IMGS
          return IMGS;
        case 10: // LIMIT
          return LIMIT;
        case 11: // START
          return START;
        case 12: // TYPE
          return TYPE;
        case 13: // BABYEVALUATION
          return BABYEVALUATION;
        case 14: // LOGI_STICS_SERVICE
          return LOGI_STICS_SERVICE;
        case 15: // SELLER_SERVICE
          return SELLER_SERVICE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __GOODSID_ISSET_ID = 0;
  private static final int __ISIMG_ISSET_ID = 1;
  private static final int __LIMIT_ISSET_ID = 2;
  private static final int __START_ISSET_ID = 3;
  private static final int __TYPE_ISSET_ID = 4;
  private static final int __BABYEVALUATION_ISSET_ID = 5;
  private static final int __LOGISTICSSERVICE_ISSET_ID = 6;
  private static final int __SELLERSERVICE_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BUYER_UID, new org.apache.thrift.meta_data.FieldMetaData("buyerUid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUYER_NAME, new org.apache.thrift.meta_data.FieldMetaData("buyerName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GOODS_ID, new org.apache.thrift.meta_data.FieldMetaData("goodsId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPLY_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("replyMessage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATELINE, new org.apache.thrift.meta_data.FieldMetaData("dateline", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHOP_ID, new org.apache.thrift.meta_data.FieldMetaData("shopId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_IMG, new org.apache.thrift.meta_data.FieldMetaData("isImg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IMGS, new org.apache.thrift.meta_data.FieldMetaData("imgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LIMIT, new org.apache.thrift.meta_data.FieldMetaData("limit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BABYEVALUATION, new org.apache.thrift.meta_data.FieldMetaData("babyevaluation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOGI_STICS_SERVICE, new org.apache.thrift.meta_data.FieldMetaData("logiSticsService", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SELLER_SERVICE, new org.apache.thrift.meta_data.FieldMetaData("sellerService", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AppraiseEntity.class, metaDataMap);
  }

  public AppraiseEntity() {
  }

  public AppraiseEntity(
    String buyerUid,
    String buyerName,
    int goodsId,
    String content,
    String replyMessage,
    String dateline,
    String shopId,
    int isImg,
    String imgs,
    int limit,
    int start,
    int type,
    int babyevaluation,
    int logiSticsService,
    int sellerService)
  {
    this();
    this.buyerUid = buyerUid;
    this.buyerName = buyerName;
    this.goodsId = goodsId;
    setGoodsIdIsSet(true);
    this.content = content;
    this.replyMessage = replyMessage;
    this.dateline = dateline;
    this.shopId = shopId;
    this.isImg = isImg;
    setIsImgIsSet(true);
    this.imgs = imgs;
    this.limit = limit;
    setLimitIsSet(true);
    this.start = start;
    setStartIsSet(true);
    this.type = type;
    setTypeIsSet(true);
    this.babyevaluation = babyevaluation;
    setBabyevaluationIsSet(true);
    this.logiSticsService = logiSticsService;
    setLogiSticsServiceIsSet(true);
    this.sellerService = sellerService;
    setSellerServiceIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AppraiseEntity(AppraiseEntity other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetBuyerUid()) {
      this.buyerUid = other.buyerUid;
    }
    if (other.isSetBuyerName()) {
      this.buyerName = other.buyerName;
    }
    this.goodsId = other.goodsId;
    if (other.isSetContent()) {
      this.content = other.content;
    }
    if (other.isSetReplyMessage()) {
      this.replyMessage = other.replyMessage;
    }
    if (other.isSetDateline()) {
      this.dateline = other.dateline;
    }
    if (other.isSetShopId()) {
      this.shopId = other.shopId;
    }
    this.isImg = other.isImg;
    if (other.isSetImgs()) {
      this.imgs = other.imgs;
    }
    this.limit = other.limit;
    this.start = other.start;
    this.type = other.type;
    this.babyevaluation = other.babyevaluation;
    this.logiSticsService = other.logiSticsService;
    this.sellerService = other.sellerService;
  }

  public AppraiseEntity deepCopy() {
    return new AppraiseEntity(this);
  }

  @Override
  public void clear() {
    this.buyerUid = null;
    this.buyerName = null;
    setGoodsIdIsSet(false);
    this.goodsId = 0;
    this.content = null;
    this.replyMessage = null;
    this.dateline = null;
    this.shopId = null;
    setIsImgIsSet(false);
    this.isImg = 0;
    this.imgs = null;
    setLimitIsSet(false);
    this.limit = 0;
    setStartIsSet(false);
    this.start = 0;
    setTypeIsSet(false);
    this.type = 0;
    setBabyevaluationIsSet(false);
    this.babyevaluation = 0;
    setLogiSticsServiceIsSet(false);
    this.logiSticsService = 0;
    setSellerServiceIsSet(false);
    this.sellerService = 0;
  }

  public String getBuyerUid() {
    return this.buyerUid;
  }

  public AppraiseEntity setBuyerUid(String buyerUid) {
    this.buyerUid = buyerUid;
    return this;
  }

  public void unsetBuyerUid() {
    this.buyerUid = null;
  }

  /** Returns true if field buyerUid is set (has been assigned a value) and false otherwise */
  public boolean isSetBuyerUid() {
    return this.buyerUid != null;
  }

  public void setBuyerUidIsSet(boolean value) {
    if (!value) {
      this.buyerUid = null;
    }
  }

  public String getBuyerName() {
    return this.buyerName;
  }

  public AppraiseEntity setBuyerName(String buyerName) {
    this.buyerName = buyerName;
    return this;
  }

  public void unsetBuyerName() {
    this.buyerName = null;
  }

  /** Returns true if field buyerName is set (has been assigned a value) and false otherwise */
  public boolean isSetBuyerName() {
    return this.buyerName != null;
  }

  public void setBuyerNameIsSet(boolean value) {
    if (!value) {
      this.buyerName = null;
    }
  }

  public int getGoodsId() {
    return this.goodsId;
  }

  public AppraiseEntity setGoodsId(int goodsId) {
    this.goodsId = goodsId;
    setGoodsIdIsSet(true);
    return this;
  }

  public void unsetGoodsId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GOODSID_ISSET_ID);
  }

  /** Returns true if field goodsId is set (has been assigned a value) and false otherwise */
  public boolean isSetGoodsId() {
    return EncodingUtils.testBit(__isset_bitfield, __GOODSID_ISSET_ID);
  }

  public void setGoodsIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GOODSID_ISSET_ID, value);
  }

  public String getContent() {
    return this.content;
  }

  public AppraiseEntity setContent(String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public String getReplyMessage() {
    return this.replyMessage;
  }

  public AppraiseEntity setReplyMessage(String replyMessage) {
    this.replyMessage = replyMessage;
    return this;
  }

  public void unsetReplyMessage() {
    this.replyMessage = null;
  }

  /** Returns true if field replyMessage is set (has been assigned a value) and false otherwise */
  public boolean isSetReplyMessage() {
    return this.replyMessage != null;
  }

  public void setReplyMessageIsSet(boolean value) {
    if (!value) {
      this.replyMessage = null;
    }
  }

  public String getDateline() {
    return this.dateline;
  }

  public AppraiseEntity setDateline(String dateline) {
    this.dateline = dateline;
    return this;
  }

  public void unsetDateline() {
    this.dateline = null;
  }

  /** Returns true if field dateline is set (has been assigned a value) and false otherwise */
  public boolean isSetDateline() {
    return this.dateline != null;
  }

  public void setDatelineIsSet(boolean value) {
    if (!value) {
      this.dateline = null;
    }
  }

  public String getShopId() {
    return this.shopId;
  }

  public AppraiseEntity setShopId(String shopId) {
    this.shopId = shopId;
    return this;
  }

  public void unsetShopId() {
    this.shopId = null;
  }

  /** Returns true if field shopId is set (has been assigned a value) and false otherwise */
  public boolean isSetShopId() {
    return this.shopId != null;
  }

  public void setShopIdIsSet(boolean value) {
    if (!value) {
      this.shopId = null;
    }
  }

  public int getIsImg() {
    return this.isImg;
  }

  public AppraiseEntity setIsImg(int isImg) {
    this.isImg = isImg;
    setIsImgIsSet(true);
    return this;
  }

  public void unsetIsImg() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISIMG_ISSET_ID);
  }

  /** Returns true if field isImg is set (has been assigned a value) and false otherwise */
  public boolean isSetIsImg() {
    return EncodingUtils.testBit(__isset_bitfield, __ISIMG_ISSET_ID);
  }

  public void setIsImgIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISIMG_ISSET_ID, value);
  }

  public String getImgs() {
    return this.imgs;
  }

  public AppraiseEntity setImgs(String imgs) {
    this.imgs = imgs;
    return this;
  }

  public void unsetImgs() {
    this.imgs = null;
  }

  /** Returns true if field imgs is set (has been assigned a value) and false otherwise */
  public boolean isSetImgs() {
    return this.imgs != null;
  }

  public void setImgsIsSet(boolean value) {
    if (!value) {
      this.imgs = null;
    }
  }

  public int getLimit() {
    return this.limit;
  }

  public AppraiseEntity setLimit(int limit) {
    this.limit = limit;
    setLimitIsSet(true);
    return this;
  }

  public void unsetLimit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMIT_ISSET_ID);
  }

  /** Returns true if field limit is set (has been assigned a value) and false otherwise */
  public boolean isSetLimit() {
    return EncodingUtils.testBit(__isset_bitfield, __LIMIT_ISSET_ID);
  }

  public void setLimitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMIT_ISSET_ID, value);
  }

  public int getStart() {
    return this.start;
  }

  public AppraiseEntity setStart(int start) {
    this.start = start;
    setStartIsSet(true);
    return this;
  }

  public void unsetStart() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __START_ISSET_ID);
  }

  /** Returns true if field start is set (has been assigned a value) and false otherwise */
  public boolean isSetStart() {
    return EncodingUtils.testBit(__isset_bitfield, __START_ISSET_ID);
  }

  public void setStartIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __START_ISSET_ID, value);
  }

  public int getType() {
    return this.type;
  }

  public AppraiseEntity setType(int type) {
    this.type = type;
    setTypeIsSet(true);
    return this;
  }

  public void unsetType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  public void setTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
  }

  public int getBabyevaluation() {
    return this.babyevaluation;
  }

  public AppraiseEntity setBabyevaluation(int babyevaluation) {
    this.babyevaluation = babyevaluation;
    setBabyevaluationIsSet(true);
    return this;
  }

  public void unsetBabyevaluation() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BABYEVALUATION_ISSET_ID);
  }

  /** Returns true if field babyevaluation is set (has been assigned a value) and false otherwise */
  public boolean isSetBabyevaluation() {
    return EncodingUtils.testBit(__isset_bitfield, __BABYEVALUATION_ISSET_ID);
  }

  public void setBabyevaluationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BABYEVALUATION_ISSET_ID, value);
  }

  public int getLogiSticsService() {
    return this.logiSticsService;
  }

  public AppraiseEntity setLogiSticsService(int logiSticsService) {
    this.logiSticsService = logiSticsService;
    setLogiSticsServiceIsSet(true);
    return this;
  }

  public void unsetLogiSticsService() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOGISTICSSERVICE_ISSET_ID);
  }

  /** Returns true if field logiSticsService is set (has been assigned a value) and false otherwise */
  public boolean isSetLogiSticsService() {
    return EncodingUtils.testBit(__isset_bitfield, __LOGISTICSSERVICE_ISSET_ID);
  }

  public void setLogiSticsServiceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOGISTICSSERVICE_ISSET_ID, value);
  }

  public int getSellerService() {
    return this.sellerService;
  }

  public AppraiseEntity setSellerService(int sellerService) {
    this.sellerService = sellerService;
    setSellerServiceIsSet(true);
    return this;
  }

  public void unsetSellerService() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SELLERSERVICE_ISSET_ID);
  }

  /** Returns true if field sellerService is set (has been assigned a value) and false otherwise */
  public boolean isSetSellerService() {
    return EncodingUtils.testBit(__isset_bitfield, __SELLERSERVICE_ISSET_ID);
  }

  public void setSellerServiceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SELLERSERVICE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BUYER_UID:
      if (value == null) {
        unsetBuyerUid();
      } else {
        setBuyerUid((String)value);
      }
      break;

    case BUYER_NAME:
      if (value == null) {
        unsetBuyerName();
      } else {
        setBuyerName((String)value);
      }
      break;

    case GOODS_ID:
      if (value == null) {
        unsetGoodsId();
      } else {
        setGoodsId((Integer)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;

    case REPLY_MESSAGE:
      if (value == null) {
        unsetReplyMessage();
      } else {
        setReplyMessage((String)value);
      }
      break;

    case DATELINE:
      if (value == null) {
        unsetDateline();
      } else {
        setDateline((String)value);
      }
      break;

    case SHOP_ID:
      if (value == null) {
        unsetShopId();
      } else {
        setShopId((String)value);
      }
      break;

    case IS_IMG:
      if (value == null) {
        unsetIsImg();
      } else {
        setIsImg((Integer)value);
      }
      break;

    case IMGS:
      if (value == null) {
        unsetImgs();
      } else {
        setImgs((String)value);
      }
      break;

    case LIMIT:
      if (value == null) {
        unsetLimit();
      } else {
        setLimit((Integer)value);
      }
      break;

    case START:
      if (value == null) {
        unsetStart();
      } else {
        setStart((Integer)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((Integer)value);
      }
      break;

    case BABYEVALUATION:
      if (value == null) {
        unsetBabyevaluation();
      } else {
        setBabyevaluation((Integer)value);
      }
      break;

    case LOGI_STICS_SERVICE:
      if (value == null) {
        unsetLogiSticsService();
      } else {
        setLogiSticsService((Integer)value);
      }
      break;

    case SELLER_SERVICE:
      if (value == null) {
        unsetSellerService();
      } else {
        setSellerService((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BUYER_UID:
      return getBuyerUid();

    case BUYER_NAME:
      return getBuyerName();

    case GOODS_ID:
      return getGoodsId();

    case CONTENT:
      return getContent();

    case REPLY_MESSAGE:
      return getReplyMessage();

    case DATELINE:
      return getDateline();

    case SHOP_ID:
      return getShopId();

    case IS_IMG:
      return getIsImg();

    case IMGS:
      return getImgs();

    case LIMIT:
      return getLimit();

    case START:
      return getStart();

    case TYPE:
      return getType();

    case BABYEVALUATION:
      return getBabyevaluation();

    case LOGI_STICS_SERVICE:
      return getLogiSticsService();

    case SELLER_SERVICE:
      return getSellerService();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BUYER_UID:
      return isSetBuyerUid();
    case BUYER_NAME:
      return isSetBuyerName();
    case GOODS_ID:
      return isSetGoodsId();
    case CONTENT:
      return isSetContent();
    case REPLY_MESSAGE:
      return isSetReplyMessage();
    case DATELINE:
      return isSetDateline();
    case SHOP_ID:
      return isSetShopId();
    case IS_IMG:
      return isSetIsImg();
    case IMGS:
      return isSetImgs();
    case LIMIT:
      return isSetLimit();
    case START:
      return isSetStart();
    case TYPE:
      return isSetType();
    case BABYEVALUATION:
      return isSetBabyevaluation();
    case LOGI_STICS_SERVICE:
      return isSetLogiSticsService();
    case SELLER_SERVICE:
      return isSetSellerService();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AppraiseEntity)
      return this.equals((AppraiseEntity)that);
    return false;
  }

  public boolean equals(AppraiseEntity that) {
    if (that == null)
      return false;

    boolean this_present_buyerUid = true && this.isSetBuyerUid();
    boolean that_present_buyerUid = true && that.isSetBuyerUid();
    if (this_present_buyerUid || that_present_buyerUid) {
      if (!(this_present_buyerUid && that_present_buyerUid))
        return false;
      if (!this.buyerUid.equals(that.buyerUid))
        return false;
    }

    boolean this_present_buyerName = true && this.isSetBuyerName();
    boolean that_present_buyerName = true && that.isSetBuyerName();
    if (this_present_buyerName || that_present_buyerName) {
      if (!(this_present_buyerName && that_present_buyerName))
        return false;
      if (!this.buyerName.equals(that.buyerName))
        return false;
    }

    boolean this_present_goodsId = true;
    boolean that_present_goodsId = true;
    if (this_present_goodsId || that_present_goodsId) {
      if (!(this_present_goodsId && that_present_goodsId))
        return false;
      if (this.goodsId != that.goodsId)
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_replyMessage = true && this.isSetReplyMessage();
    boolean that_present_replyMessage = true && that.isSetReplyMessage();
    if (this_present_replyMessage || that_present_replyMessage) {
      if (!(this_present_replyMessage && that_present_replyMessage))
        return false;
      if (!this.replyMessage.equals(that.replyMessage))
        return false;
    }

    boolean this_present_dateline = true && this.isSetDateline();
    boolean that_present_dateline = true && that.isSetDateline();
    if (this_present_dateline || that_present_dateline) {
      if (!(this_present_dateline && that_present_dateline))
        return false;
      if (!this.dateline.equals(that.dateline))
        return false;
    }

    boolean this_present_shopId = true && this.isSetShopId();
    boolean that_present_shopId = true && that.isSetShopId();
    if (this_present_shopId || that_present_shopId) {
      if (!(this_present_shopId && that_present_shopId))
        return false;
      if (!this.shopId.equals(that.shopId))
        return false;
    }

    boolean this_present_isImg = true;
    boolean that_present_isImg = true;
    if (this_present_isImg || that_present_isImg) {
      if (!(this_present_isImg && that_present_isImg))
        return false;
      if (this.isImg != that.isImg)
        return false;
    }

    boolean this_present_imgs = true && this.isSetImgs();
    boolean that_present_imgs = true && that.isSetImgs();
    if (this_present_imgs || that_present_imgs) {
      if (!(this_present_imgs && that_present_imgs))
        return false;
      if (!this.imgs.equals(that.imgs))
        return false;
    }

    boolean this_present_limit = true;
    boolean that_present_limit = true;
    if (this_present_limit || that_present_limit) {
      if (!(this_present_limit && that_present_limit))
        return false;
      if (this.limit != that.limit)
        return false;
    }

    boolean this_present_start = true;
    boolean that_present_start = true;
    if (this_present_start || that_present_start) {
      if (!(this_present_start && that_present_start))
        return false;
      if (this.start != that.start)
        return false;
    }

    boolean this_present_type = true;
    boolean that_present_type = true;
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }

    boolean this_present_babyevaluation = true;
    boolean that_present_babyevaluation = true;
    if (this_present_babyevaluation || that_present_babyevaluation) {
      if (!(this_present_babyevaluation && that_present_babyevaluation))
        return false;
      if (this.babyevaluation != that.babyevaluation)
        return false;
    }

    boolean this_present_logiSticsService = true;
    boolean that_present_logiSticsService = true;
    if (this_present_logiSticsService || that_present_logiSticsService) {
      if (!(this_present_logiSticsService && that_present_logiSticsService))
        return false;
      if (this.logiSticsService != that.logiSticsService)
        return false;
    }

    boolean this_present_sellerService = true;
    boolean that_present_sellerService = true;
    if (this_present_sellerService || that_present_sellerService) {
      if (!(this_present_sellerService && that_present_sellerService))
        return false;
      if (this.sellerService != that.sellerService)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_buyerUid = true && (isSetBuyerUid());
    list.add(present_buyerUid);
    if (present_buyerUid)
      list.add(buyerUid);

    boolean present_buyerName = true && (isSetBuyerName());
    list.add(present_buyerName);
    if (present_buyerName)
      list.add(buyerName);

    boolean present_goodsId = true;
    list.add(present_goodsId);
    if (present_goodsId)
      list.add(goodsId);

    boolean present_content = true && (isSetContent());
    list.add(present_content);
    if (present_content)
      list.add(content);

    boolean present_replyMessage = true && (isSetReplyMessage());
    list.add(present_replyMessage);
    if (present_replyMessage)
      list.add(replyMessage);

    boolean present_dateline = true && (isSetDateline());
    list.add(present_dateline);
    if (present_dateline)
      list.add(dateline);

    boolean present_shopId = true && (isSetShopId());
    list.add(present_shopId);
    if (present_shopId)
      list.add(shopId);

    boolean present_isImg = true;
    list.add(present_isImg);
    if (present_isImg)
      list.add(isImg);

    boolean present_imgs = true && (isSetImgs());
    list.add(present_imgs);
    if (present_imgs)
      list.add(imgs);

    boolean present_limit = true;
    list.add(present_limit);
    if (present_limit)
      list.add(limit);

    boolean present_start = true;
    list.add(present_start);
    if (present_start)
      list.add(start);

    boolean present_type = true;
    list.add(present_type);
    if (present_type)
      list.add(type);

    boolean present_babyevaluation = true;
    list.add(present_babyevaluation);
    if (present_babyevaluation)
      list.add(babyevaluation);

    boolean present_logiSticsService = true;
    list.add(present_logiSticsService);
    if (present_logiSticsService)
      list.add(logiSticsService);

    boolean present_sellerService = true;
    list.add(present_sellerService);
    if (present_sellerService)
      list.add(sellerService);

    return list.hashCode();
  }

  @Override
  public int compareTo(AppraiseEntity other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBuyerUid()).compareTo(other.isSetBuyerUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuyerUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buyerUid, other.buyerUid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBuyerName()).compareTo(other.isSetBuyerName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuyerName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buyerName, other.buyerName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGoodsId()).compareTo(other.isSetGoodsId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGoodsId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.goodsId, other.goodsId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReplyMessage()).compareTo(other.isSetReplyMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReplyMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replyMessage, other.replyMessage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDateline()).compareTo(other.isSetDateline());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDateline()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dateline, other.dateline);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShopId()).compareTo(other.isSetShopId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShopId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shopId, other.shopId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsImg()).compareTo(other.isSetIsImg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsImg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isImg, other.isImg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImgs()).compareTo(other.isSetImgs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImgs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imgs, other.imgs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLimit()).compareTo(other.isSetLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limit, other.limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStart()).compareTo(other.isSetStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, other.start);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBabyevaluation()).compareTo(other.isSetBabyevaluation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBabyevaluation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.babyevaluation, other.babyevaluation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLogiSticsService()).compareTo(other.isSetLogiSticsService());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLogiSticsService()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logiSticsService, other.logiSticsService);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSellerService()).compareTo(other.isSetSellerService());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSellerService()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sellerService, other.sellerService);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AppraiseEntity(");
    boolean first = true;

    sb.append("buyerUid:");
    if (this.buyerUid == null) {
      sb.append("null");
    } else {
      sb.append(this.buyerUid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("buyerName:");
    if (this.buyerName == null) {
      sb.append("null");
    } else {
      sb.append(this.buyerName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("goodsId:");
    sb.append(this.goodsId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("content:");
    if (this.content == null) {
      sb.append("null");
    } else {
      sb.append(this.content);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("replyMessage:");
    if (this.replyMessage == null) {
      sb.append("null");
    } else {
      sb.append(this.replyMessage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dateline:");
    if (this.dateline == null) {
      sb.append("null");
    } else {
      sb.append(this.dateline);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("shopId:");
    if (this.shopId == null) {
      sb.append("null");
    } else {
      sb.append(this.shopId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isImg:");
    sb.append(this.isImg);
    first = false;
    if (!first) sb.append(", ");
    sb.append("imgs:");
    if (this.imgs == null) {
      sb.append("null");
    } else {
      sb.append(this.imgs);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("limit:");
    sb.append(this.limit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("start:");
    sb.append(this.start);
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    sb.append(this.type);
    first = false;
    if (!first) sb.append(", ");
    sb.append("babyevaluation:");
    sb.append(this.babyevaluation);
    first = false;
    if (!first) sb.append(", ");
    sb.append("logiSticsService:");
    sb.append(this.logiSticsService);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sellerService:");
    sb.append(this.sellerService);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AppraiseEntityStandardSchemeFactory implements SchemeFactory {
    public AppraiseEntityStandardScheme getScheme() {
      return new AppraiseEntityStandardScheme();
    }
  }

  private static class AppraiseEntityStandardScheme extends StandardScheme<AppraiseEntity> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AppraiseEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BUYER_UID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.buyerUid = iprot.readString();
              struct.setBuyerUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BUYER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.buyerName = iprot.readString();
              struct.setBuyerNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // GOODS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.goodsId = iprot.readI32();
              struct.setGoodsIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REPLY_MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.replyMessage = iprot.readString();
              struct.setReplyMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DATELINE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dateline = iprot.readString();
              struct.setDatelineIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SHOP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.shopId = iprot.readString();
              struct.setShopIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // IS_IMG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isImg = iprot.readI32();
              struct.setIsImgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // IMGS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.imgs = iprot.readString();
              struct.setImgsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.limit = iprot.readI32();
              struct.setLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // START
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.start = iprot.readI32();
              struct.setStartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = iprot.readI32();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // BABYEVALUATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.babyevaluation = iprot.readI32();
              struct.setBabyevaluationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // LOGI_STICS_SERVICE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.logiSticsService = iprot.readI32();
              struct.setLogiSticsServiceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // SELLER_SERVICE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sellerService = iprot.readI32();
              struct.setSellerServiceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AppraiseEntity struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.buyerUid != null) {
        oprot.writeFieldBegin(BUYER_UID_FIELD_DESC);
        oprot.writeString(struct.buyerUid);
        oprot.writeFieldEnd();
      }
      if (struct.buyerName != null) {
        oprot.writeFieldBegin(BUYER_NAME_FIELD_DESC);
        oprot.writeString(struct.buyerName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(GOODS_ID_FIELD_DESC);
      oprot.writeI32(struct.goodsId);
      oprot.writeFieldEnd();
      if (struct.content != null) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        oprot.writeString(struct.content);
        oprot.writeFieldEnd();
      }
      if (struct.replyMessage != null) {
        oprot.writeFieldBegin(REPLY_MESSAGE_FIELD_DESC);
        oprot.writeString(struct.replyMessage);
        oprot.writeFieldEnd();
      }
      if (struct.dateline != null) {
        oprot.writeFieldBegin(DATELINE_FIELD_DESC);
        oprot.writeString(struct.dateline);
        oprot.writeFieldEnd();
      }
      if (struct.shopId != null) {
        oprot.writeFieldBegin(SHOP_ID_FIELD_DESC);
        oprot.writeString(struct.shopId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_IMG_FIELD_DESC);
      oprot.writeI32(struct.isImg);
      oprot.writeFieldEnd();
      if (struct.imgs != null) {
        oprot.writeFieldBegin(IMGS_FIELD_DESC);
        oprot.writeString(struct.imgs);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LIMIT_FIELD_DESC);
      oprot.writeI32(struct.limit);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(START_FIELD_DESC);
      oprot.writeI32(struct.start);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeI32(struct.type);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BABYEVALUATION_FIELD_DESC);
      oprot.writeI32(struct.babyevaluation);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOGI_STICS_SERVICE_FIELD_DESC);
      oprot.writeI32(struct.logiSticsService);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SELLER_SERVICE_FIELD_DESC);
      oprot.writeI32(struct.sellerService);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AppraiseEntityTupleSchemeFactory implements SchemeFactory {
    public AppraiseEntityTupleScheme getScheme() {
      return new AppraiseEntityTupleScheme();
    }
  }

  private static class AppraiseEntityTupleScheme extends TupleScheme<AppraiseEntity> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AppraiseEntity struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBuyerUid()) {
        optionals.set(0);
      }
      if (struct.isSetBuyerName()) {
        optionals.set(1);
      }
      if (struct.isSetGoodsId()) {
        optionals.set(2);
      }
      if (struct.isSetContent()) {
        optionals.set(3);
      }
      if (struct.isSetReplyMessage()) {
        optionals.set(4);
      }
      if (struct.isSetDateline()) {
        optionals.set(5);
      }
      if (struct.isSetShopId()) {
        optionals.set(6);
      }
      if (struct.isSetIsImg()) {
        optionals.set(7);
      }
      if (struct.isSetImgs()) {
        optionals.set(8);
      }
      if (struct.isSetLimit()) {
        optionals.set(9);
      }
      if (struct.isSetStart()) {
        optionals.set(10);
      }
      if (struct.isSetType()) {
        optionals.set(11);
      }
      if (struct.isSetBabyevaluation()) {
        optionals.set(12);
      }
      if (struct.isSetLogiSticsService()) {
        optionals.set(13);
      }
      if (struct.isSetSellerService()) {
        optionals.set(14);
      }
      oprot.writeBitSet(optionals, 15);
      if (struct.isSetBuyerUid()) {
        oprot.writeString(struct.buyerUid);
      }
      if (struct.isSetBuyerName()) {
        oprot.writeString(struct.buyerName);
      }
      if (struct.isSetGoodsId()) {
        oprot.writeI32(struct.goodsId);
      }
      if (struct.isSetContent()) {
        oprot.writeString(struct.content);
      }
      if (struct.isSetReplyMessage()) {
        oprot.writeString(struct.replyMessage);
      }
      if (struct.isSetDateline()) {
        oprot.writeString(struct.dateline);
      }
      if (struct.isSetShopId()) {
        oprot.writeString(struct.shopId);
      }
      if (struct.isSetIsImg()) {
        oprot.writeI32(struct.isImg);
      }
      if (struct.isSetImgs()) {
        oprot.writeString(struct.imgs);
      }
      if (struct.isSetLimit()) {
        oprot.writeI32(struct.limit);
      }
      if (struct.isSetStart()) {
        oprot.writeI32(struct.start);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type);
      }
      if (struct.isSetBabyevaluation()) {
        oprot.writeI32(struct.babyevaluation);
      }
      if (struct.isSetLogiSticsService()) {
        oprot.writeI32(struct.logiSticsService);
      }
      if (struct.isSetSellerService()) {
        oprot.writeI32(struct.sellerService);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AppraiseEntity struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(15);
      if (incoming.get(0)) {
        struct.buyerUid = iprot.readString();
        struct.setBuyerUidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.buyerName = iprot.readString();
        struct.setBuyerNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.goodsId = iprot.readI32();
        struct.setGoodsIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.content = iprot.readString();
        struct.setContentIsSet(true);
      }
      if (incoming.get(4)) {
        struct.replyMessage = iprot.readString();
        struct.setReplyMessageIsSet(true);
      }
      if (incoming.get(5)) {
        struct.dateline = iprot.readString();
        struct.setDatelineIsSet(true);
      }
      if (incoming.get(6)) {
        struct.shopId = iprot.readString();
        struct.setShopIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.isImg = iprot.readI32();
        struct.setIsImgIsSet(true);
      }
      if (incoming.get(8)) {
        struct.imgs = iprot.readString();
        struct.setImgsIsSet(true);
      }
      if (incoming.get(9)) {
        struct.limit = iprot.readI32();
        struct.setLimitIsSet(true);
      }
      if (incoming.get(10)) {
        struct.start = iprot.readI32();
        struct.setStartIsSet(true);
      }
      if (incoming.get(11)) {
        struct.type = iprot.readI32();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.babyevaluation = iprot.readI32();
        struct.setBabyevaluationIsSet(true);
      }
      if (incoming.get(13)) {
        struct.logiSticsService = iprot.readI32();
        struct.setLogiSticsServiceIsSet(true);
      }
      if (incoming.get(14)) {
        struct.sellerService = iprot.readI32();
        struct.setSellerServiceIsSet(true);
      }
    }
  }

}


package com.wboly.rpc.service;

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Generated;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.protocol.TProtocol;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.wboly.rpc.entity.SystemConfigEntity;
import com.wboly.rpc.protocol.WbloyTMultiplexedProtocol;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked" ,"unused"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-01-03")
public class SystemConfigService {

	public interface Iface {

		public List<SystemConfigEntity> selectSystemConfig() throws org.apache.thrift.TException;

		public List<SystemConfigEntity> initShop() throws org.apache.thrift.TException;

		public int saveOi(Map<String, String> m) throws org.apache.thrift.TException;

	}

	public interface AsyncIface {

		public void selectSystemConfig(org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException;

		public void initShop(org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException;

		public void saveOi(Map<String, String> m, org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException;

	}

	public static class Client extends org.apache.thrift.TServiceClient implements Iface {
		public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
			public Factory() {
			}

			public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
				return new Client(prot);
			}

			public Client getClient(org.apache.thrift.protocol.TProtocol iprot,
					org.apache.thrift.protocol.TProtocol oprot) {
				return new Client(iprot, oprot);
			}
		}

		public Client(org.apache.thrift.protocol.TProtocol prot) {
			super(prot, prot);
		}

		public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
			super(iprot, oprot);
		}

		public Client(WbloyTMultiplexedProtocol wbloyTMultiplexedProtocol, String serviceName) {
			this(wbloyTMultiplexedProtocol, wbloyTMultiplexedProtocol);
			this.iprot_ = (TProtocol) wbloyTMultiplexedProtocol;
			wbloyTMultiplexedProtocol.serviceName = serviceName;
		}

		public List<SystemConfigEntity> selectSystemConfig() throws org.apache.thrift.TException {
			send_selectSystemConfig();
			return recv_selectSystemConfig();
		}

		public void send_selectSystemConfig() throws org.apache.thrift.TException {
			selectSystemConfig_args args = new selectSystemConfig_args();
			sendBase("selectSystemConfig", args);
		}

		public List<SystemConfigEntity> recv_selectSystemConfig() throws org.apache.thrift.TException {
			selectSystemConfig_result result = new selectSystemConfig_result();
			receiveBase(result, "selectSystemConfig");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"selectSystemConfig failed: unknown result");
		}

		public List<SystemConfigEntity> initShop() throws org.apache.thrift.TException {
			send_initShop();
			return recv_initShop();
		}

		public void send_initShop() throws org.apache.thrift.TException {
			initShop_args args = new initShop_args();
			sendBase("initShop", args);
		}

		public List<SystemConfigEntity> recv_initShop() throws org.apache.thrift.TException {
			initShop_result result = new initShop_result();
			receiveBase(result, "initShop");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"initShop failed: unknown result");
		}

		public int saveOi(Map<String, String> m) throws org.apache.thrift.TException {
			send_saveOi(m);
			return recv_saveOi();
		}

		public void send_saveOi(Map<String, String> m) throws org.apache.thrift.TException {
			saveOi_args args = new saveOi_args();
			args.setM(m);
			sendBase("saveOi", args);
		}

		public int recv_saveOi() throws org.apache.thrift.TException {
			saveOi_result result = new saveOi_result();
			receiveBase(result, "saveOi");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"saveOi failed: unknown result");
		}

	}

	public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
		public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
			private org.apache.thrift.async.TAsyncClientManager clientManager;
			private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

			public Factory(org.apache.thrift.async.TAsyncClientManager clientManager,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
				this.clientManager = clientManager;
				this.protocolFactory = protocolFactory;
			}

			public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
				return new AsyncClient(protocolFactory, clientManager, transport);
			}
		}

		public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory,
				org.apache.thrift.async.TAsyncClientManager clientManager,
				org.apache.thrift.transport.TNonblockingTransport transport) {
			super(protocolFactory, clientManager, transport);
		}

		public void selectSystemConfig(org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			selectSystemConfig_call method_call = new selectSystemConfig_call(resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class selectSystemConfig_call extends org.apache.thrift.async.TAsyncMethodCall {
			public selectSystemConfig_call(org.apache.thrift.async.AsyncMethodCallback resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("selectSystemConfig",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				selectSystemConfig_args args = new selectSystemConfig_args();
				args.write(prot);
				prot.writeMessageEnd();
			}

			public List<SystemConfigEntity> getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_selectSystemConfig();
			}
		}

		public void initShop(org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			initShop_call method_call = new initShop_call(resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class initShop_call extends org.apache.thrift.async.TAsyncMethodCall {
			public initShop_call(org.apache.thrift.async.AsyncMethodCallback resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("initShop",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				initShop_args args = new initShop_args();
				args.write(prot);
				prot.writeMessageEnd();
			}

			public List<SystemConfigEntity> getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_initShop();
			}
		}

		public void saveOi(Map<String, String> m, org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			saveOi_call method_call = new saveOi_call(m, resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class saveOi_call extends org.apache.thrift.async.TAsyncMethodCall {
			private Map<String, String> m;

			public saveOi_call(Map<String, String> m, org.apache.thrift.async.AsyncMethodCallback resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.m = m;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveOi",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				saveOi_args args = new saveOi_args();
				args.setM(m);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public int getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_saveOi();
			}
		}

	}

	public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I>
			implements org.apache.thrift.TProcessor {
		private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());

		public Processor(I iface) {
			super(iface, getProcessMap(
					new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
		}

		protected Processor(I iface,
				Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
			super(iface, getProcessMap(processMap));
		}

		private static <I extends Iface> Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(
				Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
			processMap.put("selectSystemConfig", new selectSystemConfig());
			processMap.put("initShop", new initShop());
			processMap.put("saveOi", new saveOi());
			return processMap;
		}

		public static class selectSystemConfig<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, selectSystemConfig_args> {
			public selectSystemConfig() {
				super("selectSystemConfig");
			}

			public selectSystemConfig_args getEmptyArgsInstance() {
				return new selectSystemConfig_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public selectSystemConfig_result getResult(I iface, selectSystemConfig_args args)
					throws org.apache.thrift.TException {
				selectSystemConfig_result result = new selectSystemConfig_result();
				result.success = iface.selectSystemConfig();
				return result;
			}
		}

		public static class initShop<I extends Iface> extends org.apache.thrift.ProcessFunction<I, initShop_args> {
			public initShop() {
				super("initShop");
			}

			public initShop_args getEmptyArgsInstance() {
				return new initShop_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public initShop_result getResult(I iface, initShop_args args) throws org.apache.thrift.TException {
				initShop_result result = new initShop_result();
				result.success = iface.initShop();
				return result;
			}
		}

		public static class saveOi<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveOi_args> {
			public saveOi() {
				super("saveOi");
			}

			public saveOi_args getEmptyArgsInstance() {
				return new saveOi_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public saveOi_result getResult(I iface, saveOi_args args) throws org.apache.thrift.TException {
				saveOi_result result = new saveOi_result();
				result.success = iface.saveOi(args.m);
				result.setSuccessIsSet(true);
				return result;
			}
		}

	}

	public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
		private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());

		public AsyncProcessor(I iface) {
			super(iface, getProcessMap(
					new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
		}

		protected AsyncProcessor(I iface,
				Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
			super(iface, getProcessMap(processMap));
		}

		private static <I extends AsyncIface> Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> getProcessMap(
				Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
			processMap.put("selectSystemConfig", new selectSystemConfig());
			processMap.put("initShop", new initShop());
			processMap.put("saveOi", new saveOi());
			return processMap;
		}

		public static class selectSystemConfig<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, selectSystemConfig_args, List<SystemConfigEntity>> {
			public selectSystemConfig() {
				super("selectSystemConfig");
			}

			public selectSystemConfig_args getEmptyArgsInstance() {
				return new selectSystemConfig_args();
			}

			public AsyncMethodCallback<List<SystemConfigEntity>> getResultHandler(final AsyncFrameBuffer fb,
					final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<List<SystemConfigEntity>>() {
					public void onComplete(List<SystemConfigEntity> o) {
						selectSystemConfig_result result = new selectSystemConfig_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						selectSystemConfig_result result = new selectSystemConfig_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, selectSystemConfig_args args,
					org.apache.thrift.async.AsyncMethodCallback<List<SystemConfigEntity>> resultHandler)
					throws TException {
				iface.selectSystemConfig(resultHandler);
			}
		}

		public static class initShop<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, initShop_args, List<SystemConfigEntity>> {
			public initShop() {
				super("initShop");
			}

			public initShop_args getEmptyArgsInstance() {
				return new initShop_args();
			}

			public AsyncMethodCallback<List<SystemConfigEntity>> getResultHandler(final AsyncFrameBuffer fb,
					final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<List<SystemConfigEntity>>() {
					public void onComplete(List<SystemConfigEntity> o) {
						initShop_result result = new initShop_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						initShop_result result = new initShop_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, initShop_args args,
					org.apache.thrift.async.AsyncMethodCallback<List<SystemConfigEntity>> resultHandler)
					throws TException {
				iface.initShop(resultHandler);
			}
		}

		public static class saveOi<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, saveOi_args, Integer> {
			public saveOi() {
				super("saveOi");
			}

			public saveOi_args getEmptyArgsInstance() {
				return new saveOi_args();
			}

			public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<Integer>() {
					public void onComplete(Integer o) {
						saveOi_result result = new saveOi_result();
						result.success = o;
						result.setSuccessIsSet(true);
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						saveOi_result result = new saveOi_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, saveOi_args args,
					org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
				iface.saveOi(args.m, resultHandler);
			}
		}

	}

	public static class selectSystemConfig_args
			implements org.apache.thrift.TBase<selectSystemConfig_args, selectSystemConfig_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<selectSystemConfig_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"selectSystemConfig_args");

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new selectSystemConfig_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new selectSystemConfig_argsTupleSchemeFactory());
		}

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			;

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(selectSystemConfig_args.class, metaDataMap);
		}

		public selectSystemConfig_args() {
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public selectSystemConfig_args(selectSystemConfig_args other) {
		}

		public selectSystemConfig_args deepCopy() {
			return new selectSystemConfig_args(this);
		}

		@Override
		public void clear() {
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof selectSystemConfig_args)
				return this.equals((selectSystemConfig_args) that);
			return false;
		}

		public boolean equals(selectSystemConfig_args that) {
			if (that == null)
				return false;

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			return list.hashCode();
		}

		@Override
		public int compareTo(selectSystemConfig_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("selectSystemConfig_args(");
			boolean first = true;

			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class selectSystemConfig_argsStandardSchemeFactory implements SchemeFactory {
			public selectSystemConfig_argsStandardScheme getScheme() {
				return new selectSystemConfig_argsStandardScheme();
			}
		}

		private static class selectSystemConfig_argsStandardScheme extends StandardScheme<selectSystemConfig_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, selectSystemConfig_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, selectSystemConfig_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class selectSystemConfig_argsTupleSchemeFactory implements SchemeFactory {
			public selectSystemConfig_argsTupleScheme getScheme() {
				return new selectSystemConfig_argsTupleScheme();
			}
		}

		private static class selectSystemConfig_argsTupleScheme extends TupleScheme<selectSystemConfig_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, selectSystemConfig_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, selectSystemConfig_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
			}
		}

	}

	public static class selectSystemConfig_result
			implements org.apache.thrift.TBase<selectSystemConfig_result, selectSystemConfig_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<selectSystemConfig_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"selectSystemConfig_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.LIST, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new selectSystemConfig_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new selectSystemConfig_resultTupleSchemeFactory());
		}

		public List<SystemConfigEntity> success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									SystemConfigEntity.class))));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(selectSystemConfig_result.class,
					metaDataMap);
		}

		public selectSystemConfig_result() {
		}

		public selectSystemConfig_result(List<SystemConfigEntity> success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public selectSystemConfig_result(selectSystemConfig_result other) {
			if (other.isSetSuccess()) {
				List<SystemConfigEntity> __this__success = new ArrayList<SystemConfigEntity>(other.success.size());
				for (SystemConfigEntity other_element : other.success) {
					__this__success.add(new SystemConfigEntity(other_element));
				}
				this.success = __this__success;
			}
		}

		public selectSystemConfig_result deepCopy() {
			return new selectSystemConfig_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public int getSuccessSize() {
			return (this.success == null) ? 0 : this.success.size();
		}

		public java.util.Iterator<SystemConfigEntity> getSuccessIterator() {
			return (this.success == null) ? null : this.success.iterator();
		}

		public void addToSuccess(SystemConfigEntity elem) {
			if (this.success == null) {
				this.success = new ArrayList<SystemConfigEntity>();
			}
			this.success.add(elem);
		}

		public List<SystemConfigEntity> getSuccess() {
			return this.success;
		}

		public selectSystemConfig_result setSuccess(List<SystemConfigEntity> success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((List<SystemConfigEntity>) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof selectSystemConfig_result)
				return this.equals((selectSystemConfig_result) that);
			return false;
		}

		public boolean equals(selectSystemConfig_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success);

			return list.hashCode();
		}

		@Override
		public int compareTo(selectSystemConfig_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("selectSystemConfig_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class selectSystemConfig_resultStandardSchemeFactory implements SchemeFactory {
			public selectSystemConfig_resultStandardScheme getScheme() {
				return new selectSystemConfig_resultStandardScheme();
			}
		}

		private static class selectSystemConfig_resultStandardScheme extends StandardScheme<selectSystemConfig_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, selectSystemConfig_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
							{
								org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
								struct.success = new ArrayList<SystemConfigEntity>(_list0.size);
								SystemConfigEntity _elem1;
								for (int _i2 = 0; _i2 < _list0.size; ++_i2) {
									_elem1 = new SystemConfigEntity();
									_elem1.read(iprot);
									struct.success.add(_elem1);
								}
								iprot.readListEnd();
							}
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, selectSystemConfig_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					{
						oprot.writeListBegin(new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
						for (SystemConfigEntity _iter3 : struct.success) {
							_iter3.write(oprot);
						}
						oprot.writeListEnd();
					}
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class selectSystemConfig_resultTupleSchemeFactory implements SchemeFactory {
			public selectSystemConfig_resultTupleScheme getScheme() {
				return new selectSystemConfig_resultTupleScheme();
			}
		}

		private static class selectSystemConfig_resultTupleScheme extends TupleScheme<selectSystemConfig_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, selectSystemConfig_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					{
						oprot.writeI32(struct.success.size());
						for (SystemConfigEntity _iter4 : struct.success) {
							_iter4.write(oprot);
						}
					}
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, selectSystemConfig_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					{
						org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
						struct.success = new ArrayList<SystemConfigEntity>(_list5.size);
						SystemConfigEntity _elem6;
						for (int _i7 = 0; _i7 < _list5.size; ++_i7) {
							_elem6 = new SystemConfigEntity();
							_elem6.read(iprot);
							struct.success.add(_elem6);
						}
					}
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class initShop_args implements org.apache.thrift.TBase<initShop_args, initShop_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<initShop_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"initShop_args");

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new initShop_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new initShop_argsTupleSchemeFactory());
		}

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			;

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(initShop_args.class, metaDataMap);
		}

		public initShop_args() {
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public initShop_args(initShop_args other) {
		}

		public initShop_args deepCopy() {
			return new initShop_args(this);
		}

		@Override
		public void clear() {
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof initShop_args)
				return this.equals((initShop_args) that);
			return false;
		}

		public boolean equals(initShop_args that) {
			if (that == null)
				return false;

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			return list.hashCode();
		}

		@Override
		public int compareTo(initShop_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("initShop_args(");
			boolean first = true;

			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class initShop_argsStandardSchemeFactory implements SchemeFactory {
			public initShop_argsStandardScheme getScheme() {
				return new initShop_argsStandardScheme();
			}
		}

		private static class initShop_argsStandardScheme extends StandardScheme<initShop_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, initShop_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, initShop_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class initShop_argsTupleSchemeFactory implements SchemeFactory {
			public initShop_argsTupleScheme getScheme() {
				return new initShop_argsTupleScheme();
			}
		}

		private static class initShop_argsTupleScheme extends TupleScheme<initShop_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, initShop_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, initShop_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
			}
		}

	}

	public static class initShop_result implements org.apache.thrift.TBase<initShop_result, initShop_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<initShop_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"initShop_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.LIST, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new initShop_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new initShop_resultTupleSchemeFactory());
		}

		public List<SystemConfigEntity> success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									SystemConfigEntity.class))));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(initShop_result.class, metaDataMap);
		}

		public initShop_result() {
		}

		public initShop_result(List<SystemConfigEntity> success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public initShop_result(initShop_result other) {
			if (other.isSetSuccess()) {
				List<SystemConfigEntity> __this__success = new ArrayList<SystemConfigEntity>(other.success.size());
				for (SystemConfigEntity other_element : other.success) {
					__this__success.add(new SystemConfigEntity(other_element));
				}
				this.success = __this__success;
			}
		}

		public initShop_result deepCopy() {
			return new initShop_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public int getSuccessSize() {
			return (this.success == null) ? 0 : this.success.size();
		}

		public java.util.Iterator<SystemConfigEntity> getSuccessIterator() {
			return (this.success == null) ? null : this.success.iterator();
		}

		public void addToSuccess(SystemConfigEntity elem) {
			if (this.success == null) {
				this.success = new ArrayList<SystemConfigEntity>();
			}
			this.success.add(elem);
		}

		public List<SystemConfigEntity> getSuccess() {
			return this.success;
		}

		public initShop_result setSuccess(List<SystemConfigEntity> success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((List<SystemConfigEntity>) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof initShop_result)
				return this.equals((initShop_result) that);
			return false;
		}

		public boolean equals(initShop_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success);

			return list.hashCode();
		}

		@Override
		public int compareTo(initShop_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("initShop_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class initShop_resultStandardSchemeFactory implements SchemeFactory {
			public initShop_resultStandardScheme getScheme() {
				return new initShop_resultStandardScheme();
			}
		}

		private static class initShop_resultStandardScheme extends StandardScheme<initShop_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, initShop_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
							{
								org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
								struct.success = new ArrayList<SystemConfigEntity>(_list8.size);
								SystemConfigEntity _elem9;
								for (int _i10 = 0; _i10 < _list8.size; ++_i10) {
									_elem9 = new SystemConfigEntity();
									_elem9.read(iprot);
									struct.success.add(_elem9);
								}
								iprot.readListEnd();
							}
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, initShop_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					{
						oprot.writeListBegin(new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
						for (SystemConfigEntity _iter11 : struct.success) {
							_iter11.write(oprot);
						}
						oprot.writeListEnd();
					}
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class initShop_resultTupleSchemeFactory implements SchemeFactory {
			public initShop_resultTupleScheme getScheme() {
				return new initShop_resultTupleScheme();
			}
		}

		private static class initShop_resultTupleScheme extends TupleScheme<initShop_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, initShop_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					{
						oprot.writeI32(struct.success.size());
						for (SystemConfigEntity _iter12 : struct.success) {
							_iter12.write(oprot);
						}
					}
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, initShop_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					{
						org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
						struct.success = new ArrayList<SystemConfigEntity>(_list13.size);
						SystemConfigEntity _elem14;
						for (int _i15 = 0; _i15 < _list13.size; ++_i15) {
							_elem14 = new SystemConfigEntity();
							_elem14.read(iprot);
							struct.success.add(_elem14);
						}
					}
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class saveOi_args implements org.apache.thrift.TBase<saveOi_args, saveOi_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<saveOi_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"saveOi_args");

		private static final org.apache.thrift.protocol.TField M_FIELD_DESC = new org.apache.thrift.protocol.TField("m",
				org.apache.thrift.protocol.TType.MAP, (short) 1);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new saveOi_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new saveOi_argsTupleSchemeFactory());
		}

		public Map<String, String> m; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			M((short) 1, "m");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // M
					return M;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.M,
					new org.apache.thrift.meta_data.FieldMetaData("m", org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
									new org.apache.thrift.meta_data.FieldValueMetaData(
											org.apache.thrift.protocol.TType.STRING),
									new org.apache.thrift.meta_data.FieldValueMetaData(
											org.apache.thrift.protocol.TType.STRING))));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveOi_args.class, metaDataMap);
		}

		public saveOi_args() {
		}

		public saveOi_args(Map<String, String> m) {
			this();
			this.m = m;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public saveOi_args(saveOi_args other) {
			if (other.isSetM()) {
				Map<String, String> __this__m = new HashMap<String, String>(other.m);
				this.m = __this__m;
			}
		}

		public saveOi_args deepCopy() {
			return new saveOi_args(this);
		}

		@Override
		public void clear() {
			this.m = null;
		}

		public int getMSize() {
			return (this.m == null) ? 0 : this.m.size();
		}

		public void putToM(String key, String val) {
			if (this.m == null) {
				this.m = new HashMap<String, String>();
			}
			this.m.put(key, val);
		}

		public Map<String, String> getM() {
			return this.m;
		}

		public saveOi_args setM(Map<String, String> m) {
			this.m = m;
			return this;
		}

		public void unsetM() {
			this.m = null;
		}

		/**
		 * Returns true if field m is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetM() {
			return this.m != null;
		}

		public void setMIsSet(boolean value) {
			if (!value) {
				this.m = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case M:
				if (value == null) {
					unsetM();
				} else {
					setM((Map<String, String>) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case M:
				return getM();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case M:
				return isSetM();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof saveOi_args)
				return this.equals((saveOi_args) that);
			return false;
		}

		public boolean equals(saveOi_args that) {
			if (that == null)
				return false;

			boolean this_present_m = true && this.isSetM();
			boolean that_present_m = true && that.isSetM();
			if (this_present_m || that_present_m) {
				if (!(this_present_m && that_present_m))
					return false;
				if (!this.m.equals(that.m))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_m = true && (isSetM());
			list.add(present_m);
			if (present_m)
				list.add(m);

			return list.hashCode();
		}

		@Override
		public int compareTo(saveOi_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetM()).compareTo(other.isSetM());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetM()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.m, other.m);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("saveOi_args(");
			boolean first = true;

			sb.append("m:");
			if (this.m == null) {
				sb.append("null");
			} else {
				sb.append(this.m);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class saveOi_argsStandardSchemeFactory implements SchemeFactory {
			public saveOi_argsStandardScheme getScheme() {
				return new saveOi_argsStandardScheme();
			}
		}

		private static class saveOi_argsStandardScheme extends StandardScheme<saveOi_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, saveOi_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // M
						if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
							{
								org.apache.thrift.protocol.TMap _map16 = iprot.readMapBegin();
								struct.m = new HashMap<String, String>(2 * _map16.size);
								String _key17;
								String _val18;
								for (int _i19 = 0; _i19 < _map16.size; ++_i19) {
									_key17 = iprot.readString();
									_val18 = iprot.readString();
									struct.m.put(_key17, _val18);
								}
								iprot.readMapEnd();
							}
							struct.setMIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, saveOi_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.m != null) {
					oprot.writeFieldBegin(M_FIELD_DESC);
					{
						oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,
								org.apache.thrift.protocol.TType.STRING, struct.m.size()));
						for (Map.Entry<String, String> _iter20 : struct.m.entrySet()) {
							oprot.writeString(_iter20.getKey());
							oprot.writeString(_iter20.getValue());
						}
						oprot.writeMapEnd();
					}
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class saveOi_argsTupleSchemeFactory implements SchemeFactory {
			public saveOi_argsTupleScheme getScheme() {
				return new saveOi_argsTupleScheme();
			}
		}

		private static class saveOi_argsTupleScheme extends TupleScheme<saveOi_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, saveOi_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetM()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetM()) {
					{
						oprot.writeI32(struct.m.size());
						for (Map.Entry<String, String> _iter21 : struct.m.entrySet()) {
							oprot.writeString(_iter21.getKey());
							oprot.writeString(_iter21.getValue());
						}
					}
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, saveOi_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					{
						org.apache.thrift.protocol.TMap _map22 = new org.apache.thrift.protocol.TMap(
								org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING,
								iprot.readI32());
						struct.m = new HashMap<String, String>(2 * _map22.size);
						String _key23;
						String _val24;
						for (int _i25 = 0; _i25 < _map22.size; ++_i25) {
							_key23 = iprot.readString();
							_val24 = iprot.readString();
							struct.m.put(_key23, _val24);
						}
					}
					struct.setMIsSet(true);
				}
			}
		}

	}

	public static class saveOi_result implements org.apache.thrift.TBase<saveOi_result, saveOi_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<saveOi_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"saveOi_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.I32, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new saveOi_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new saveOi_resultTupleSchemeFactory());
		}

		public int success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __SUCCESS_ISSET_ID = 0;
		private byte __isset_bitfield = 0;
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveOi_result.class, metaDataMap);
		}

		public saveOi_result() {
		}

		public saveOi_result(int success) {
			this();
			this.success = success;
			setSuccessIsSet(true);
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public saveOi_result(saveOi_result other) {
			__isset_bitfield = other.__isset_bitfield;
			this.success = other.success;
		}

		public saveOi_result deepCopy() {
			return new saveOi_result(this);
		}

		@Override
		public void clear() {
			setSuccessIsSet(false);
			this.success = 0;
		}

		public int getSuccess() {
			return this.success;
		}

		public saveOi_result setSuccess(int success) {
			this.success = success;
			setSuccessIsSet(true);
			return this;
		}

		public void unsetSuccess() {
			__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
		}

		public void setSuccessIsSet(boolean value) {
			__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Integer) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof saveOi_result)
				return this.equals((saveOi_result) that);
			return false;
		}

		public boolean equals(saveOi_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true;
			boolean that_present_success = true;
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (this.success != that.success)
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true;
			list.add(present_success);
			if (present_success)
				list.add(success);

			return list.hashCode();
		}

		@Override
		public int compareTo(saveOi_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("saveOi_result(");
			boolean first = true;

			sb.append("success:");
			sb.append(this.success);
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java
				// serialization is wacky, and doesn't call the default
				// constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class saveOi_resultStandardSchemeFactory implements SchemeFactory {
			public saveOi_resultStandardScheme getScheme() {
				return new saveOi_resultStandardScheme();
			}
		}

		private static class saveOi_resultStandardScheme extends StandardScheme<saveOi_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, saveOi_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.success = iprot.readI32();
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, saveOi_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.isSetSuccess()) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeI32(struct.success);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class saveOi_resultTupleSchemeFactory implements SchemeFactory {
			public saveOi_resultTupleScheme getScheme() {
				return new saveOi_resultTupleScheme();
			}
		}

		private static class saveOi_resultTupleScheme extends TupleScheme<saveOi_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, saveOi_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeI32(struct.success);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, saveOi_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = iprot.readI32();
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

}

package com.wboly.rpc.service;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Generated;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.protocol.TProtocol;
import org.apache.thrift.protocol.TTupleProtocol;
/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.wboly.rpc.entity.AppraiseEntity;
import com.wboly.rpc.entity.CarShopEntity;
import com.wboly.rpc.entity.OrderEntity;
import com.wboly.rpc.protocol.WbloyTMultiplexedProtocol;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked","unused"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-05-11")
public class OrderService {

  public interface Iface {

    public int upOrderHolders(String orderId, String upUserId) throws org.apache.thrift.TException;

    public List<Map<String,String>> UserCarShops(CarShopEntity entity) throws org.apache.thrift.TException;

    public int DelUserCarShop(CarShopEntity entity) throws org.apache.thrift.TException;

    public int EditUserCarShop(CarShopEntity entity) throws org.apache.thrift.TException;

    public int UserCarShopCount(CarShopEntity entity) throws org.apache.thrift.TException;

    public List<Map<String,String>> UserOrders(OrderEntity entity) throws org.apache.thrift.TException;

    public long CreateShopOrder(OrderEntity entity) throws org.apache.thrift.TException;

    public int CancelShopOrder(OrderEntity entity) throws org.apache.thrift.TException;

    public List<Map<String,String>> UserOrdersInventory(OrderEntity entity) throws org.apache.thrift.TException;

    public int EditUserOrdersInventory(OrderEntity entity) throws org.apache.thrift.TException;

    public Map<String,String> AppraiseclassifyCount(AppraiseEntity entity) throws org.apache.thrift.TException;

    public List<AppraiseEntity> goodsAppraise(AppraiseEntity entity) throws org.apache.thrift.TException;

    public int AppraiseOrder(AppraiseEntity entity, Map<String,String> hmap) throws org.apache.thrift.TException;

    public int ReturnedPurchase(OrderEntity entity, Map<String,String> hmap) throws org.apache.thrift.TException;

    public int ApplyAftermarket(OrderEntity entity, Map<String,String> hmap) throws org.apache.thrift.TException;

    public List<Map<String,String>> UserFootprints(Map<String,String> hmap) throws org.apache.thrift.TException;

    public int AddFootprint(Map<String,String> hmap) throws org.apache.thrift.TException;

    public int DelFootprint(String id) throws org.apache.thrift.TException;

    public int FinishAfterSale(Map<String,String> hmap) throws org.apache.thrift.TException;

    public int ContinueAfterSale(Map<String,String> hmap) throws org.apache.thrift.TException;

    public int ReturnAllGoods(Map<String,String> hmap) throws org.apache.thrift.TException;

    public int ReturnPartofGoods(Map<String,String> hmap) throws org.apache.thrift.TException;

    public int ApplyRefund(Map<String,String> hmap) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void upOrderHolders(String orderId, String upUserId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void UserCarShops(CarShopEntity entity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void DelUserCarShop(CarShopEntity entity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void EditUserCarShop(CarShopEntity entity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void UserCarShopCount(CarShopEntity entity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void UserOrders(OrderEntity entity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void CreateShopOrder(OrderEntity entity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void CancelShopOrder(OrderEntity entity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void UserOrdersInventory(OrderEntity entity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void EditUserOrdersInventory(OrderEntity entity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void AppraiseclassifyCount(AppraiseEntity entity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void goodsAppraise(AppraiseEntity entity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void AppraiseOrder(AppraiseEntity entity, Map<String,String> hmap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void ReturnedPurchase(OrderEntity entity, Map<String,String> hmap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void ApplyAftermarket(OrderEntity entity, Map<String,String> hmap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void UserFootprints(Map<String,String> hmap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void AddFootprint(Map<String,String> hmap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void DelFootprint(String id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void FinishAfterSale(Map<String,String> hmap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void ContinueAfterSale(Map<String,String> hmap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void ReturnAllGoods(Map<String,String> hmap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void ReturnPartofGoods(Map<String,String> hmap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void ApplyRefund(Map<String,String> hmap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }
    
	public Client(WbloyTMultiplexedProtocol wbloyTMultiplexedProtocol, String serviceName) {
		this(wbloyTMultiplexedProtocol, wbloyTMultiplexedProtocol);
		this.iprot_ = (TProtocol) wbloyTMultiplexedProtocol;
		wbloyTMultiplexedProtocol.serviceName = serviceName;
	}

    public int upOrderHolders(String orderId, String upUserId) throws org.apache.thrift.TException
    {
      send_upOrderHolders(orderId, upUserId);
      return recv_upOrderHolders();
    }

    public void send_upOrderHolders(String orderId, String upUserId) throws org.apache.thrift.TException
    {
      upOrderHolders_args args = new upOrderHolders_args();
      args.setOrderId(orderId);
      args.setUpUserId(upUserId);
      sendBase("upOrderHolders", args);
    }

    public int recv_upOrderHolders() throws org.apache.thrift.TException
    {
      upOrderHolders_result result = new upOrderHolders_result();
      receiveBase(result, "upOrderHolders");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "upOrderHolders failed: unknown result");
    }

    public List<Map<String,String>> UserCarShops(CarShopEntity entity) throws org.apache.thrift.TException
    {
      send_UserCarShops(entity);
      return recv_UserCarShops();
    }

    public void send_UserCarShops(CarShopEntity entity) throws org.apache.thrift.TException
    {
      UserCarShops_args args = new UserCarShops_args();
      args.setEntity(entity);
      sendBase("UserCarShops", args);
    }

    public List<Map<String,String>> recv_UserCarShops() throws org.apache.thrift.TException
    {
      UserCarShops_result result = new UserCarShops_result();
      receiveBase(result, "UserCarShops");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "UserCarShops failed: unknown result");
    }

    public int DelUserCarShop(CarShopEntity entity) throws org.apache.thrift.TException
    {
      send_DelUserCarShop(entity);
      return recv_DelUserCarShop();
    }

    public void send_DelUserCarShop(CarShopEntity entity) throws org.apache.thrift.TException
    {
      DelUserCarShop_args args = new DelUserCarShop_args();
      args.setEntity(entity);
      sendBase("DelUserCarShop", args);
    }

    public int recv_DelUserCarShop() throws org.apache.thrift.TException
    {
      DelUserCarShop_result result = new DelUserCarShop_result();
      receiveBase(result, "DelUserCarShop");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "DelUserCarShop failed: unknown result");
    }

    public int EditUserCarShop(CarShopEntity entity) throws org.apache.thrift.TException
    {
      send_EditUserCarShop(entity);
      return recv_EditUserCarShop();
    }

    public void send_EditUserCarShop(CarShopEntity entity) throws org.apache.thrift.TException
    {
      EditUserCarShop_args args = new EditUserCarShop_args();
      args.setEntity(entity);
      sendBase("EditUserCarShop", args);
    }

    public int recv_EditUserCarShop() throws org.apache.thrift.TException
    {
      EditUserCarShop_result result = new EditUserCarShop_result();
      receiveBase(result, "EditUserCarShop");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "EditUserCarShop failed: unknown result");
    }

    public int UserCarShopCount(CarShopEntity entity) throws org.apache.thrift.TException
    {
      send_UserCarShopCount(entity);
      return recv_UserCarShopCount();
    }

    public void send_UserCarShopCount(CarShopEntity entity) throws org.apache.thrift.TException
    {
      UserCarShopCount_args args = new UserCarShopCount_args();
      args.setEntity(entity);
      sendBase("UserCarShopCount", args);
    }

    public int recv_UserCarShopCount() throws org.apache.thrift.TException
    {
      UserCarShopCount_result result = new UserCarShopCount_result();
      receiveBase(result, "UserCarShopCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "UserCarShopCount failed: unknown result");
    }

    public List<Map<String,String>> UserOrders(OrderEntity entity) throws org.apache.thrift.TException
    {
      send_UserOrders(entity);
      return recv_UserOrders();
    }

    public void send_UserOrders(OrderEntity entity) throws org.apache.thrift.TException
    {
      UserOrders_args args = new UserOrders_args();
      args.setEntity(entity);
      sendBase("UserOrders", args);
    }

    public List<Map<String,String>> recv_UserOrders() throws org.apache.thrift.TException
    {
      UserOrders_result result = new UserOrders_result();
      receiveBase(result, "UserOrders");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "UserOrders failed: unknown result");
    }

    public long CreateShopOrder(OrderEntity entity) throws org.apache.thrift.TException
    {
      send_CreateShopOrder(entity);
      return recv_CreateShopOrder();
    }

    public void send_CreateShopOrder(OrderEntity entity) throws org.apache.thrift.TException
    {
      CreateShopOrder_args args = new CreateShopOrder_args();
      args.setEntity(entity);
      sendBase("CreateShopOrder", args);
    }

    public long recv_CreateShopOrder() throws org.apache.thrift.TException
    {
      CreateShopOrder_result result = new CreateShopOrder_result();
      receiveBase(result, "CreateShopOrder");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "CreateShopOrder failed: unknown result");
    }

    public int CancelShopOrder(OrderEntity entity) throws org.apache.thrift.TException
    {
      send_CancelShopOrder(entity);
      return recv_CancelShopOrder();
    }

    public void send_CancelShopOrder(OrderEntity entity) throws org.apache.thrift.TException
    {
      CancelShopOrder_args args = new CancelShopOrder_args();
      args.setEntity(entity);
      sendBase("CancelShopOrder", args);
    }

    public int recv_CancelShopOrder() throws org.apache.thrift.TException
    {
      CancelShopOrder_result result = new CancelShopOrder_result();
      receiveBase(result, "CancelShopOrder");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "CancelShopOrder failed: unknown result");
    }

    public List<Map<String,String>> UserOrdersInventory(OrderEntity entity) throws org.apache.thrift.TException
    {
      send_UserOrdersInventory(entity);
      return recv_UserOrdersInventory();
    }

    public void send_UserOrdersInventory(OrderEntity entity) throws org.apache.thrift.TException
    {
      UserOrdersInventory_args args = new UserOrdersInventory_args();
      args.setEntity(entity);
      sendBase("UserOrdersInventory", args);
    }

    public List<Map<String,String>> recv_UserOrdersInventory() throws org.apache.thrift.TException
    {
      UserOrdersInventory_result result = new UserOrdersInventory_result();
      receiveBase(result, "UserOrdersInventory");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "UserOrdersInventory failed: unknown result");
    }

    public int EditUserOrdersInventory(OrderEntity entity) throws org.apache.thrift.TException
    {
      send_EditUserOrdersInventory(entity);
      return recv_EditUserOrdersInventory();
    }

    public void send_EditUserOrdersInventory(OrderEntity entity) throws org.apache.thrift.TException
    {
      EditUserOrdersInventory_args args = new EditUserOrdersInventory_args();
      args.setEntity(entity);
      sendBase("EditUserOrdersInventory", args);
    }

    public int recv_EditUserOrdersInventory() throws org.apache.thrift.TException
    {
      EditUserOrdersInventory_result result = new EditUserOrdersInventory_result();
      receiveBase(result, "EditUserOrdersInventory");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "EditUserOrdersInventory failed: unknown result");
    }

    public Map<String,String> AppraiseclassifyCount(AppraiseEntity entity) throws org.apache.thrift.TException
    {
      send_AppraiseclassifyCount(entity);
      return recv_AppraiseclassifyCount();
    }

    public void send_AppraiseclassifyCount(AppraiseEntity entity) throws org.apache.thrift.TException
    {
      AppraiseclassifyCount_args args = new AppraiseclassifyCount_args();
      args.setEntity(entity);
      sendBase("AppraiseclassifyCount", args);
    }

    public Map<String,String> recv_AppraiseclassifyCount() throws org.apache.thrift.TException
    {
      AppraiseclassifyCount_result result = new AppraiseclassifyCount_result();
      receiveBase(result, "AppraiseclassifyCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "AppraiseclassifyCount failed: unknown result");
    }

    public List<AppraiseEntity> goodsAppraise(AppraiseEntity entity) throws org.apache.thrift.TException
    {
      send_goodsAppraise(entity);
      return recv_goodsAppraise();
    }

    public void send_goodsAppraise(AppraiseEntity entity) throws org.apache.thrift.TException
    {
      goodsAppraise_args args = new goodsAppraise_args();
      args.setEntity(entity);
      sendBase("goodsAppraise", args);
    }

    public List<AppraiseEntity> recv_goodsAppraise() throws org.apache.thrift.TException
    {
      goodsAppraise_result result = new goodsAppraise_result();
      receiveBase(result, "goodsAppraise");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "goodsAppraise failed: unknown result");
    }

    public int AppraiseOrder(AppraiseEntity entity, Map<String,String> hmap) throws org.apache.thrift.TException
    {
      send_AppraiseOrder(entity, hmap);
      return recv_AppraiseOrder();
    }

    public void send_AppraiseOrder(AppraiseEntity entity, Map<String,String> hmap) throws org.apache.thrift.TException
    {
      AppraiseOrder_args args = new AppraiseOrder_args();
      args.setEntity(entity);
      args.setHmap(hmap);
      sendBase("AppraiseOrder", args);
    }

    public int recv_AppraiseOrder() throws org.apache.thrift.TException
    {
      AppraiseOrder_result result = new AppraiseOrder_result();
      receiveBase(result, "AppraiseOrder");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "AppraiseOrder failed: unknown result");
    }

    public int ReturnedPurchase(OrderEntity entity, Map<String,String> hmap) throws org.apache.thrift.TException
    {
      send_ReturnedPurchase(entity, hmap);
      return recv_ReturnedPurchase();
    }

    public void send_ReturnedPurchase(OrderEntity entity, Map<String,String> hmap) throws org.apache.thrift.TException
    {
      ReturnedPurchase_args args = new ReturnedPurchase_args();
      args.setEntity(entity);
      args.setHmap(hmap);
      sendBase("ReturnedPurchase", args);
    }

    public int recv_ReturnedPurchase() throws org.apache.thrift.TException
    {
      ReturnedPurchase_result result = new ReturnedPurchase_result();
      receiveBase(result, "ReturnedPurchase");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ReturnedPurchase failed: unknown result");
    }

    public int ApplyAftermarket(OrderEntity entity, Map<String,String> hmap) throws org.apache.thrift.TException
    {
      send_ApplyAftermarket(entity, hmap);
      return recv_ApplyAftermarket();
    }

    public void send_ApplyAftermarket(OrderEntity entity, Map<String,String> hmap) throws org.apache.thrift.TException
    {
      ApplyAftermarket_args args = new ApplyAftermarket_args();
      args.setEntity(entity);
      args.setHmap(hmap);
      sendBase("ApplyAftermarket", args);
    }

    public int recv_ApplyAftermarket() throws org.apache.thrift.TException
    {
      ApplyAftermarket_result result = new ApplyAftermarket_result();
      receiveBase(result, "ApplyAftermarket");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ApplyAftermarket failed: unknown result");
    }

    public List<Map<String,String>> UserFootprints(Map<String,String> hmap) throws org.apache.thrift.TException
    {
      send_UserFootprints(hmap);
      return recv_UserFootprints();
    }

    public void send_UserFootprints(Map<String,String> hmap) throws org.apache.thrift.TException
    {
      UserFootprints_args args = new UserFootprints_args();
      args.setHmap(hmap);
      sendBase("UserFootprints", args);
    }

    public List<Map<String,String>> recv_UserFootprints() throws org.apache.thrift.TException
    {
      UserFootprints_result result = new UserFootprints_result();
      receiveBase(result, "UserFootprints");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "UserFootprints failed: unknown result");
    }

    public int AddFootprint(Map<String,String> hmap) throws org.apache.thrift.TException
    {
      send_AddFootprint(hmap);
      return recv_AddFootprint();
    }

    public void send_AddFootprint(Map<String,String> hmap) throws org.apache.thrift.TException
    {
      AddFootprint_args args = new AddFootprint_args();
      args.setHmap(hmap);
      sendBase("AddFootprint", args);
    }

    public int recv_AddFootprint() throws org.apache.thrift.TException
    {
      AddFootprint_result result = new AddFootprint_result();
      receiveBase(result, "AddFootprint");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "AddFootprint failed: unknown result");
    }

    public int DelFootprint(String id) throws org.apache.thrift.TException
    {
      send_DelFootprint(id);
      return recv_DelFootprint();
    }

    public void send_DelFootprint(String id) throws org.apache.thrift.TException
    {
      DelFootprint_args args = new DelFootprint_args();
      args.setId(id);
      sendBase("DelFootprint", args);
    }

    public int recv_DelFootprint() throws org.apache.thrift.TException
    {
      DelFootprint_result result = new DelFootprint_result();
      receiveBase(result, "DelFootprint");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "DelFootprint failed: unknown result");
    }

    public int FinishAfterSale(Map<String,String> hmap) throws org.apache.thrift.TException
    {
      send_FinishAfterSale(hmap);
      return recv_FinishAfterSale();
    }

    public void send_FinishAfterSale(Map<String,String> hmap) throws org.apache.thrift.TException
    {
      FinishAfterSale_args args = new FinishAfterSale_args();
      args.setHmap(hmap);
      sendBase("FinishAfterSale", args);
    }

    public int recv_FinishAfterSale() throws org.apache.thrift.TException
    {
      FinishAfterSale_result result = new FinishAfterSale_result();
      receiveBase(result, "FinishAfterSale");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "FinishAfterSale failed: unknown result");
    }

    public int ContinueAfterSale(Map<String,String> hmap) throws org.apache.thrift.TException
    {
      send_ContinueAfterSale(hmap);
      return recv_ContinueAfterSale();
    }

    public void send_ContinueAfterSale(Map<String,String> hmap) throws org.apache.thrift.TException
    {
      ContinueAfterSale_args args = new ContinueAfterSale_args();
      args.setHmap(hmap);
      sendBase("ContinueAfterSale", args);
    }

    public int recv_ContinueAfterSale() throws org.apache.thrift.TException
    {
      ContinueAfterSale_result result = new ContinueAfterSale_result();
      receiveBase(result, "ContinueAfterSale");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ContinueAfterSale failed: unknown result");
    }

    public int ReturnAllGoods(Map<String,String> hmap) throws org.apache.thrift.TException
    {
      send_ReturnAllGoods(hmap);
      return recv_ReturnAllGoods();
    }

    public void send_ReturnAllGoods(Map<String,String> hmap) throws org.apache.thrift.TException
    {
      ReturnAllGoods_args args = new ReturnAllGoods_args();
      args.setHmap(hmap);
      sendBase("ReturnAllGoods", args);
    }

    public int recv_ReturnAllGoods() throws org.apache.thrift.TException
    {
      ReturnAllGoods_result result = new ReturnAllGoods_result();
      receiveBase(result, "ReturnAllGoods");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ReturnAllGoods failed: unknown result");
    }

    public int ReturnPartofGoods(Map<String,String> hmap) throws org.apache.thrift.TException
    {
      send_ReturnPartofGoods(hmap);
      return recv_ReturnPartofGoods();
    }

    public void send_ReturnPartofGoods(Map<String,String> hmap) throws org.apache.thrift.TException
    {
      ReturnPartofGoods_args args = new ReturnPartofGoods_args();
      args.setHmap(hmap);
      sendBase("ReturnPartofGoods", args);
    }

    public int recv_ReturnPartofGoods() throws org.apache.thrift.TException
    {
      ReturnPartofGoods_result result = new ReturnPartofGoods_result();
      receiveBase(result, "ReturnPartofGoods");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ReturnPartofGoods failed: unknown result");
    }

    public int ApplyRefund(Map<String,String> hmap) throws org.apache.thrift.TException
    {
      send_ApplyRefund(hmap);
      return recv_ApplyRefund();
    }

    public void send_ApplyRefund(Map<String,String> hmap) throws org.apache.thrift.TException
    {
      ApplyRefund_args args = new ApplyRefund_args();
      args.setHmap(hmap);
      sendBase("ApplyRefund", args);
    }

    public int recv_ApplyRefund() throws org.apache.thrift.TException
    {
      ApplyRefund_result result = new ApplyRefund_result();
      receiveBase(result, "ApplyRefund");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ApplyRefund failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void upOrderHolders(String orderId, String upUserId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      upOrderHolders_call method_call = new upOrderHolders_call(orderId, upUserId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class upOrderHolders_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String orderId;
      private String upUserId;
      public upOrderHolders_call(String orderId, String upUserId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.orderId = orderId;
        this.upUserId = upUserId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("upOrderHolders", org.apache.thrift.protocol.TMessageType.CALL, 0));
        upOrderHolders_args args = new upOrderHolders_args();
        args.setOrderId(orderId);
        args.setUpUserId(upUserId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_upOrderHolders();
      }
    }

    public void UserCarShops(CarShopEntity entity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      UserCarShops_call method_call = new UserCarShops_call(entity, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class UserCarShops_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CarShopEntity entity;
      public UserCarShops_call(CarShopEntity entity, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.entity = entity;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("UserCarShops", org.apache.thrift.protocol.TMessageType.CALL, 0));
        UserCarShops_args args = new UserCarShops_args();
        args.setEntity(entity);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Map<String,String>> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_UserCarShops();
      }
    }

    public void DelUserCarShop(CarShopEntity entity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      DelUserCarShop_call method_call = new DelUserCarShop_call(entity, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class DelUserCarShop_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CarShopEntity entity;
      public DelUserCarShop_call(CarShopEntity entity, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.entity = entity;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("DelUserCarShop", org.apache.thrift.protocol.TMessageType.CALL, 0));
        DelUserCarShop_args args = new DelUserCarShop_args();
        args.setEntity(entity);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_DelUserCarShop();
      }
    }

    public void EditUserCarShop(CarShopEntity entity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      EditUserCarShop_call method_call = new EditUserCarShop_call(entity, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class EditUserCarShop_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CarShopEntity entity;
      public EditUserCarShop_call(CarShopEntity entity, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.entity = entity;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("EditUserCarShop", org.apache.thrift.protocol.TMessageType.CALL, 0));
        EditUserCarShop_args args = new EditUserCarShop_args();
        args.setEntity(entity);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_EditUserCarShop();
      }
    }

    public void UserCarShopCount(CarShopEntity entity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      UserCarShopCount_call method_call = new UserCarShopCount_call(entity, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class UserCarShopCount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CarShopEntity entity;
      public UserCarShopCount_call(CarShopEntity entity, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.entity = entity;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("UserCarShopCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        UserCarShopCount_args args = new UserCarShopCount_args();
        args.setEntity(entity);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_UserCarShopCount();
      }
    }

    public void UserOrders(OrderEntity entity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      UserOrders_call method_call = new UserOrders_call(entity, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class UserOrders_call extends org.apache.thrift.async.TAsyncMethodCall {
      private OrderEntity entity;
      public UserOrders_call(OrderEntity entity, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.entity = entity;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("UserOrders", org.apache.thrift.protocol.TMessageType.CALL, 0));
        UserOrders_args args = new UserOrders_args();
        args.setEntity(entity);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Map<String,String>> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_UserOrders();
      }
    }

    public void CreateShopOrder(OrderEntity entity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      CreateShopOrder_call method_call = new CreateShopOrder_call(entity, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class CreateShopOrder_call extends org.apache.thrift.async.TAsyncMethodCall {
      private OrderEntity entity;
      public CreateShopOrder_call(OrderEntity entity, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.entity = entity;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("CreateShopOrder", org.apache.thrift.protocol.TMessageType.CALL, 0));
        CreateShopOrder_args args = new CreateShopOrder_args();
        args.setEntity(entity);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_CreateShopOrder();
      }
    }

    public void CancelShopOrder(OrderEntity entity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      CancelShopOrder_call method_call = new CancelShopOrder_call(entity, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class CancelShopOrder_call extends org.apache.thrift.async.TAsyncMethodCall {
      private OrderEntity entity;
      public CancelShopOrder_call(OrderEntity entity, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.entity = entity;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("CancelShopOrder", org.apache.thrift.protocol.TMessageType.CALL, 0));
        CancelShopOrder_args args = new CancelShopOrder_args();
        args.setEntity(entity);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_CancelShopOrder();
      }
    }

    public void UserOrdersInventory(OrderEntity entity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      UserOrdersInventory_call method_call = new UserOrdersInventory_call(entity, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class UserOrdersInventory_call extends org.apache.thrift.async.TAsyncMethodCall {
      private OrderEntity entity;
      public UserOrdersInventory_call(OrderEntity entity, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.entity = entity;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("UserOrdersInventory", org.apache.thrift.protocol.TMessageType.CALL, 0));
        UserOrdersInventory_args args = new UserOrdersInventory_args();
        args.setEntity(entity);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Map<String,String>> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_UserOrdersInventory();
      }
    }

    public void EditUserOrdersInventory(OrderEntity entity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      EditUserOrdersInventory_call method_call = new EditUserOrdersInventory_call(entity, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class EditUserOrdersInventory_call extends org.apache.thrift.async.TAsyncMethodCall {
      private OrderEntity entity;
      public EditUserOrdersInventory_call(OrderEntity entity, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.entity = entity;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("EditUserOrdersInventory", org.apache.thrift.protocol.TMessageType.CALL, 0));
        EditUserOrdersInventory_args args = new EditUserOrdersInventory_args();
        args.setEntity(entity);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_EditUserOrdersInventory();
      }
    }

    public void AppraiseclassifyCount(AppraiseEntity entity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      AppraiseclassifyCount_call method_call = new AppraiseclassifyCount_call(entity, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class AppraiseclassifyCount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private AppraiseEntity entity;
      public AppraiseclassifyCount_call(AppraiseEntity entity, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.entity = entity;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("AppraiseclassifyCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        AppraiseclassifyCount_args args = new AppraiseclassifyCount_args();
        args.setEntity(entity);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_AppraiseclassifyCount();
      }
    }

    public void goodsAppraise(AppraiseEntity entity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      goodsAppraise_call method_call = new goodsAppraise_call(entity, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class goodsAppraise_call extends org.apache.thrift.async.TAsyncMethodCall {
      private AppraiseEntity entity;
      public goodsAppraise_call(AppraiseEntity entity, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.entity = entity;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("goodsAppraise", org.apache.thrift.protocol.TMessageType.CALL, 0));
        goodsAppraise_args args = new goodsAppraise_args();
        args.setEntity(entity);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<AppraiseEntity> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_goodsAppraise();
      }
    }

    public void AppraiseOrder(AppraiseEntity entity, Map<String,String> hmap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      AppraiseOrder_call method_call = new AppraiseOrder_call(entity, hmap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class AppraiseOrder_call extends org.apache.thrift.async.TAsyncMethodCall {
      private AppraiseEntity entity;
      private Map<String,String> hmap;
      public AppraiseOrder_call(AppraiseEntity entity, Map<String,String> hmap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.entity = entity;
        this.hmap = hmap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("AppraiseOrder", org.apache.thrift.protocol.TMessageType.CALL, 0));
        AppraiseOrder_args args = new AppraiseOrder_args();
        args.setEntity(entity);
        args.setHmap(hmap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_AppraiseOrder();
      }
    }

    public void ReturnedPurchase(OrderEntity entity, Map<String,String> hmap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ReturnedPurchase_call method_call = new ReturnedPurchase_call(entity, hmap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ReturnedPurchase_call extends org.apache.thrift.async.TAsyncMethodCall {
      private OrderEntity entity;
      private Map<String,String> hmap;
      public ReturnedPurchase_call(OrderEntity entity, Map<String,String> hmap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.entity = entity;
        this.hmap = hmap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ReturnedPurchase", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ReturnedPurchase_args args = new ReturnedPurchase_args();
        args.setEntity(entity);
        args.setHmap(hmap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ReturnedPurchase();
      }
    }

    public void ApplyAftermarket(OrderEntity entity, Map<String,String> hmap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ApplyAftermarket_call method_call = new ApplyAftermarket_call(entity, hmap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ApplyAftermarket_call extends org.apache.thrift.async.TAsyncMethodCall {
      private OrderEntity entity;
      private Map<String,String> hmap;
      public ApplyAftermarket_call(OrderEntity entity, Map<String,String> hmap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.entity = entity;
        this.hmap = hmap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ApplyAftermarket", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ApplyAftermarket_args args = new ApplyAftermarket_args();
        args.setEntity(entity);
        args.setHmap(hmap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ApplyAftermarket();
      }
    }

    public void UserFootprints(Map<String,String> hmap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      UserFootprints_call method_call = new UserFootprints_call(hmap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class UserFootprints_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> hmap;
      public UserFootprints_call(Map<String,String> hmap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hmap = hmap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("UserFootprints", org.apache.thrift.protocol.TMessageType.CALL, 0));
        UserFootprints_args args = new UserFootprints_args();
        args.setHmap(hmap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Map<String,String>> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_UserFootprints();
      }
    }

    public void AddFootprint(Map<String,String> hmap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      AddFootprint_call method_call = new AddFootprint_call(hmap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class AddFootprint_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> hmap;
      public AddFootprint_call(Map<String,String> hmap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hmap = hmap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("AddFootprint", org.apache.thrift.protocol.TMessageType.CALL, 0));
        AddFootprint_args args = new AddFootprint_args();
        args.setHmap(hmap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_AddFootprint();
      }
    }

    public void DelFootprint(String id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      DelFootprint_call method_call = new DelFootprint_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class DelFootprint_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String id;
      public DelFootprint_call(String id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("DelFootprint", org.apache.thrift.protocol.TMessageType.CALL, 0));
        DelFootprint_args args = new DelFootprint_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_DelFootprint();
      }
    }

    public void FinishAfterSale(Map<String,String> hmap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      FinishAfterSale_call method_call = new FinishAfterSale_call(hmap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class FinishAfterSale_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> hmap;
      public FinishAfterSale_call(Map<String,String> hmap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hmap = hmap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("FinishAfterSale", org.apache.thrift.protocol.TMessageType.CALL, 0));
        FinishAfterSale_args args = new FinishAfterSale_args();
        args.setHmap(hmap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_FinishAfterSale();
      }
    }

    public void ContinueAfterSale(Map<String,String> hmap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ContinueAfterSale_call method_call = new ContinueAfterSale_call(hmap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ContinueAfterSale_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> hmap;
      public ContinueAfterSale_call(Map<String,String> hmap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hmap = hmap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ContinueAfterSale", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ContinueAfterSale_args args = new ContinueAfterSale_args();
        args.setHmap(hmap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ContinueAfterSale();
      }
    }

    public void ReturnAllGoods(Map<String,String> hmap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ReturnAllGoods_call method_call = new ReturnAllGoods_call(hmap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ReturnAllGoods_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> hmap;
      public ReturnAllGoods_call(Map<String,String> hmap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hmap = hmap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ReturnAllGoods", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ReturnAllGoods_args args = new ReturnAllGoods_args();
        args.setHmap(hmap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ReturnAllGoods();
      }
    }

    public void ReturnPartofGoods(Map<String,String> hmap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ReturnPartofGoods_call method_call = new ReturnPartofGoods_call(hmap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ReturnPartofGoods_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> hmap;
      public ReturnPartofGoods_call(Map<String,String> hmap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hmap = hmap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ReturnPartofGoods", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ReturnPartofGoods_args args = new ReturnPartofGoods_args();
        args.setHmap(hmap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ReturnPartofGoods();
      }
    }

    public void ApplyRefund(Map<String,String> hmap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ApplyRefund_call method_call = new ApplyRefund_call(hmap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ApplyRefund_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> hmap;
      public ApplyRefund_call(Map<String,String> hmap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hmap = hmap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ApplyRefund", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ApplyRefund_args args = new ApplyRefund_args();
        args.setHmap(hmap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ApplyRefund();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("upOrderHolders", new upOrderHolders());
      processMap.put("UserCarShops", new UserCarShops());
      processMap.put("DelUserCarShop", new DelUserCarShop());
      processMap.put("EditUserCarShop", new EditUserCarShop());
      processMap.put("UserCarShopCount", new UserCarShopCount());
      processMap.put("UserOrders", new UserOrders());
      processMap.put("CreateShopOrder", new CreateShopOrder());
      processMap.put("CancelShopOrder", new CancelShopOrder());
      processMap.put("UserOrdersInventory", new UserOrdersInventory());
      processMap.put("EditUserOrdersInventory", new EditUserOrdersInventory());
      processMap.put("AppraiseclassifyCount", new AppraiseclassifyCount());
      processMap.put("goodsAppraise", new goodsAppraise());
      processMap.put("AppraiseOrder", new AppraiseOrder());
      processMap.put("ReturnedPurchase", new ReturnedPurchase());
      processMap.put("ApplyAftermarket", new ApplyAftermarket());
      processMap.put("UserFootprints", new UserFootprints());
      processMap.put("AddFootprint", new AddFootprint());
      processMap.put("DelFootprint", new DelFootprint());
      processMap.put("FinishAfterSale", new FinishAfterSale());
      processMap.put("ContinueAfterSale", new ContinueAfterSale());
      processMap.put("ReturnAllGoods", new ReturnAllGoods());
      processMap.put("ReturnPartofGoods", new ReturnPartofGoods());
      processMap.put("ApplyRefund", new ApplyRefund());
      return processMap;
    }

    public static class upOrderHolders<I extends Iface> extends org.apache.thrift.ProcessFunction<I, upOrderHolders_args> {
      public upOrderHolders() {
        super("upOrderHolders");
      }

      public upOrderHolders_args getEmptyArgsInstance() {
        return new upOrderHolders_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public upOrderHolders_result getResult(I iface, upOrderHolders_args args) throws org.apache.thrift.TException {
        upOrderHolders_result result = new upOrderHolders_result();
        result.success = iface.upOrderHolders(args.orderId, args.upUserId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class UserCarShops<I extends Iface> extends org.apache.thrift.ProcessFunction<I, UserCarShops_args> {
      public UserCarShops() {
        super("UserCarShops");
      }

      public UserCarShops_args getEmptyArgsInstance() {
        return new UserCarShops_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public UserCarShops_result getResult(I iface, UserCarShops_args args) throws org.apache.thrift.TException {
        UserCarShops_result result = new UserCarShops_result();
        result.success = iface.UserCarShops(args.entity);
        return result;
      }
    }

    public static class DelUserCarShop<I extends Iface> extends org.apache.thrift.ProcessFunction<I, DelUserCarShop_args> {
      public DelUserCarShop() {
        super("DelUserCarShop");
      }

      public DelUserCarShop_args getEmptyArgsInstance() {
        return new DelUserCarShop_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public DelUserCarShop_result getResult(I iface, DelUserCarShop_args args) throws org.apache.thrift.TException {
        DelUserCarShop_result result = new DelUserCarShop_result();
        result.success = iface.DelUserCarShop(args.entity);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class EditUserCarShop<I extends Iface> extends org.apache.thrift.ProcessFunction<I, EditUserCarShop_args> {
      public EditUserCarShop() {
        super("EditUserCarShop");
      }

      public EditUserCarShop_args getEmptyArgsInstance() {
        return new EditUserCarShop_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public EditUserCarShop_result getResult(I iface, EditUserCarShop_args args) throws org.apache.thrift.TException {
        EditUserCarShop_result result = new EditUserCarShop_result();
        result.success = iface.EditUserCarShop(args.entity);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class UserCarShopCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, UserCarShopCount_args> {
      public UserCarShopCount() {
        super("UserCarShopCount");
      }

      public UserCarShopCount_args getEmptyArgsInstance() {
        return new UserCarShopCount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public UserCarShopCount_result getResult(I iface, UserCarShopCount_args args) throws org.apache.thrift.TException {
        UserCarShopCount_result result = new UserCarShopCount_result();
        result.success = iface.UserCarShopCount(args.entity);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class UserOrders<I extends Iface> extends org.apache.thrift.ProcessFunction<I, UserOrders_args> {
      public UserOrders() {
        super("UserOrders");
      }

      public UserOrders_args getEmptyArgsInstance() {
        return new UserOrders_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public UserOrders_result getResult(I iface, UserOrders_args args) throws org.apache.thrift.TException {
        UserOrders_result result = new UserOrders_result();
        result.success = iface.UserOrders(args.entity);
        return result;
      }
    }

    public static class CreateShopOrder<I extends Iface> extends org.apache.thrift.ProcessFunction<I, CreateShopOrder_args> {
      public CreateShopOrder() {
        super("CreateShopOrder");
      }

      public CreateShopOrder_args getEmptyArgsInstance() {
        return new CreateShopOrder_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public CreateShopOrder_result getResult(I iface, CreateShopOrder_args args) throws org.apache.thrift.TException {
        CreateShopOrder_result result = new CreateShopOrder_result();
        result.success = iface.CreateShopOrder(args.entity);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class CancelShopOrder<I extends Iface> extends org.apache.thrift.ProcessFunction<I, CancelShopOrder_args> {
      public CancelShopOrder() {
        super("CancelShopOrder");
      }

      public CancelShopOrder_args getEmptyArgsInstance() {
        return new CancelShopOrder_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public CancelShopOrder_result getResult(I iface, CancelShopOrder_args args) throws org.apache.thrift.TException {
        CancelShopOrder_result result = new CancelShopOrder_result();
        result.success = iface.CancelShopOrder(args.entity);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class UserOrdersInventory<I extends Iface> extends org.apache.thrift.ProcessFunction<I, UserOrdersInventory_args> {
      public UserOrdersInventory() {
        super("UserOrdersInventory");
      }

      public UserOrdersInventory_args getEmptyArgsInstance() {
        return new UserOrdersInventory_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public UserOrdersInventory_result getResult(I iface, UserOrdersInventory_args args) throws org.apache.thrift.TException {
        UserOrdersInventory_result result = new UserOrdersInventory_result();
        result.success = iface.UserOrdersInventory(args.entity);
        return result;
      }
    }

    public static class EditUserOrdersInventory<I extends Iface> extends org.apache.thrift.ProcessFunction<I, EditUserOrdersInventory_args> {
      public EditUserOrdersInventory() {
        super("EditUserOrdersInventory");
      }

      public EditUserOrdersInventory_args getEmptyArgsInstance() {
        return new EditUserOrdersInventory_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public EditUserOrdersInventory_result getResult(I iface, EditUserOrdersInventory_args args) throws org.apache.thrift.TException {
        EditUserOrdersInventory_result result = new EditUserOrdersInventory_result();
        result.success = iface.EditUserOrdersInventory(args.entity);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class AppraiseclassifyCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, AppraiseclassifyCount_args> {
      public AppraiseclassifyCount() {
        super("AppraiseclassifyCount");
      }

      public AppraiseclassifyCount_args getEmptyArgsInstance() {
        return new AppraiseclassifyCount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public AppraiseclassifyCount_result getResult(I iface, AppraiseclassifyCount_args args) throws org.apache.thrift.TException {
        AppraiseclassifyCount_result result = new AppraiseclassifyCount_result();
        result.success = iface.AppraiseclassifyCount(args.entity);
        return result;
      }
    }

    public static class goodsAppraise<I extends Iface> extends org.apache.thrift.ProcessFunction<I, goodsAppraise_args> {
      public goodsAppraise() {
        super("goodsAppraise");
      }

      public goodsAppraise_args getEmptyArgsInstance() {
        return new goodsAppraise_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public goodsAppraise_result getResult(I iface, goodsAppraise_args args) throws org.apache.thrift.TException {
        goodsAppraise_result result = new goodsAppraise_result();
        result.success = iface.goodsAppraise(args.entity);
        return result;
      }
    }

    public static class AppraiseOrder<I extends Iface> extends org.apache.thrift.ProcessFunction<I, AppraiseOrder_args> {
      public AppraiseOrder() {
        super("AppraiseOrder");
      }

      public AppraiseOrder_args getEmptyArgsInstance() {
        return new AppraiseOrder_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public AppraiseOrder_result getResult(I iface, AppraiseOrder_args args) throws org.apache.thrift.TException {
        AppraiseOrder_result result = new AppraiseOrder_result();
        result.success = iface.AppraiseOrder(args.entity, args.hmap);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class ReturnedPurchase<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ReturnedPurchase_args> {
      public ReturnedPurchase() {
        super("ReturnedPurchase");
      }

      public ReturnedPurchase_args getEmptyArgsInstance() {
        return new ReturnedPurchase_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ReturnedPurchase_result getResult(I iface, ReturnedPurchase_args args) throws org.apache.thrift.TException {
        ReturnedPurchase_result result = new ReturnedPurchase_result();
        result.success = iface.ReturnedPurchase(args.entity, args.hmap);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class ApplyAftermarket<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ApplyAftermarket_args> {
      public ApplyAftermarket() {
        super("ApplyAftermarket");
      }

      public ApplyAftermarket_args getEmptyArgsInstance() {
        return new ApplyAftermarket_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ApplyAftermarket_result getResult(I iface, ApplyAftermarket_args args) throws org.apache.thrift.TException {
        ApplyAftermarket_result result = new ApplyAftermarket_result();
        result.success = iface.ApplyAftermarket(args.entity, args.hmap);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class UserFootprints<I extends Iface> extends org.apache.thrift.ProcessFunction<I, UserFootprints_args> {
      public UserFootprints() {
        super("UserFootprints");
      }

      public UserFootprints_args getEmptyArgsInstance() {
        return new UserFootprints_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public UserFootprints_result getResult(I iface, UserFootprints_args args) throws org.apache.thrift.TException {
        UserFootprints_result result = new UserFootprints_result();
        result.success = iface.UserFootprints(args.hmap);
        return result;
      }
    }

    public static class AddFootprint<I extends Iface> extends org.apache.thrift.ProcessFunction<I, AddFootprint_args> {
      public AddFootprint() {
        super("AddFootprint");
      }

      public AddFootprint_args getEmptyArgsInstance() {
        return new AddFootprint_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public AddFootprint_result getResult(I iface, AddFootprint_args args) throws org.apache.thrift.TException {
        AddFootprint_result result = new AddFootprint_result();
        result.success = iface.AddFootprint(args.hmap);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class DelFootprint<I extends Iface> extends org.apache.thrift.ProcessFunction<I, DelFootprint_args> {
      public DelFootprint() {
        super("DelFootprint");
      }

      public DelFootprint_args getEmptyArgsInstance() {
        return new DelFootprint_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public DelFootprint_result getResult(I iface, DelFootprint_args args) throws org.apache.thrift.TException {
        DelFootprint_result result = new DelFootprint_result();
        result.success = iface.DelFootprint(args.id);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class FinishAfterSale<I extends Iface> extends org.apache.thrift.ProcessFunction<I, FinishAfterSale_args> {
      public FinishAfterSale() {
        super("FinishAfterSale");
      }

      public FinishAfterSale_args getEmptyArgsInstance() {
        return new FinishAfterSale_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public FinishAfterSale_result getResult(I iface, FinishAfterSale_args args) throws org.apache.thrift.TException {
        FinishAfterSale_result result = new FinishAfterSale_result();
        result.success = iface.FinishAfterSale(args.hmap);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class ContinueAfterSale<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ContinueAfterSale_args> {
      public ContinueAfterSale() {
        super("ContinueAfterSale");
      }

      public ContinueAfterSale_args getEmptyArgsInstance() {
        return new ContinueAfterSale_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ContinueAfterSale_result getResult(I iface, ContinueAfterSale_args args) throws org.apache.thrift.TException {
        ContinueAfterSale_result result = new ContinueAfterSale_result();
        result.success = iface.ContinueAfterSale(args.hmap);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class ReturnAllGoods<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ReturnAllGoods_args> {
      public ReturnAllGoods() {
        super("ReturnAllGoods");
      }

      public ReturnAllGoods_args getEmptyArgsInstance() {
        return new ReturnAllGoods_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ReturnAllGoods_result getResult(I iface, ReturnAllGoods_args args) throws org.apache.thrift.TException {
        ReturnAllGoods_result result = new ReturnAllGoods_result();
        result.success = iface.ReturnAllGoods(args.hmap);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class ReturnPartofGoods<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ReturnPartofGoods_args> {
      public ReturnPartofGoods() {
        super("ReturnPartofGoods");
      }

      public ReturnPartofGoods_args getEmptyArgsInstance() {
        return new ReturnPartofGoods_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ReturnPartofGoods_result getResult(I iface, ReturnPartofGoods_args args) throws org.apache.thrift.TException {
        ReturnPartofGoods_result result = new ReturnPartofGoods_result();
        result.success = iface.ReturnPartofGoods(args.hmap);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class ApplyRefund<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ApplyRefund_args> {
      public ApplyRefund() {
        super("ApplyRefund");
      }

      public ApplyRefund_args getEmptyArgsInstance() {
        return new ApplyRefund_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ApplyRefund_result getResult(I iface, ApplyRefund_args args) throws org.apache.thrift.TException {
        ApplyRefund_result result = new ApplyRefund_result();
        result.success = iface.ApplyRefund(args.hmap);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("upOrderHolders", new upOrderHolders());
      processMap.put("UserCarShops", new UserCarShops());
      processMap.put("DelUserCarShop", new DelUserCarShop());
      processMap.put("EditUserCarShop", new EditUserCarShop());
      processMap.put("UserCarShopCount", new UserCarShopCount());
      processMap.put("UserOrders", new UserOrders());
      processMap.put("CreateShopOrder", new CreateShopOrder());
      processMap.put("CancelShopOrder", new CancelShopOrder());
      processMap.put("UserOrdersInventory", new UserOrdersInventory());
      processMap.put("EditUserOrdersInventory", new EditUserOrdersInventory());
      processMap.put("AppraiseclassifyCount", new AppraiseclassifyCount());
      processMap.put("goodsAppraise", new goodsAppraise());
      processMap.put("AppraiseOrder", new AppraiseOrder());
      processMap.put("ReturnedPurchase", new ReturnedPurchase());
      processMap.put("ApplyAftermarket", new ApplyAftermarket());
      processMap.put("UserFootprints", new UserFootprints());
      processMap.put("AddFootprint", new AddFootprint());
      processMap.put("DelFootprint", new DelFootprint());
      processMap.put("FinishAfterSale", new FinishAfterSale());
      processMap.put("ContinueAfterSale", new ContinueAfterSale());
      processMap.put("ReturnAllGoods", new ReturnAllGoods());
      processMap.put("ReturnPartofGoods", new ReturnPartofGoods());
      processMap.put("ApplyRefund", new ApplyRefund());
      return processMap;
    }

    public static class upOrderHolders<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, upOrderHolders_args, Integer> {
      public upOrderHolders() {
        super("upOrderHolders");
      }

      public upOrderHolders_args getEmptyArgsInstance() {
        return new upOrderHolders_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            upOrderHolders_result result = new upOrderHolders_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            upOrderHolders_result result = new upOrderHolders_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, upOrderHolders_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.upOrderHolders(args.orderId, args.upUserId,resultHandler);
      }
    }

    public static class UserCarShops<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, UserCarShops_args, List<Map<String,String>>> {
      public UserCarShops() {
        super("UserCarShops");
      }

      public UserCarShops_args getEmptyArgsInstance() {
        return new UserCarShops_args();
      }

      public AsyncMethodCallback<List<Map<String,String>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Map<String,String>>>() { 
          public void onComplete(List<Map<String,String>> o) {
            UserCarShops_result result = new UserCarShops_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            UserCarShops_result result = new UserCarShops_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, UserCarShops_args args, org.apache.thrift.async.AsyncMethodCallback<List<Map<String,String>>> resultHandler) throws TException {
        iface.UserCarShops(args.entity,resultHandler);
      }
    }

    public static class DelUserCarShop<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, DelUserCarShop_args, Integer> {
      public DelUserCarShop() {
        super("DelUserCarShop");
      }

      public DelUserCarShop_args getEmptyArgsInstance() {
        return new DelUserCarShop_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            DelUserCarShop_result result = new DelUserCarShop_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            DelUserCarShop_result result = new DelUserCarShop_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, DelUserCarShop_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.DelUserCarShop(args.entity,resultHandler);
      }
    }

    public static class EditUserCarShop<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, EditUserCarShop_args, Integer> {
      public EditUserCarShop() {
        super("EditUserCarShop");
      }

      public EditUserCarShop_args getEmptyArgsInstance() {
        return new EditUserCarShop_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            EditUserCarShop_result result = new EditUserCarShop_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            EditUserCarShop_result result = new EditUserCarShop_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, EditUserCarShop_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.EditUserCarShop(args.entity,resultHandler);
      }
    }

    public static class UserCarShopCount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, UserCarShopCount_args, Integer> {
      public UserCarShopCount() {
        super("UserCarShopCount");
      }

      public UserCarShopCount_args getEmptyArgsInstance() {
        return new UserCarShopCount_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            UserCarShopCount_result result = new UserCarShopCount_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            UserCarShopCount_result result = new UserCarShopCount_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, UserCarShopCount_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.UserCarShopCount(args.entity,resultHandler);
      }
    }

    public static class UserOrders<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, UserOrders_args, List<Map<String,String>>> {
      public UserOrders() {
        super("UserOrders");
      }

      public UserOrders_args getEmptyArgsInstance() {
        return new UserOrders_args();
      }

      public AsyncMethodCallback<List<Map<String,String>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Map<String,String>>>() { 
          public void onComplete(List<Map<String,String>> o) {
            UserOrders_result result = new UserOrders_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            UserOrders_result result = new UserOrders_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, UserOrders_args args, org.apache.thrift.async.AsyncMethodCallback<List<Map<String,String>>> resultHandler) throws TException {
        iface.UserOrders(args.entity,resultHandler);
      }
    }

    public static class CreateShopOrder<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, CreateShopOrder_args, Long> {
      public CreateShopOrder() {
        super("CreateShopOrder");
      }

      public CreateShopOrder_args getEmptyArgsInstance() {
        return new CreateShopOrder_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            CreateShopOrder_result result = new CreateShopOrder_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            CreateShopOrder_result result = new CreateShopOrder_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, CreateShopOrder_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.CreateShopOrder(args.entity,resultHandler);
      }
    }

    public static class CancelShopOrder<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, CancelShopOrder_args, Integer> {
      public CancelShopOrder() {
        super("CancelShopOrder");
      }

      public CancelShopOrder_args getEmptyArgsInstance() {
        return new CancelShopOrder_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            CancelShopOrder_result result = new CancelShopOrder_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            CancelShopOrder_result result = new CancelShopOrder_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, CancelShopOrder_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.CancelShopOrder(args.entity,resultHandler);
      }
    }

    public static class UserOrdersInventory<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, UserOrdersInventory_args, List<Map<String,String>>> {
      public UserOrdersInventory() {
        super("UserOrdersInventory");
      }

      public UserOrdersInventory_args getEmptyArgsInstance() {
        return new UserOrdersInventory_args();
      }

      public AsyncMethodCallback<List<Map<String,String>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Map<String,String>>>() { 
          public void onComplete(List<Map<String,String>> o) {
            UserOrdersInventory_result result = new UserOrdersInventory_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            UserOrdersInventory_result result = new UserOrdersInventory_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, UserOrdersInventory_args args, org.apache.thrift.async.AsyncMethodCallback<List<Map<String,String>>> resultHandler) throws TException {
        iface.UserOrdersInventory(args.entity,resultHandler);
      }
    }

    public static class EditUserOrdersInventory<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, EditUserOrdersInventory_args, Integer> {
      public EditUserOrdersInventory() {
        super("EditUserOrdersInventory");
      }

      public EditUserOrdersInventory_args getEmptyArgsInstance() {
        return new EditUserOrdersInventory_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            EditUserOrdersInventory_result result = new EditUserOrdersInventory_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            EditUserOrdersInventory_result result = new EditUserOrdersInventory_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, EditUserOrdersInventory_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.EditUserOrdersInventory(args.entity,resultHandler);
      }
    }

    public static class AppraiseclassifyCount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, AppraiseclassifyCount_args, Map<String,String>> {
      public AppraiseclassifyCount() {
        super("AppraiseclassifyCount");
      }

      public AppraiseclassifyCount_args getEmptyArgsInstance() {
        return new AppraiseclassifyCount_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            AppraiseclassifyCount_result result = new AppraiseclassifyCount_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            AppraiseclassifyCount_result result = new AppraiseclassifyCount_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, AppraiseclassifyCount_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.AppraiseclassifyCount(args.entity,resultHandler);
      }
    }

    public static class goodsAppraise<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, goodsAppraise_args, List<AppraiseEntity>> {
      public goodsAppraise() {
        super("goodsAppraise");
      }

      public goodsAppraise_args getEmptyArgsInstance() {
        return new goodsAppraise_args();
      }

      public AsyncMethodCallback<List<AppraiseEntity>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<AppraiseEntity>>() { 
          public void onComplete(List<AppraiseEntity> o) {
            goodsAppraise_result result = new goodsAppraise_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            goodsAppraise_result result = new goodsAppraise_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, goodsAppraise_args args, org.apache.thrift.async.AsyncMethodCallback<List<AppraiseEntity>> resultHandler) throws TException {
        iface.goodsAppraise(args.entity,resultHandler);
      }
    }

    public static class AppraiseOrder<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, AppraiseOrder_args, Integer> {
      public AppraiseOrder() {
        super("AppraiseOrder");
      }

      public AppraiseOrder_args getEmptyArgsInstance() {
        return new AppraiseOrder_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            AppraiseOrder_result result = new AppraiseOrder_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            AppraiseOrder_result result = new AppraiseOrder_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, AppraiseOrder_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.AppraiseOrder(args.entity, args.hmap,resultHandler);
      }
    }

    public static class ReturnedPurchase<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ReturnedPurchase_args, Integer> {
      public ReturnedPurchase() {
        super("ReturnedPurchase");
      }

      public ReturnedPurchase_args getEmptyArgsInstance() {
        return new ReturnedPurchase_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            ReturnedPurchase_result result = new ReturnedPurchase_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            ReturnedPurchase_result result = new ReturnedPurchase_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ReturnedPurchase_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.ReturnedPurchase(args.entity, args.hmap,resultHandler);
      }
    }

    public static class ApplyAftermarket<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ApplyAftermarket_args, Integer> {
      public ApplyAftermarket() {
        super("ApplyAftermarket");
      }

      public ApplyAftermarket_args getEmptyArgsInstance() {
        return new ApplyAftermarket_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            ApplyAftermarket_result result = new ApplyAftermarket_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            ApplyAftermarket_result result = new ApplyAftermarket_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ApplyAftermarket_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.ApplyAftermarket(args.entity, args.hmap,resultHandler);
      }
    }

    public static class UserFootprints<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, UserFootprints_args, List<Map<String,String>>> {
      public UserFootprints() {
        super("UserFootprints");
      }

      public UserFootprints_args getEmptyArgsInstance() {
        return new UserFootprints_args();
      }

      public AsyncMethodCallback<List<Map<String,String>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Map<String,String>>>() { 
          public void onComplete(List<Map<String,String>> o) {
            UserFootprints_result result = new UserFootprints_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            UserFootprints_result result = new UserFootprints_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, UserFootprints_args args, org.apache.thrift.async.AsyncMethodCallback<List<Map<String,String>>> resultHandler) throws TException {
        iface.UserFootprints(args.hmap,resultHandler);
      }
    }

    public static class AddFootprint<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, AddFootprint_args, Integer> {
      public AddFootprint() {
        super("AddFootprint");
      }

      public AddFootprint_args getEmptyArgsInstance() {
        return new AddFootprint_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            AddFootprint_result result = new AddFootprint_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            AddFootprint_result result = new AddFootprint_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, AddFootprint_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.AddFootprint(args.hmap,resultHandler);
      }
    }

    public static class DelFootprint<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, DelFootprint_args, Integer> {
      public DelFootprint() {
        super("DelFootprint");
      }

      public DelFootprint_args getEmptyArgsInstance() {
        return new DelFootprint_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            DelFootprint_result result = new DelFootprint_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            DelFootprint_result result = new DelFootprint_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, DelFootprint_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.DelFootprint(args.id,resultHandler);
      }
    }

    public static class FinishAfterSale<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, FinishAfterSale_args, Integer> {
      public FinishAfterSale() {
        super("FinishAfterSale");
      }

      public FinishAfterSale_args getEmptyArgsInstance() {
        return new FinishAfterSale_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            FinishAfterSale_result result = new FinishAfterSale_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            FinishAfterSale_result result = new FinishAfterSale_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, FinishAfterSale_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.FinishAfterSale(args.hmap,resultHandler);
      }
    }

    public static class ContinueAfterSale<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ContinueAfterSale_args, Integer> {
      public ContinueAfterSale() {
        super("ContinueAfterSale");
      }

      public ContinueAfterSale_args getEmptyArgsInstance() {
        return new ContinueAfterSale_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            ContinueAfterSale_result result = new ContinueAfterSale_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            ContinueAfterSale_result result = new ContinueAfterSale_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ContinueAfterSale_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.ContinueAfterSale(args.hmap,resultHandler);
      }
    }

    public static class ReturnAllGoods<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ReturnAllGoods_args, Integer> {
      public ReturnAllGoods() {
        super("ReturnAllGoods");
      }

      public ReturnAllGoods_args getEmptyArgsInstance() {
        return new ReturnAllGoods_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            ReturnAllGoods_result result = new ReturnAllGoods_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            ReturnAllGoods_result result = new ReturnAllGoods_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ReturnAllGoods_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.ReturnAllGoods(args.hmap,resultHandler);
      }
    }

    public static class ReturnPartofGoods<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ReturnPartofGoods_args, Integer> {
      public ReturnPartofGoods() {
        super("ReturnPartofGoods");
      }

      public ReturnPartofGoods_args getEmptyArgsInstance() {
        return new ReturnPartofGoods_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            ReturnPartofGoods_result result = new ReturnPartofGoods_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            ReturnPartofGoods_result result = new ReturnPartofGoods_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ReturnPartofGoods_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.ReturnPartofGoods(args.hmap,resultHandler);
      }
    }

    public static class ApplyRefund<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ApplyRefund_args, Integer> {
      public ApplyRefund() {
        super("ApplyRefund");
      }

      public ApplyRefund_args getEmptyArgsInstance() {
        return new ApplyRefund_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            ApplyRefund_result result = new ApplyRefund_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            ApplyRefund_result result = new ApplyRefund_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ApplyRefund_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.ApplyRefund(args.hmap,resultHandler);
      }
    }

  }

  public static class upOrderHolders_args implements org.apache.thrift.TBase<upOrderHolders_args, upOrderHolders_args._Fields>, java.io.Serializable, Cloneable, Comparable<upOrderHolders_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("upOrderHolders_args");

    private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField UP_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("upUserId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new upOrderHolders_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new upOrderHolders_argsTupleSchemeFactory());
    }

    public String orderId; // required
    public String upUserId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORDER_ID((short)1, "orderId"),
      UP_USER_ID((short)2, "upUserId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORDER_ID
            return ORDER_ID;
          case 2: // UP_USER_ID
            return UP_USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.UP_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("upUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(upOrderHolders_args.class, metaDataMap);
    }

    public upOrderHolders_args() {
    }

    public upOrderHolders_args(
      String orderId,
      String upUserId)
    {
      this();
      this.orderId = orderId;
      this.upUserId = upUserId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public upOrderHolders_args(upOrderHolders_args other) {
      if (other.isSetOrderId()) {
        this.orderId = other.orderId;
      }
      if (other.isSetUpUserId()) {
        this.upUserId = other.upUserId;
      }
    }

    public upOrderHolders_args deepCopy() {
      return new upOrderHolders_args(this);
    }

    @Override
    public void clear() {
      this.orderId = null;
      this.upUserId = null;
    }

    public String getOrderId() {
      return this.orderId;
    }

    public upOrderHolders_args setOrderId(String orderId) {
      this.orderId = orderId;
      return this;
    }

    public void unsetOrderId() {
      this.orderId = null;
    }

    /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
    public boolean isSetOrderId() {
      return this.orderId != null;
    }

    public void setOrderIdIsSet(boolean value) {
      if (!value) {
        this.orderId = null;
      }
    }

    public String getUpUserId() {
      return this.upUserId;
    }

    public upOrderHolders_args setUpUserId(String upUserId) {
      this.upUserId = upUserId;
      return this;
    }

    public void unsetUpUserId() {
      this.upUserId = null;
    }

    /** Returns true if field upUserId is set (has been assigned a value) and false otherwise */
    public boolean isSetUpUserId() {
      return this.upUserId != null;
    }

    public void setUpUserIdIsSet(boolean value) {
      if (!value) {
        this.upUserId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORDER_ID:
        if (value == null) {
          unsetOrderId();
        } else {
          setOrderId((String)value);
        }
        break;

      case UP_USER_ID:
        if (value == null) {
          unsetUpUserId();
        } else {
          setUpUserId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORDER_ID:
        return getOrderId();

      case UP_USER_ID:
        return getUpUserId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORDER_ID:
        return isSetOrderId();
      case UP_USER_ID:
        return isSetUpUserId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof upOrderHolders_args)
        return this.equals((upOrderHolders_args)that);
      return false;
    }

    public boolean equals(upOrderHolders_args that) {
      if (that == null)
        return false;

      boolean this_present_orderId = true && this.isSetOrderId();
      boolean that_present_orderId = true && that.isSetOrderId();
      if (this_present_orderId || that_present_orderId) {
        if (!(this_present_orderId && that_present_orderId))
          return false;
        if (!this.orderId.equals(that.orderId))
          return false;
      }

      boolean this_present_upUserId = true && this.isSetUpUserId();
      boolean that_present_upUserId = true && that.isSetUpUserId();
      if (this_present_upUserId || that_present_upUserId) {
        if (!(this_present_upUserId && that_present_upUserId))
          return false;
        if (!this.upUserId.equals(that.upUserId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_orderId = true && (isSetOrderId());
      list.add(present_orderId);
      if (present_orderId)
        list.add(orderId);

      boolean present_upUserId = true && (isSetUpUserId());
      list.add(present_upUserId);
      if (present_upUserId)
        list.add(upUserId);

      return list.hashCode();
    }

    @Override
    public int compareTo(upOrderHolders_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(other.isSetOrderId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrderId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, other.orderId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUpUserId()).compareTo(other.isSetUpUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUpUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.upUserId, other.upUserId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("upOrderHolders_args(");
      boolean first = true;

      sb.append("orderId:");
      if (this.orderId == null) {
        sb.append("null");
      } else {
        sb.append(this.orderId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("upUserId:");
      if (this.upUserId == null) {
        sb.append("null");
      } else {
        sb.append(this.upUserId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class upOrderHolders_argsStandardSchemeFactory implements SchemeFactory {
      public upOrderHolders_argsStandardScheme getScheme() {
        return new upOrderHolders_argsStandardScheme();
      }
    }

    private static class upOrderHolders_argsStandardScheme extends StandardScheme<upOrderHolders_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, upOrderHolders_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORDER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.orderId = iprot.readString();
                struct.setOrderIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UP_USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.upUserId = iprot.readString();
                struct.setUpUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, upOrderHolders_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.orderId != null) {
          oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
          oprot.writeString(struct.orderId);
          oprot.writeFieldEnd();
        }
        if (struct.upUserId != null) {
          oprot.writeFieldBegin(UP_USER_ID_FIELD_DESC);
          oprot.writeString(struct.upUserId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class upOrderHolders_argsTupleSchemeFactory implements SchemeFactory {
      public upOrderHolders_argsTupleScheme getScheme() {
        return new upOrderHolders_argsTupleScheme();
      }
    }

    private static class upOrderHolders_argsTupleScheme extends TupleScheme<upOrderHolders_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, upOrderHolders_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOrderId()) {
          optionals.set(0);
        }
        if (struct.isSetUpUserId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOrderId()) {
          oprot.writeString(struct.orderId);
        }
        if (struct.isSetUpUserId()) {
          oprot.writeString(struct.upUserId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, upOrderHolders_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.orderId = iprot.readString();
          struct.setOrderIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.upUserId = iprot.readString();
          struct.setUpUserIdIsSet(true);
        }
      }
    }

  }

  public static class upOrderHolders_result implements org.apache.thrift.TBase<upOrderHolders_result, upOrderHolders_result._Fields>, java.io.Serializable, Cloneable, Comparable<upOrderHolders_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("upOrderHolders_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new upOrderHolders_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new upOrderHolders_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(upOrderHolders_result.class, metaDataMap);
    }

    public upOrderHolders_result() {
    }

    public upOrderHolders_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public upOrderHolders_result(upOrderHolders_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public upOrderHolders_result deepCopy() {
      return new upOrderHolders_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public upOrderHolders_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof upOrderHolders_result)
        return this.equals((upOrderHolders_result)that);
      return false;
    }

    public boolean equals(upOrderHolders_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(upOrderHolders_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("upOrderHolders_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class upOrderHolders_resultStandardSchemeFactory implements SchemeFactory {
      public upOrderHolders_resultStandardScheme getScheme() {
        return new upOrderHolders_resultStandardScheme();
      }
    }

    private static class upOrderHolders_resultStandardScheme extends StandardScheme<upOrderHolders_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, upOrderHolders_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, upOrderHolders_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class upOrderHolders_resultTupleSchemeFactory implements SchemeFactory {
      public upOrderHolders_resultTupleScheme getScheme() {
        return new upOrderHolders_resultTupleScheme();
      }
    }

    private static class upOrderHolders_resultTupleScheme extends TupleScheme<upOrderHolders_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, upOrderHolders_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, upOrderHolders_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class UserCarShops_args implements org.apache.thrift.TBase<UserCarShops_args, UserCarShops_args._Fields>, java.io.Serializable, Cloneable, Comparable<UserCarShops_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserCarShops_args");

    private static final org.apache.thrift.protocol.TField ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("entity", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UserCarShops_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UserCarShops_argsTupleSchemeFactory());
    }

    public CarShopEntity entity; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENTITY((short)1, "entity");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENTITY
            return ENTITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENTITY, new org.apache.thrift.meta_data.FieldMetaData("entity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CarShopEntity.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserCarShops_args.class, metaDataMap);
    }

    public UserCarShops_args() {
    }

    public UserCarShops_args(
      CarShopEntity entity)
    {
      this();
      this.entity = entity;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UserCarShops_args(UserCarShops_args other) {
      if (other.isSetEntity()) {
        this.entity = new CarShopEntity(other.entity);
      }
    }

    public UserCarShops_args deepCopy() {
      return new UserCarShops_args(this);
    }

    @Override
    public void clear() {
      this.entity = null;
    }

    public CarShopEntity getEntity() {
      return this.entity;
    }

    public UserCarShops_args setEntity(CarShopEntity entity) {
      this.entity = entity;
      return this;
    }

    public void unsetEntity() {
      this.entity = null;
    }

    /** Returns true if field entity is set (has been assigned a value) and false otherwise */
    public boolean isSetEntity() {
      return this.entity != null;
    }

    public void setEntityIsSet(boolean value) {
      if (!value) {
        this.entity = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ENTITY:
        if (value == null) {
          unsetEntity();
        } else {
          setEntity((CarShopEntity)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ENTITY:
        return getEntity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ENTITY:
        return isSetEntity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UserCarShops_args)
        return this.equals((UserCarShops_args)that);
      return false;
    }

    public boolean equals(UserCarShops_args that) {
      if (that == null)
        return false;

      boolean this_present_entity = true && this.isSetEntity();
      boolean that_present_entity = true && that.isSetEntity();
      if (this_present_entity || that_present_entity) {
        if (!(this_present_entity && that_present_entity))
          return false;
        if (!this.entity.equals(that.entity))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_entity = true && (isSetEntity());
      list.add(present_entity);
      if (present_entity)
        list.add(entity);

      return list.hashCode();
    }

    @Override
    public int compareTo(UserCarShops_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEntity()).compareTo(other.isSetEntity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entity, other.entity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UserCarShops_args(");
      boolean first = true;

      sb.append("entity:");
      if (this.entity == null) {
        sb.append("null");
      } else {
        sb.append(this.entity);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (entity != null) {
        entity.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UserCarShops_argsStandardSchemeFactory implements SchemeFactory {
      public UserCarShops_argsStandardScheme getScheme() {
        return new UserCarShops_argsStandardScheme();
      }
    }

    private static class UserCarShops_argsStandardScheme extends StandardScheme<UserCarShops_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UserCarShops_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.entity = new CarShopEntity();
                struct.entity.read(iprot);
                struct.setEntityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UserCarShops_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.entity != null) {
          oprot.writeFieldBegin(ENTITY_FIELD_DESC);
          struct.entity.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UserCarShops_argsTupleSchemeFactory implements SchemeFactory {
      public UserCarShops_argsTupleScheme getScheme() {
        return new UserCarShops_argsTupleScheme();
      }
    }

    private static class UserCarShops_argsTupleScheme extends TupleScheme<UserCarShops_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UserCarShops_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEntity()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEntity()) {
          struct.entity.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UserCarShops_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.entity = new CarShopEntity();
          struct.entity.read(iprot);
          struct.setEntityIsSet(true);
        }
      }
    }

  }

  public static class UserCarShops_result implements org.apache.thrift.TBase<UserCarShops_result, UserCarShops_result._Fields>, java.io.Serializable, Cloneable, Comparable<UserCarShops_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserCarShops_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UserCarShops_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UserCarShops_resultTupleSchemeFactory());
    }

    public List<Map<String,String>> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserCarShops_result.class, metaDataMap);
    }

    public UserCarShops_result() {
    }

    public UserCarShops_result(
      List<Map<String,String>> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UserCarShops_result(UserCarShops_result other) {
      if (other.isSetSuccess()) {
        List<Map<String,String>> __this__success = new ArrayList<Map<String,String>>(other.success.size());
        for (Map<String,String> other_element : other.success) {
          Map<String,String> __this__success_copy = new HashMap<String,String>(other_element);
          __this__success.add(__this__success_copy);
        }
        this.success = __this__success;
      }
    }

    public UserCarShops_result deepCopy() {
      return new UserCarShops_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Map<String,String>> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Map<String,String> elem) {
      if (this.success == null) {
        this.success = new ArrayList<Map<String,String>>();
      }
      this.success.add(elem);
    }

    public List<Map<String,String>> getSuccess() {
      return this.success;
    }

    public UserCarShops_result setSuccess(List<Map<String,String>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Map<String,String>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UserCarShops_result)
        return this.equals((UserCarShops_result)that);
      return false;
    }

    public boolean equals(UserCarShops_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(UserCarShops_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UserCarShops_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UserCarShops_resultStandardSchemeFactory implements SchemeFactory {
      public UserCarShops_resultStandardScheme getScheme() {
        return new UserCarShops_resultStandardScheme();
      }
    }

    private static class UserCarShops_resultStandardScheme extends StandardScheme<UserCarShops_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UserCarShops_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<Map<String,String>>(_list0.size);
                  Map<String,String> _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    {
                      org.apache.thrift.protocol.TMap _map3 = iprot.readMapBegin();
                      _elem1 = new HashMap<String,String>(2*_map3.size);
                      String _key4;
                      String _val5;
                      for (int _i6 = 0; _i6 < _map3.size; ++_i6)
                      {
                        _key4 = iprot.readString();
                        _val5 = iprot.readString();
                        _elem1.put(_key4, _val5);
                      }
                      iprot.readMapEnd();
                    }
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UserCarShops_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.success.size()));
            for (Map<String,String> _iter7 : struct.success)
            {
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter7.size()));
                for (Map.Entry<String, String> _iter8 : _iter7.entrySet())
                {
                  oprot.writeString(_iter8.getKey());
                  oprot.writeString(_iter8.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UserCarShops_resultTupleSchemeFactory implements SchemeFactory {
      public UserCarShops_resultTupleScheme getScheme() {
        return new UserCarShops_resultTupleScheme();
      }
    }

    private static class UserCarShops_resultTupleScheme extends TupleScheme<UserCarShops_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UserCarShops_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map<String,String> _iter9 : struct.success)
            {
              {
                oprot.writeI32(_iter9.size());
                for (Map.Entry<String, String> _iter10 : _iter9.entrySet())
                {
                  oprot.writeString(_iter10.getKey());
                  oprot.writeString(_iter10.getValue());
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UserCarShops_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list11 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
            struct.success = new ArrayList<Map<String,String>>(_list11.size);
            Map<String,String> _elem12;
            for (int _i13 = 0; _i13 < _list11.size; ++_i13)
            {
              {
                org.apache.thrift.protocol.TMap _map14 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _elem12 = new HashMap<String,String>(2*_map14.size);
                String _key15;
                String _val16;
                for (int _i17 = 0; _i17 < _map14.size; ++_i17)
                {
                  _key15 = iprot.readString();
                  _val16 = iprot.readString();
                  _elem12.put(_key15, _val16);
                }
              }
              struct.success.add(_elem12);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class DelUserCarShop_args implements org.apache.thrift.TBase<DelUserCarShop_args, DelUserCarShop_args._Fields>, java.io.Serializable, Cloneable, Comparable<DelUserCarShop_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DelUserCarShop_args");

    private static final org.apache.thrift.protocol.TField ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("entity", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DelUserCarShop_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DelUserCarShop_argsTupleSchemeFactory());
    }

    public CarShopEntity entity; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENTITY((short)1, "entity");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENTITY
            return ENTITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENTITY, new org.apache.thrift.meta_data.FieldMetaData("entity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CarShopEntity.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DelUserCarShop_args.class, metaDataMap);
    }

    public DelUserCarShop_args() {
    }

    public DelUserCarShop_args(
      CarShopEntity entity)
    {
      this();
      this.entity = entity;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DelUserCarShop_args(DelUserCarShop_args other) {
      if (other.isSetEntity()) {
        this.entity = new CarShopEntity(other.entity);
      }
    }

    public DelUserCarShop_args deepCopy() {
      return new DelUserCarShop_args(this);
    }

    @Override
    public void clear() {
      this.entity = null;
    }

    public CarShopEntity getEntity() {
      return this.entity;
    }

    public DelUserCarShop_args setEntity(CarShopEntity entity) {
      this.entity = entity;
      return this;
    }

    public void unsetEntity() {
      this.entity = null;
    }

    /** Returns true if field entity is set (has been assigned a value) and false otherwise */
    public boolean isSetEntity() {
      return this.entity != null;
    }

    public void setEntityIsSet(boolean value) {
      if (!value) {
        this.entity = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ENTITY:
        if (value == null) {
          unsetEntity();
        } else {
          setEntity((CarShopEntity)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ENTITY:
        return getEntity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ENTITY:
        return isSetEntity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DelUserCarShop_args)
        return this.equals((DelUserCarShop_args)that);
      return false;
    }

    public boolean equals(DelUserCarShop_args that) {
      if (that == null)
        return false;

      boolean this_present_entity = true && this.isSetEntity();
      boolean that_present_entity = true && that.isSetEntity();
      if (this_present_entity || that_present_entity) {
        if (!(this_present_entity && that_present_entity))
          return false;
        if (!this.entity.equals(that.entity))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_entity = true && (isSetEntity());
      list.add(present_entity);
      if (present_entity)
        list.add(entity);

      return list.hashCode();
    }

    @Override
    public int compareTo(DelUserCarShop_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEntity()).compareTo(other.isSetEntity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entity, other.entity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DelUserCarShop_args(");
      boolean first = true;

      sb.append("entity:");
      if (this.entity == null) {
        sb.append("null");
      } else {
        sb.append(this.entity);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (entity != null) {
        entity.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DelUserCarShop_argsStandardSchemeFactory implements SchemeFactory {
      public DelUserCarShop_argsStandardScheme getScheme() {
        return new DelUserCarShop_argsStandardScheme();
      }
    }

    private static class DelUserCarShop_argsStandardScheme extends StandardScheme<DelUserCarShop_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DelUserCarShop_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.entity = new CarShopEntity();
                struct.entity.read(iprot);
                struct.setEntityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DelUserCarShop_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.entity != null) {
          oprot.writeFieldBegin(ENTITY_FIELD_DESC);
          struct.entity.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DelUserCarShop_argsTupleSchemeFactory implements SchemeFactory {
      public DelUserCarShop_argsTupleScheme getScheme() {
        return new DelUserCarShop_argsTupleScheme();
      }
    }

    private static class DelUserCarShop_argsTupleScheme extends TupleScheme<DelUserCarShop_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DelUserCarShop_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEntity()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEntity()) {
          struct.entity.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DelUserCarShop_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.entity = new CarShopEntity();
          struct.entity.read(iprot);
          struct.setEntityIsSet(true);
        }
      }
    }

  }

  public static class DelUserCarShop_result implements org.apache.thrift.TBase<DelUserCarShop_result, DelUserCarShop_result._Fields>, java.io.Serializable, Cloneable, Comparable<DelUserCarShop_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DelUserCarShop_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DelUserCarShop_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DelUserCarShop_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DelUserCarShop_result.class, metaDataMap);
    }

    public DelUserCarShop_result() {
    }

    public DelUserCarShop_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DelUserCarShop_result(DelUserCarShop_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public DelUserCarShop_result deepCopy() {
      return new DelUserCarShop_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public DelUserCarShop_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DelUserCarShop_result)
        return this.equals((DelUserCarShop_result)that);
      return false;
    }

    public boolean equals(DelUserCarShop_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(DelUserCarShop_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DelUserCarShop_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DelUserCarShop_resultStandardSchemeFactory implements SchemeFactory {
      public DelUserCarShop_resultStandardScheme getScheme() {
        return new DelUserCarShop_resultStandardScheme();
      }
    }

    private static class DelUserCarShop_resultStandardScheme extends StandardScheme<DelUserCarShop_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DelUserCarShop_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DelUserCarShop_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DelUserCarShop_resultTupleSchemeFactory implements SchemeFactory {
      public DelUserCarShop_resultTupleScheme getScheme() {
        return new DelUserCarShop_resultTupleScheme();
      }
    }

    private static class DelUserCarShop_resultTupleScheme extends TupleScheme<DelUserCarShop_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DelUserCarShop_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DelUserCarShop_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class EditUserCarShop_args implements org.apache.thrift.TBase<EditUserCarShop_args, EditUserCarShop_args._Fields>, java.io.Serializable, Cloneable, Comparable<EditUserCarShop_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EditUserCarShop_args");

    private static final org.apache.thrift.protocol.TField ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("entity", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new EditUserCarShop_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new EditUserCarShop_argsTupleSchemeFactory());
    }

    public CarShopEntity entity; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENTITY((short)1, "entity");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENTITY
            return ENTITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENTITY, new org.apache.thrift.meta_data.FieldMetaData("entity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CarShopEntity.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EditUserCarShop_args.class, metaDataMap);
    }

    public EditUserCarShop_args() {
    }

    public EditUserCarShop_args(
      CarShopEntity entity)
    {
      this();
      this.entity = entity;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public EditUserCarShop_args(EditUserCarShop_args other) {
      if (other.isSetEntity()) {
        this.entity = new CarShopEntity(other.entity);
      }
    }

    public EditUserCarShop_args deepCopy() {
      return new EditUserCarShop_args(this);
    }

    @Override
    public void clear() {
      this.entity = null;
    }

    public CarShopEntity getEntity() {
      return this.entity;
    }

    public EditUserCarShop_args setEntity(CarShopEntity entity) {
      this.entity = entity;
      return this;
    }

    public void unsetEntity() {
      this.entity = null;
    }

    /** Returns true if field entity is set (has been assigned a value) and false otherwise */
    public boolean isSetEntity() {
      return this.entity != null;
    }

    public void setEntityIsSet(boolean value) {
      if (!value) {
        this.entity = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ENTITY:
        if (value == null) {
          unsetEntity();
        } else {
          setEntity((CarShopEntity)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ENTITY:
        return getEntity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ENTITY:
        return isSetEntity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof EditUserCarShop_args)
        return this.equals((EditUserCarShop_args)that);
      return false;
    }

    public boolean equals(EditUserCarShop_args that) {
      if (that == null)
        return false;

      boolean this_present_entity = true && this.isSetEntity();
      boolean that_present_entity = true && that.isSetEntity();
      if (this_present_entity || that_present_entity) {
        if (!(this_present_entity && that_present_entity))
          return false;
        if (!this.entity.equals(that.entity))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_entity = true && (isSetEntity());
      list.add(present_entity);
      if (present_entity)
        list.add(entity);

      return list.hashCode();
    }

    @Override
    public int compareTo(EditUserCarShop_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEntity()).compareTo(other.isSetEntity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entity, other.entity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("EditUserCarShop_args(");
      boolean first = true;

      sb.append("entity:");
      if (this.entity == null) {
        sb.append("null");
      } else {
        sb.append(this.entity);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (entity != null) {
        entity.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class EditUserCarShop_argsStandardSchemeFactory implements SchemeFactory {
      public EditUserCarShop_argsStandardScheme getScheme() {
        return new EditUserCarShop_argsStandardScheme();
      }
    }

    private static class EditUserCarShop_argsStandardScheme extends StandardScheme<EditUserCarShop_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, EditUserCarShop_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.entity = new CarShopEntity();
                struct.entity.read(iprot);
                struct.setEntityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, EditUserCarShop_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.entity != null) {
          oprot.writeFieldBegin(ENTITY_FIELD_DESC);
          struct.entity.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class EditUserCarShop_argsTupleSchemeFactory implements SchemeFactory {
      public EditUserCarShop_argsTupleScheme getScheme() {
        return new EditUserCarShop_argsTupleScheme();
      }
    }

    private static class EditUserCarShop_argsTupleScheme extends TupleScheme<EditUserCarShop_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, EditUserCarShop_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEntity()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEntity()) {
          struct.entity.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, EditUserCarShop_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.entity = new CarShopEntity();
          struct.entity.read(iprot);
          struct.setEntityIsSet(true);
        }
      }
    }

  }

  public static class EditUserCarShop_result implements org.apache.thrift.TBase<EditUserCarShop_result, EditUserCarShop_result._Fields>, java.io.Serializable, Cloneable, Comparable<EditUserCarShop_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EditUserCarShop_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new EditUserCarShop_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new EditUserCarShop_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EditUserCarShop_result.class, metaDataMap);
    }

    public EditUserCarShop_result() {
    }

    public EditUserCarShop_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public EditUserCarShop_result(EditUserCarShop_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public EditUserCarShop_result deepCopy() {
      return new EditUserCarShop_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public EditUserCarShop_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof EditUserCarShop_result)
        return this.equals((EditUserCarShop_result)that);
      return false;
    }

    public boolean equals(EditUserCarShop_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(EditUserCarShop_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("EditUserCarShop_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class EditUserCarShop_resultStandardSchemeFactory implements SchemeFactory {
      public EditUserCarShop_resultStandardScheme getScheme() {
        return new EditUserCarShop_resultStandardScheme();
      }
    }

    private static class EditUserCarShop_resultStandardScheme extends StandardScheme<EditUserCarShop_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, EditUserCarShop_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, EditUserCarShop_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class EditUserCarShop_resultTupleSchemeFactory implements SchemeFactory {
      public EditUserCarShop_resultTupleScheme getScheme() {
        return new EditUserCarShop_resultTupleScheme();
      }
    }

    private static class EditUserCarShop_resultTupleScheme extends TupleScheme<EditUserCarShop_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, EditUserCarShop_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, EditUserCarShop_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class UserCarShopCount_args implements org.apache.thrift.TBase<UserCarShopCount_args, UserCarShopCount_args._Fields>, java.io.Serializable, Cloneable, Comparable<UserCarShopCount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserCarShopCount_args");

    private static final org.apache.thrift.protocol.TField ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("entity", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UserCarShopCount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UserCarShopCount_argsTupleSchemeFactory());
    }

    public CarShopEntity entity; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENTITY((short)1, "entity");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENTITY
            return ENTITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENTITY, new org.apache.thrift.meta_data.FieldMetaData("entity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CarShopEntity.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserCarShopCount_args.class, metaDataMap);
    }

    public UserCarShopCount_args() {
    }

    public UserCarShopCount_args(
      CarShopEntity entity)
    {
      this();
      this.entity = entity;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UserCarShopCount_args(UserCarShopCount_args other) {
      if (other.isSetEntity()) {
        this.entity = new CarShopEntity(other.entity);
      }
    }

    public UserCarShopCount_args deepCopy() {
      return new UserCarShopCount_args(this);
    }

    @Override
    public void clear() {
      this.entity = null;
    }

    public CarShopEntity getEntity() {
      return this.entity;
    }

    public UserCarShopCount_args setEntity(CarShopEntity entity) {
      this.entity = entity;
      return this;
    }

    public void unsetEntity() {
      this.entity = null;
    }

    /** Returns true if field entity is set (has been assigned a value) and false otherwise */
    public boolean isSetEntity() {
      return this.entity != null;
    }

    public void setEntityIsSet(boolean value) {
      if (!value) {
        this.entity = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ENTITY:
        if (value == null) {
          unsetEntity();
        } else {
          setEntity((CarShopEntity)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ENTITY:
        return getEntity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ENTITY:
        return isSetEntity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UserCarShopCount_args)
        return this.equals((UserCarShopCount_args)that);
      return false;
    }

    public boolean equals(UserCarShopCount_args that) {
      if (that == null)
        return false;

      boolean this_present_entity = true && this.isSetEntity();
      boolean that_present_entity = true && that.isSetEntity();
      if (this_present_entity || that_present_entity) {
        if (!(this_present_entity && that_present_entity))
          return false;
        if (!this.entity.equals(that.entity))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_entity = true && (isSetEntity());
      list.add(present_entity);
      if (present_entity)
        list.add(entity);

      return list.hashCode();
    }

    @Override
    public int compareTo(UserCarShopCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEntity()).compareTo(other.isSetEntity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entity, other.entity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UserCarShopCount_args(");
      boolean first = true;

      sb.append("entity:");
      if (this.entity == null) {
        sb.append("null");
      } else {
        sb.append(this.entity);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (entity != null) {
        entity.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UserCarShopCount_argsStandardSchemeFactory implements SchemeFactory {
      public UserCarShopCount_argsStandardScheme getScheme() {
        return new UserCarShopCount_argsStandardScheme();
      }
    }

    private static class UserCarShopCount_argsStandardScheme extends StandardScheme<UserCarShopCount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UserCarShopCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.entity = new CarShopEntity();
                struct.entity.read(iprot);
                struct.setEntityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UserCarShopCount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.entity != null) {
          oprot.writeFieldBegin(ENTITY_FIELD_DESC);
          struct.entity.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UserCarShopCount_argsTupleSchemeFactory implements SchemeFactory {
      public UserCarShopCount_argsTupleScheme getScheme() {
        return new UserCarShopCount_argsTupleScheme();
      }
    }

    private static class UserCarShopCount_argsTupleScheme extends TupleScheme<UserCarShopCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UserCarShopCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEntity()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEntity()) {
          struct.entity.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UserCarShopCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.entity = new CarShopEntity();
          struct.entity.read(iprot);
          struct.setEntityIsSet(true);
        }
      }
    }

  }

  public static class UserCarShopCount_result implements org.apache.thrift.TBase<UserCarShopCount_result, UserCarShopCount_result._Fields>, java.io.Serializable, Cloneable, Comparable<UserCarShopCount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserCarShopCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UserCarShopCount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UserCarShopCount_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserCarShopCount_result.class, metaDataMap);
    }

    public UserCarShopCount_result() {
    }

    public UserCarShopCount_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UserCarShopCount_result(UserCarShopCount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public UserCarShopCount_result deepCopy() {
      return new UserCarShopCount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public UserCarShopCount_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UserCarShopCount_result)
        return this.equals((UserCarShopCount_result)that);
      return false;
    }

    public boolean equals(UserCarShopCount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(UserCarShopCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UserCarShopCount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UserCarShopCount_resultStandardSchemeFactory implements SchemeFactory {
      public UserCarShopCount_resultStandardScheme getScheme() {
        return new UserCarShopCount_resultStandardScheme();
      }
    }

    private static class UserCarShopCount_resultStandardScheme extends StandardScheme<UserCarShopCount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UserCarShopCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UserCarShopCount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UserCarShopCount_resultTupleSchemeFactory implements SchemeFactory {
      public UserCarShopCount_resultTupleScheme getScheme() {
        return new UserCarShopCount_resultTupleScheme();
      }
    }

    private static class UserCarShopCount_resultTupleScheme extends TupleScheme<UserCarShopCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UserCarShopCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UserCarShopCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class UserOrders_args implements org.apache.thrift.TBase<UserOrders_args, UserOrders_args._Fields>, java.io.Serializable, Cloneable, Comparable<UserOrders_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserOrders_args");

    private static final org.apache.thrift.protocol.TField ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("entity", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UserOrders_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UserOrders_argsTupleSchemeFactory());
    }

    public OrderEntity entity; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENTITY((short)1, "entity");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENTITY
            return ENTITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENTITY, new org.apache.thrift.meta_data.FieldMetaData("entity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OrderEntity.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserOrders_args.class, metaDataMap);
    }

    public UserOrders_args() {
    }

    public UserOrders_args(
      OrderEntity entity)
    {
      this();
      this.entity = entity;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UserOrders_args(UserOrders_args other) {
      if (other.isSetEntity()) {
        this.entity = new OrderEntity(other.entity);
      }
    }

    public UserOrders_args deepCopy() {
      return new UserOrders_args(this);
    }

    @Override
    public void clear() {
      this.entity = null;
    }

    public OrderEntity getEntity() {
      return this.entity;
    }

    public UserOrders_args setEntity(OrderEntity entity) {
      this.entity = entity;
      return this;
    }

    public void unsetEntity() {
      this.entity = null;
    }

    /** Returns true if field entity is set (has been assigned a value) and false otherwise */
    public boolean isSetEntity() {
      return this.entity != null;
    }

    public void setEntityIsSet(boolean value) {
      if (!value) {
        this.entity = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ENTITY:
        if (value == null) {
          unsetEntity();
        } else {
          setEntity((OrderEntity)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ENTITY:
        return getEntity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ENTITY:
        return isSetEntity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UserOrders_args)
        return this.equals((UserOrders_args)that);
      return false;
    }

    public boolean equals(UserOrders_args that) {
      if (that == null)
        return false;

      boolean this_present_entity = true && this.isSetEntity();
      boolean that_present_entity = true && that.isSetEntity();
      if (this_present_entity || that_present_entity) {
        if (!(this_present_entity && that_present_entity))
          return false;
        if (!this.entity.equals(that.entity))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_entity = true && (isSetEntity());
      list.add(present_entity);
      if (present_entity)
        list.add(entity);

      return list.hashCode();
    }

    @Override
    public int compareTo(UserOrders_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEntity()).compareTo(other.isSetEntity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entity, other.entity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UserOrders_args(");
      boolean first = true;

      sb.append("entity:");
      if (this.entity == null) {
        sb.append("null");
      } else {
        sb.append(this.entity);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (entity != null) {
        entity.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UserOrders_argsStandardSchemeFactory implements SchemeFactory {
      public UserOrders_argsStandardScheme getScheme() {
        return new UserOrders_argsStandardScheme();
      }
    }

    private static class UserOrders_argsStandardScheme extends StandardScheme<UserOrders_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UserOrders_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.entity = new OrderEntity();
                struct.entity.read(iprot);
                struct.setEntityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UserOrders_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.entity != null) {
          oprot.writeFieldBegin(ENTITY_FIELD_DESC);
          struct.entity.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UserOrders_argsTupleSchemeFactory implements SchemeFactory {
      public UserOrders_argsTupleScheme getScheme() {
        return new UserOrders_argsTupleScheme();
      }
    }

    private static class UserOrders_argsTupleScheme extends TupleScheme<UserOrders_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UserOrders_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEntity()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEntity()) {
          struct.entity.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UserOrders_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.entity = new OrderEntity();
          struct.entity.read(iprot);
          struct.setEntityIsSet(true);
        }
      }
    }

  }

  public static class UserOrders_result implements org.apache.thrift.TBase<UserOrders_result, UserOrders_result._Fields>, java.io.Serializable, Cloneable, Comparable<UserOrders_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserOrders_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UserOrders_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UserOrders_resultTupleSchemeFactory());
    }

    public List<Map<String,String>> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserOrders_result.class, metaDataMap);
    }

    public UserOrders_result() {
    }

    public UserOrders_result(
      List<Map<String,String>> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UserOrders_result(UserOrders_result other) {
      if (other.isSetSuccess()) {
        List<Map<String,String>> __this__success = new ArrayList<Map<String,String>>(other.success.size());
        for (Map<String,String> other_element : other.success) {
          Map<String,String> __this__success_copy = new HashMap<String,String>(other_element);
          __this__success.add(__this__success_copy);
        }
        this.success = __this__success;
      }
    }

    public UserOrders_result deepCopy() {
      return new UserOrders_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Map<String,String>> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Map<String,String> elem) {
      if (this.success == null) {
        this.success = new ArrayList<Map<String,String>>();
      }
      this.success.add(elem);
    }

    public List<Map<String,String>> getSuccess() {
      return this.success;
    }

    public UserOrders_result setSuccess(List<Map<String,String>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Map<String,String>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UserOrders_result)
        return this.equals((UserOrders_result)that);
      return false;
    }

    public boolean equals(UserOrders_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(UserOrders_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UserOrders_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UserOrders_resultStandardSchemeFactory implements SchemeFactory {
      public UserOrders_resultStandardScheme getScheme() {
        return new UserOrders_resultStandardScheme();
      }
    }

    private static class UserOrders_resultStandardScheme extends StandardScheme<UserOrders_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UserOrders_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list18 = iprot.readListBegin();
                  struct.success = new ArrayList<Map<String,String>>(_list18.size);
                  Map<String,String> _elem19;
                  for (int _i20 = 0; _i20 < _list18.size; ++_i20)
                  {
                    {
                      org.apache.thrift.protocol.TMap _map21 = iprot.readMapBegin();
                      _elem19 = new HashMap<String,String>(2*_map21.size);
                      String _key22;
                      String _val23;
                      for (int _i24 = 0; _i24 < _map21.size; ++_i24)
                      {
                        _key22 = iprot.readString();
                        _val23 = iprot.readString();
                        _elem19.put(_key22, _val23);
                      }
                      iprot.readMapEnd();
                    }
                    struct.success.add(_elem19);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UserOrders_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.success.size()));
            for (Map<String,String> _iter25 : struct.success)
            {
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter25.size()));
                for (Map.Entry<String, String> _iter26 : _iter25.entrySet())
                {
                  oprot.writeString(_iter26.getKey());
                  oprot.writeString(_iter26.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UserOrders_resultTupleSchemeFactory implements SchemeFactory {
      public UserOrders_resultTupleScheme getScheme() {
        return new UserOrders_resultTupleScheme();
      }
    }

    private static class UserOrders_resultTupleScheme extends TupleScheme<UserOrders_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UserOrders_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map<String,String> _iter27 : struct.success)
            {
              {
                oprot.writeI32(_iter27.size());
                for (Map.Entry<String, String> _iter28 : _iter27.entrySet())
                {
                  oprot.writeString(_iter28.getKey());
                  oprot.writeString(_iter28.getValue());
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UserOrders_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
            struct.success = new ArrayList<Map<String,String>>(_list29.size);
            Map<String,String> _elem30;
            for (int _i31 = 0; _i31 < _list29.size; ++_i31)
            {
              {
                org.apache.thrift.protocol.TMap _map32 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _elem30 = new HashMap<String,String>(2*_map32.size);
                String _key33;
                String _val34;
                for (int _i35 = 0; _i35 < _map32.size; ++_i35)
                {
                  _key33 = iprot.readString();
                  _val34 = iprot.readString();
                  _elem30.put(_key33, _val34);
                }
              }
              struct.success.add(_elem30);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class CreateShopOrder_args implements org.apache.thrift.TBase<CreateShopOrder_args, CreateShopOrder_args._Fields>, java.io.Serializable, Cloneable, Comparable<CreateShopOrder_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreateShopOrder_args");

    private static final org.apache.thrift.protocol.TField ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("entity", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new CreateShopOrder_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new CreateShopOrder_argsTupleSchemeFactory());
    }

    public OrderEntity entity; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENTITY((short)1, "entity");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENTITY
            return ENTITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENTITY, new org.apache.thrift.meta_data.FieldMetaData("entity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OrderEntity.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreateShopOrder_args.class, metaDataMap);
    }

    public CreateShopOrder_args() {
    }

    public CreateShopOrder_args(
      OrderEntity entity)
    {
      this();
      this.entity = entity;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CreateShopOrder_args(CreateShopOrder_args other) {
      if (other.isSetEntity()) {
        this.entity = new OrderEntity(other.entity);
      }
    }

    public CreateShopOrder_args deepCopy() {
      return new CreateShopOrder_args(this);
    }

    @Override
    public void clear() {
      this.entity = null;
    }

    public OrderEntity getEntity() {
      return this.entity;
    }

    public CreateShopOrder_args setEntity(OrderEntity entity) {
      this.entity = entity;
      return this;
    }

    public void unsetEntity() {
      this.entity = null;
    }

    /** Returns true if field entity is set (has been assigned a value) and false otherwise */
    public boolean isSetEntity() {
      return this.entity != null;
    }

    public void setEntityIsSet(boolean value) {
      if (!value) {
        this.entity = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ENTITY:
        if (value == null) {
          unsetEntity();
        } else {
          setEntity((OrderEntity)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ENTITY:
        return getEntity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ENTITY:
        return isSetEntity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof CreateShopOrder_args)
        return this.equals((CreateShopOrder_args)that);
      return false;
    }

    public boolean equals(CreateShopOrder_args that) {
      if (that == null)
        return false;

      boolean this_present_entity = true && this.isSetEntity();
      boolean that_present_entity = true && that.isSetEntity();
      if (this_present_entity || that_present_entity) {
        if (!(this_present_entity && that_present_entity))
          return false;
        if (!this.entity.equals(that.entity))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_entity = true && (isSetEntity());
      list.add(present_entity);
      if (present_entity)
        list.add(entity);

      return list.hashCode();
    }

    @Override
    public int compareTo(CreateShopOrder_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEntity()).compareTo(other.isSetEntity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entity, other.entity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("CreateShopOrder_args(");
      boolean first = true;

      sb.append("entity:");
      if (this.entity == null) {
        sb.append("null");
      } else {
        sb.append(this.entity);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (entity != null) {
        entity.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CreateShopOrder_argsStandardSchemeFactory implements SchemeFactory {
      public CreateShopOrder_argsStandardScheme getScheme() {
        return new CreateShopOrder_argsStandardScheme();
      }
    }

    private static class CreateShopOrder_argsStandardScheme extends StandardScheme<CreateShopOrder_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CreateShopOrder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.entity = new OrderEntity();
                struct.entity.read(iprot);
                struct.setEntityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CreateShopOrder_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.entity != null) {
          oprot.writeFieldBegin(ENTITY_FIELD_DESC);
          struct.entity.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CreateShopOrder_argsTupleSchemeFactory implements SchemeFactory {
      public CreateShopOrder_argsTupleScheme getScheme() {
        return new CreateShopOrder_argsTupleScheme();
      }
    }

    private static class CreateShopOrder_argsTupleScheme extends TupleScheme<CreateShopOrder_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CreateShopOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEntity()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEntity()) {
          struct.entity.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CreateShopOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.entity = new OrderEntity();
          struct.entity.read(iprot);
          struct.setEntityIsSet(true);
        }
      }
    }

  }

  public static class CreateShopOrder_result implements org.apache.thrift.TBase<CreateShopOrder_result, CreateShopOrder_result._Fields>, java.io.Serializable, Cloneable, Comparable<CreateShopOrder_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreateShopOrder_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new CreateShopOrder_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new CreateShopOrder_resultTupleSchemeFactory());
    }

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreateShopOrder_result.class, metaDataMap);
    }

    public CreateShopOrder_result() {
    }

    public CreateShopOrder_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CreateShopOrder_result(CreateShopOrder_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public CreateShopOrder_result deepCopy() {
      return new CreateShopOrder_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public CreateShopOrder_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof CreateShopOrder_result)
        return this.equals((CreateShopOrder_result)that);
      return false;
    }

    public boolean equals(CreateShopOrder_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(CreateShopOrder_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("CreateShopOrder_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CreateShopOrder_resultStandardSchemeFactory implements SchemeFactory {
      public CreateShopOrder_resultStandardScheme getScheme() {
        return new CreateShopOrder_resultStandardScheme();
      }
    }

    private static class CreateShopOrder_resultStandardScheme extends StandardScheme<CreateShopOrder_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CreateShopOrder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CreateShopOrder_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CreateShopOrder_resultTupleSchemeFactory implements SchemeFactory {
      public CreateShopOrder_resultTupleScheme getScheme() {
        return new CreateShopOrder_resultTupleScheme();
      }
    }

    private static class CreateShopOrder_resultTupleScheme extends TupleScheme<CreateShopOrder_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CreateShopOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CreateShopOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class CancelShopOrder_args implements org.apache.thrift.TBase<CancelShopOrder_args, CancelShopOrder_args._Fields>, java.io.Serializable, Cloneable, Comparable<CancelShopOrder_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CancelShopOrder_args");

    private static final org.apache.thrift.protocol.TField ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("entity", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new CancelShopOrder_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new CancelShopOrder_argsTupleSchemeFactory());
    }

    public OrderEntity entity; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENTITY((short)1, "entity");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENTITY
            return ENTITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENTITY, new org.apache.thrift.meta_data.FieldMetaData("entity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OrderEntity.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CancelShopOrder_args.class, metaDataMap);
    }

    public CancelShopOrder_args() {
    }

    public CancelShopOrder_args(
      OrderEntity entity)
    {
      this();
      this.entity = entity;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CancelShopOrder_args(CancelShopOrder_args other) {
      if (other.isSetEntity()) {
        this.entity = new OrderEntity(other.entity);
      }
    }

    public CancelShopOrder_args deepCopy() {
      return new CancelShopOrder_args(this);
    }

    @Override
    public void clear() {
      this.entity = null;
    }

    public OrderEntity getEntity() {
      return this.entity;
    }

    public CancelShopOrder_args setEntity(OrderEntity entity) {
      this.entity = entity;
      return this;
    }

    public void unsetEntity() {
      this.entity = null;
    }

    /** Returns true if field entity is set (has been assigned a value) and false otherwise */
    public boolean isSetEntity() {
      return this.entity != null;
    }

    public void setEntityIsSet(boolean value) {
      if (!value) {
        this.entity = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ENTITY:
        if (value == null) {
          unsetEntity();
        } else {
          setEntity((OrderEntity)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ENTITY:
        return getEntity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ENTITY:
        return isSetEntity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof CancelShopOrder_args)
        return this.equals((CancelShopOrder_args)that);
      return false;
    }

    public boolean equals(CancelShopOrder_args that) {
      if (that == null)
        return false;

      boolean this_present_entity = true && this.isSetEntity();
      boolean that_present_entity = true && that.isSetEntity();
      if (this_present_entity || that_present_entity) {
        if (!(this_present_entity && that_present_entity))
          return false;
        if (!this.entity.equals(that.entity))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_entity = true && (isSetEntity());
      list.add(present_entity);
      if (present_entity)
        list.add(entity);

      return list.hashCode();
    }

    @Override
    public int compareTo(CancelShopOrder_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEntity()).compareTo(other.isSetEntity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entity, other.entity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("CancelShopOrder_args(");
      boolean first = true;

      sb.append("entity:");
      if (this.entity == null) {
        sb.append("null");
      } else {
        sb.append(this.entity);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (entity != null) {
        entity.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CancelShopOrder_argsStandardSchemeFactory implements SchemeFactory {
      public CancelShopOrder_argsStandardScheme getScheme() {
        return new CancelShopOrder_argsStandardScheme();
      }
    }

    private static class CancelShopOrder_argsStandardScheme extends StandardScheme<CancelShopOrder_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CancelShopOrder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.entity = new OrderEntity();
                struct.entity.read(iprot);
                struct.setEntityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CancelShopOrder_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.entity != null) {
          oprot.writeFieldBegin(ENTITY_FIELD_DESC);
          struct.entity.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CancelShopOrder_argsTupleSchemeFactory implements SchemeFactory {
      public CancelShopOrder_argsTupleScheme getScheme() {
        return new CancelShopOrder_argsTupleScheme();
      }
    }

    private static class CancelShopOrder_argsTupleScheme extends TupleScheme<CancelShopOrder_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CancelShopOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEntity()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEntity()) {
          struct.entity.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CancelShopOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.entity = new OrderEntity();
          struct.entity.read(iprot);
          struct.setEntityIsSet(true);
        }
      }
    }

  }

  public static class CancelShopOrder_result implements org.apache.thrift.TBase<CancelShopOrder_result, CancelShopOrder_result._Fields>, java.io.Serializable, Cloneable, Comparable<CancelShopOrder_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CancelShopOrder_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new CancelShopOrder_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new CancelShopOrder_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CancelShopOrder_result.class, metaDataMap);
    }

    public CancelShopOrder_result() {
    }

    public CancelShopOrder_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CancelShopOrder_result(CancelShopOrder_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public CancelShopOrder_result deepCopy() {
      return new CancelShopOrder_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public CancelShopOrder_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof CancelShopOrder_result)
        return this.equals((CancelShopOrder_result)that);
      return false;
    }

    public boolean equals(CancelShopOrder_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(CancelShopOrder_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("CancelShopOrder_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CancelShopOrder_resultStandardSchemeFactory implements SchemeFactory {
      public CancelShopOrder_resultStandardScheme getScheme() {
        return new CancelShopOrder_resultStandardScheme();
      }
    }

    private static class CancelShopOrder_resultStandardScheme extends StandardScheme<CancelShopOrder_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CancelShopOrder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CancelShopOrder_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CancelShopOrder_resultTupleSchemeFactory implements SchemeFactory {
      public CancelShopOrder_resultTupleScheme getScheme() {
        return new CancelShopOrder_resultTupleScheme();
      }
    }

    private static class CancelShopOrder_resultTupleScheme extends TupleScheme<CancelShopOrder_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CancelShopOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CancelShopOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class UserOrdersInventory_args implements org.apache.thrift.TBase<UserOrdersInventory_args, UserOrdersInventory_args._Fields>, java.io.Serializable, Cloneable, Comparable<UserOrdersInventory_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserOrdersInventory_args");

    private static final org.apache.thrift.protocol.TField ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("entity", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UserOrdersInventory_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UserOrdersInventory_argsTupleSchemeFactory());
    }

    public OrderEntity entity; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENTITY((short)1, "entity");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENTITY
            return ENTITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENTITY, new org.apache.thrift.meta_data.FieldMetaData("entity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OrderEntity.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserOrdersInventory_args.class, metaDataMap);
    }

    public UserOrdersInventory_args() {
    }

    public UserOrdersInventory_args(
      OrderEntity entity)
    {
      this();
      this.entity = entity;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UserOrdersInventory_args(UserOrdersInventory_args other) {
      if (other.isSetEntity()) {
        this.entity = new OrderEntity(other.entity);
      }
    }

    public UserOrdersInventory_args deepCopy() {
      return new UserOrdersInventory_args(this);
    }

    @Override
    public void clear() {
      this.entity = null;
    }

    public OrderEntity getEntity() {
      return this.entity;
    }

    public UserOrdersInventory_args setEntity(OrderEntity entity) {
      this.entity = entity;
      return this;
    }

    public void unsetEntity() {
      this.entity = null;
    }

    /** Returns true if field entity is set (has been assigned a value) and false otherwise */
    public boolean isSetEntity() {
      return this.entity != null;
    }

    public void setEntityIsSet(boolean value) {
      if (!value) {
        this.entity = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ENTITY:
        if (value == null) {
          unsetEntity();
        } else {
          setEntity((OrderEntity)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ENTITY:
        return getEntity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ENTITY:
        return isSetEntity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UserOrdersInventory_args)
        return this.equals((UserOrdersInventory_args)that);
      return false;
    }

    public boolean equals(UserOrdersInventory_args that) {
      if (that == null)
        return false;

      boolean this_present_entity = true && this.isSetEntity();
      boolean that_present_entity = true && that.isSetEntity();
      if (this_present_entity || that_present_entity) {
        if (!(this_present_entity && that_present_entity))
          return false;
        if (!this.entity.equals(that.entity))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_entity = true && (isSetEntity());
      list.add(present_entity);
      if (present_entity)
        list.add(entity);

      return list.hashCode();
    }

    @Override
    public int compareTo(UserOrdersInventory_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEntity()).compareTo(other.isSetEntity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entity, other.entity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UserOrdersInventory_args(");
      boolean first = true;

      sb.append("entity:");
      if (this.entity == null) {
        sb.append("null");
      } else {
        sb.append(this.entity);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (entity != null) {
        entity.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UserOrdersInventory_argsStandardSchemeFactory implements SchemeFactory {
      public UserOrdersInventory_argsStandardScheme getScheme() {
        return new UserOrdersInventory_argsStandardScheme();
      }
    }

    private static class UserOrdersInventory_argsStandardScheme extends StandardScheme<UserOrdersInventory_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UserOrdersInventory_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.entity = new OrderEntity();
                struct.entity.read(iprot);
                struct.setEntityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UserOrdersInventory_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.entity != null) {
          oprot.writeFieldBegin(ENTITY_FIELD_DESC);
          struct.entity.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UserOrdersInventory_argsTupleSchemeFactory implements SchemeFactory {
      public UserOrdersInventory_argsTupleScheme getScheme() {
        return new UserOrdersInventory_argsTupleScheme();
      }
    }

    private static class UserOrdersInventory_argsTupleScheme extends TupleScheme<UserOrdersInventory_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UserOrdersInventory_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEntity()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEntity()) {
          struct.entity.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UserOrdersInventory_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.entity = new OrderEntity();
          struct.entity.read(iprot);
          struct.setEntityIsSet(true);
        }
      }
    }

  }

  public static class UserOrdersInventory_result implements org.apache.thrift.TBase<UserOrdersInventory_result, UserOrdersInventory_result._Fields>, java.io.Serializable, Cloneable, Comparable<UserOrdersInventory_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserOrdersInventory_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UserOrdersInventory_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UserOrdersInventory_resultTupleSchemeFactory());
    }

    public List<Map<String,String>> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserOrdersInventory_result.class, metaDataMap);
    }

    public UserOrdersInventory_result() {
    }

    public UserOrdersInventory_result(
      List<Map<String,String>> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UserOrdersInventory_result(UserOrdersInventory_result other) {
      if (other.isSetSuccess()) {
        List<Map<String,String>> __this__success = new ArrayList<Map<String,String>>(other.success.size());
        for (Map<String,String> other_element : other.success) {
          Map<String,String> __this__success_copy = new HashMap<String,String>(other_element);
          __this__success.add(__this__success_copy);
        }
        this.success = __this__success;
      }
    }

    public UserOrdersInventory_result deepCopy() {
      return new UserOrdersInventory_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Map<String,String>> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Map<String,String> elem) {
      if (this.success == null) {
        this.success = new ArrayList<Map<String,String>>();
      }
      this.success.add(elem);
    }

    public List<Map<String,String>> getSuccess() {
      return this.success;
    }

    public UserOrdersInventory_result setSuccess(List<Map<String,String>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Map<String,String>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UserOrdersInventory_result)
        return this.equals((UserOrdersInventory_result)that);
      return false;
    }

    public boolean equals(UserOrdersInventory_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(UserOrdersInventory_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UserOrdersInventory_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UserOrdersInventory_resultStandardSchemeFactory implements SchemeFactory {
      public UserOrdersInventory_resultStandardScheme getScheme() {
        return new UserOrdersInventory_resultStandardScheme();
      }
    }

    private static class UserOrdersInventory_resultStandardScheme extends StandardScheme<UserOrdersInventory_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UserOrdersInventory_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list36 = iprot.readListBegin();
                  struct.success = new ArrayList<Map<String,String>>(_list36.size);
                  Map<String,String> _elem37;
                  for (int _i38 = 0; _i38 < _list36.size; ++_i38)
                  {
                    {
                      org.apache.thrift.protocol.TMap _map39 = iprot.readMapBegin();
                      _elem37 = new HashMap<String,String>(2*_map39.size);
                      String _key40;
                      String _val41;
                      for (int _i42 = 0; _i42 < _map39.size; ++_i42)
                      {
                        _key40 = iprot.readString();
                        _val41 = iprot.readString();
                        _elem37.put(_key40, _val41);
                      }
                      iprot.readMapEnd();
                    }
                    struct.success.add(_elem37);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UserOrdersInventory_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.success.size()));
            for (Map<String,String> _iter43 : struct.success)
            {
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter43.size()));
                for (Map.Entry<String, String> _iter44 : _iter43.entrySet())
                {
                  oprot.writeString(_iter44.getKey());
                  oprot.writeString(_iter44.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UserOrdersInventory_resultTupleSchemeFactory implements SchemeFactory {
      public UserOrdersInventory_resultTupleScheme getScheme() {
        return new UserOrdersInventory_resultTupleScheme();
      }
    }

    private static class UserOrdersInventory_resultTupleScheme extends TupleScheme<UserOrdersInventory_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UserOrdersInventory_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map<String,String> _iter45 : struct.success)
            {
              {
                oprot.writeI32(_iter45.size());
                for (Map.Entry<String, String> _iter46 : _iter45.entrySet())
                {
                  oprot.writeString(_iter46.getKey());
                  oprot.writeString(_iter46.getValue());
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UserOrdersInventory_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list47 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
            struct.success = new ArrayList<Map<String,String>>(_list47.size);
            Map<String,String> _elem48;
            for (int _i49 = 0; _i49 < _list47.size; ++_i49)
            {
              {
                org.apache.thrift.protocol.TMap _map50 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _elem48 = new HashMap<String,String>(2*_map50.size);
                String _key51;
                String _val52;
                for (int _i53 = 0; _i53 < _map50.size; ++_i53)
                {
                  _key51 = iprot.readString();
                  _val52 = iprot.readString();
                  _elem48.put(_key51, _val52);
                }
              }
              struct.success.add(_elem48);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class EditUserOrdersInventory_args implements org.apache.thrift.TBase<EditUserOrdersInventory_args, EditUserOrdersInventory_args._Fields>, java.io.Serializable, Cloneable, Comparable<EditUserOrdersInventory_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EditUserOrdersInventory_args");

    private static final org.apache.thrift.protocol.TField ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("entity", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new EditUserOrdersInventory_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new EditUserOrdersInventory_argsTupleSchemeFactory());
    }

    public OrderEntity entity; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENTITY((short)1, "entity");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENTITY
            return ENTITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENTITY, new org.apache.thrift.meta_data.FieldMetaData("entity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OrderEntity.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EditUserOrdersInventory_args.class, metaDataMap);
    }

    public EditUserOrdersInventory_args() {
    }

    public EditUserOrdersInventory_args(
      OrderEntity entity)
    {
      this();
      this.entity = entity;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public EditUserOrdersInventory_args(EditUserOrdersInventory_args other) {
      if (other.isSetEntity()) {
        this.entity = new OrderEntity(other.entity);
      }
    }

    public EditUserOrdersInventory_args deepCopy() {
      return new EditUserOrdersInventory_args(this);
    }

    @Override
    public void clear() {
      this.entity = null;
    }

    public OrderEntity getEntity() {
      return this.entity;
    }

    public EditUserOrdersInventory_args setEntity(OrderEntity entity) {
      this.entity = entity;
      return this;
    }

    public void unsetEntity() {
      this.entity = null;
    }

    /** Returns true if field entity is set (has been assigned a value) and false otherwise */
    public boolean isSetEntity() {
      return this.entity != null;
    }

    public void setEntityIsSet(boolean value) {
      if (!value) {
        this.entity = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ENTITY:
        if (value == null) {
          unsetEntity();
        } else {
          setEntity((OrderEntity)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ENTITY:
        return getEntity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ENTITY:
        return isSetEntity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof EditUserOrdersInventory_args)
        return this.equals((EditUserOrdersInventory_args)that);
      return false;
    }

    public boolean equals(EditUserOrdersInventory_args that) {
      if (that == null)
        return false;

      boolean this_present_entity = true && this.isSetEntity();
      boolean that_present_entity = true && that.isSetEntity();
      if (this_present_entity || that_present_entity) {
        if (!(this_present_entity && that_present_entity))
          return false;
        if (!this.entity.equals(that.entity))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_entity = true && (isSetEntity());
      list.add(present_entity);
      if (present_entity)
        list.add(entity);

      return list.hashCode();
    }

    @Override
    public int compareTo(EditUserOrdersInventory_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEntity()).compareTo(other.isSetEntity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entity, other.entity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("EditUserOrdersInventory_args(");
      boolean first = true;

      sb.append("entity:");
      if (this.entity == null) {
        sb.append("null");
      } else {
        sb.append(this.entity);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (entity != null) {
        entity.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class EditUserOrdersInventory_argsStandardSchemeFactory implements SchemeFactory {
      public EditUserOrdersInventory_argsStandardScheme getScheme() {
        return new EditUserOrdersInventory_argsStandardScheme();
      }
    }

    private static class EditUserOrdersInventory_argsStandardScheme extends StandardScheme<EditUserOrdersInventory_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, EditUserOrdersInventory_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.entity = new OrderEntity();
                struct.entity.read(iprot);
                struct.setEntityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, EditUserOrdersInventory_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.entity != null) {
          oprot.writeFieldBegin(ENTITY_FIELD_DESC);
          struct.entity.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class EditUserOrdersInventory_argsTupleSchemeFactory implements SchemeFactory {
      public EditUserOrdersInventory_argsTupleScheme getScheme() {
        return new EditUserOrdersInventory_argsTupleScheme();
      }
    }

    private static class EditUserOrdersInventory_argsTupleScheme extends TupleScheme<EditUserOrdersInventory_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, EditUserOrdersInventory_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEntity()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEntity()) {
          struct.entity.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, EditUserOrdersInventory_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.entity = new OrderEntity();
          struct.entity.read(iprot);
          struct.setEntityIsSet(true);
        }
      }
    }

  }

  public static class EditUserOrdersInventory_result implements org.apache.thrift.TBase<EditUserOrdersInventory_result, EditUserOrdersInventory_result._Fields>, java.io.Serializable, Cloneable, Comparable<EditUserOrdersInventory_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EditUserOrdersInventory_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new EditUserOrdersInventory_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new EditUserOrdersInventory_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EditUserOrdersInventory_result.class, metaDataMap);
    }

    public EditUserOrdersInventory_result() {
    }

    public EditUserOrdersInventory_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public EditUserOrdersInventory_result(EditUserOrdersInventory_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public EditUserOrdersInventory_result deepCopy() {
      return new EditUserOrdersInventory_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public EditUserOrdersInventory_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof EditUserOrdersInventory_result)
        return this.equals((EditUserOrdersInventory_result)that);
      return false;
    }

    public boolean equals(EditUserOrdersInventory_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(EditUserOrdersInventory_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("EditUserOrdersInventory_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class EditUserOrdersInventory_resultStandardSchemeFactory implements SchemeFactory {
      public EditUserOrdersInventory_resultStandardScheme getScheme() {
        return new EditUserOrdersInventory_resultStandardScheme();
      }
    }

    private static class EditUserOrdersInventory_resultStandardScheme extends StandardScheme<EditUserOrdersInventory_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, EditUserOrdersInventory_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, EditUserOrdersInventory_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class EditUserOrdersInventory_resultTupleSchemeFactory implements SchemeFactory {
      public EditUserOrdersInventory_resultTupleScheme getScheme() {
        return new EditUserOrdersInventory_resultTupleScheme();
      }
    }

    private static class EditUserOrdersInventory_resultTupleScheme extends TupleScheme<EditUserOrdersInventory_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, EditUserOrdersInventory_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, EditUserOrdersInventory_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class AppraiseclassifyCount_args implements org.apache.thrift.TBase<AppraiseclassifyCount_args, AppraiseclassifyCount_args._Fields>, java.io.Serializable, Cloneable, Comparable<AppraiseclassifyCount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppraiseclassifyCount_args");

    private static final org.apache.thrift.protocol.TField ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("entity", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new AppraiseclassifyCount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new AppraiseclassifyCount_argsTupleSchemeFactory());
    }

    public AppraiseEntity entity; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENTITY((short)1, "entity");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENTITY
            return ENTITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENTITY, new org.apache.thrift.meta_data.FieldMetaData("entity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AppraiseEntity.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AppraiseclassifyCount_args.class, metaDataMap);
    }

    public AppraiseclassifyCount_args() {
    }

    public AppraiseclassifyCount_args(
      AppraiseEntity entity)
    {
      this();
      this.entity = entity;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AppraiseclassifyCount_args(AppraiseclassifyCount_args other) {
      if (other.isSetEntity()) {
        this.entity = new AppraiseEntity(other.entity);
      }
    }

    public AppraiseclassifyCount_args deepCopy() {
      return new AppraiseclassifyCount_args(this);
    }

    @Override
    public void clear() {
      this.entity = null;
    }

    public AppraiseEntity getEntity() {
      return this.entity;
    }

    public AppraiseclassifyCount_args setEntity(AppraiseEntity entity) {
      this.entity = entity;
      return this;
    }

    public void unsetEntity() {
      this.entity = null;
    }

    /** Returns true if field entity is set (has been assigned a value) and false otherwise */
    public boolean isSetEntity() {
      return this.entity != null;
    }

    public void setEntityIsSet(boolean value) {
      if (!value) {
        this.entity = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ENTITY:
        if (value == null) {
          unsetEntity();
        } else {
          setEntity((AppraiseEntity)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ENTITY:
        return getEntity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ENTITY:
        return isSetEntity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AppraiseclassifyCount_args)
        return this.equals((AppraiseclassifyCount_args)that);
      return false;
    }

    public boolean equals(AppraiseclassifyCount_args that) {
      if (that == null)
        return false;

      boolean this_present_entity = true && this.isSetEntity();
      boolean that_present_entity = true && that.isSetEntity();
      if (this_present_entity || that_present_entity) {
        if (!(this_present_entity && that_present_entity))
          return false;
        if (!this.entity.equals(that.entity))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_entity = true && (isSetEntity());
      list.add(present_entity);
      if (present_entity)
        list.add(entity);

      return list.hashCode();
    }

    @Override
    public int compareTo(AppraiseclassifyCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEntity()).compareTo(other.isSetEntity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entity, other.entity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AppraiseclassifyCount_args(");
      boolean first = true;

      sb.append("entity:");
      if (this.entity == null) {
        sb.append("null");
      } else {
        sb.append(this.entity);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (entity != null) {
        entity.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AppraiseclassifyCount_argsStandardSchemeFactory implements SchemeFactory {
      public AppraiseclassifyCount_argsStandardScheme getScheme() {
        return new AppraiseclassifyCount_argsStandardScheme();
      }
    }

    private static class AppraiseclassifyCount_argsStandardScheme extends StandardScheme<AppraiseclassifyCount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AppraiseclassifyCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.entity = new AppraiseEntity();
                struct.entity.read(iprot);
                struct.setEntityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AppraiseclassifyCount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.entity != null) {
          oprot.writeFieldBegin(ENTITY_FIELD_DESC);
          struct.entity.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AppraiseclassifyCount_argsTupleSchemeFactory implements SchemeFactory {
      public AppraiseclassifyCount_argsTupleScheme getScheme() {
        return new AppraiseclassifyCount_argsTupleScheme();
      }
    }

    private static class AppraiseclassifyCount_argsTupleScheme extends TupleScheme<AppraiseclassifyCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AppraiseclassifyCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEntity()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEntity()) {
          struct.entity.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AppraiseclassifyCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.entity = new AppraiseEntity();
          struct.entity.read(iprot);
          struct.setEntityIsSet(true);
        }
      }
    }

  }

  public static class AppraiseclassifyCount_result implements org.apache.thrift.TBase<AppraiseclassifyCount_result, AppraiseclassifyCount_result._Fields>, java.io.Serializable, Cloneable, Comparable<AppraiseclassifyCount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppraiseclassifyCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new AppraiseclassifyCount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new AppraiseclassifyCount_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AppraiseclassifyCount_result.class, metaDataMap);
    }

    public AppraiseclassifyCount_result() {
    }

    public AppraiseclassifyCount_result(
      Map<String,String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AppraiseclassifyCount_result(AppraiseclassifyCount_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
    }

    public AppraiseclassifyCount_result deepCopy() {
      return new AppraiseclassifyCount_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public AppraiseclassifyCount_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AppraiseclassifyCount_result)
        return this.equals((AppraiseclassifyCount_result)that);
      return false;
    }

    public boolean equals(AppraiseclassifyCount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(AppraiseclassifyCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AppraiseclassifyCount_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AppraiseclassifyCount_resultStandardSchemeFactory implements SchemeFactory {
      public AppraiseclassifyCount_resultStandardScheme getScheme() {
        return new AppraiseclassifyCount_resultStandardScheme();
      }
    }

    private static class AppraiseclassifyCount_resultStandardScheme extends StandardScheme<AppraiseclassifyCount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AppraiseclassifyCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map54 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map54.size);
                  String _key55;
                  String _val56;
                  for (int _i57 = 0; _i57 < _map54.size; ++_i57)
                  {
                    _key55 = iprot.readString();
                    _val56 = iprot.readString();
                    struct.success.put(_key55, _val56);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AppraiseclassifyCount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter58 : struct.success.entrySet())
            {
              oprot.writeString(_iter58.getKey());
              oprot.writeString(_iter58.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AppraiseclassifyCount_resultTupleSchemeFactory implements SchemeFactory {
      public AppraiseclassifyCount_resultTupleScheme getScheme() {
        return new AppraiseclassifyCount_resultTupleScheme();
      }
    }

    private static class AppraiseclassifyCount_resultTupleScheme extends TupleScheme<AppraiseclassifyCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AppraiseclassifyCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter59 : struct.success.entrySet())
            {
              oprot.writeString(_iter59.getKey());
              oprot.writeString(_iter59.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AppraiseclassifyCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map60 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map60.size);
            String _key61;
            String _val62;
            for (int _i63 = 0; _i63 < _map60.size; ++_i63)
            {
              _key61 = iprot.readString();
              _val62 = iprot.readString();
              struct.success.put(_key61, _val62);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class goodsAppraise_args implements org.apache.thrift.TBase<goodsAppraise_args, goodsAppraise_args._Fields>, java.io.Serializable, Cloneable, Comparable<goodsAppraise_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("goodsAppraise_args");

    private static final org.apache.thrift.protocol.TField ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("entity", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new goodsAppraise_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new goodsAppraise_argsTupleSchemeFactory());
    }

    public AppraiseEntity entity; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENTITY((short)1, "entity");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENTITY
            return ENTITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENTITY, new org.apache.thrift.meta_data.FieldMetaData("entity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AppraiseEntity.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(goodsAppraise_args.class, metaDataMap);
    }

    public goodsAppraise_args() {
    }

    public goodsAppraise_args(
      AppraiseEntity entity)
    {
      this();
      this.entity = entity;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public goodsAppraise_args(goodsAppraise_args other) {
      if (other.isSetEntity()) {
        this.entity = new AppraiseEntity(other.entity);
      }
    }

    public goodsAppraise_args deepCopy() {
      return new goodsAppraise_args(this);
    }

    @Override
    public void clear() {
      this.entity = null;
    }

    public AppraiseEntity getEntity() {
      return this.entity;
    }

    public goodsAppraise_args setEntity(AppraiseEntity entity) {
      this.entity = entity;
      return this;
    }

    public void unsetEntity() {
      this.entity = null;
    }

    /** Returns true if field entity is set (has been assigned a value) and false otherwise */
    public boolean isSetEntity() {
      return this.entity != null;
    }

    public void setEntityIsSet(boolean value) {
      if (!value) {
        this.entity = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ENTITY:
        if (value == null) {
          unsetEntity();
        } else {
          setEntity((AppraiseEntity)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ENTITY:
        return getEntity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ENTITY:
        return isSetEntity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof goodsAppraise_args)
        return this.equals((goodsAppraise_args)that);
      return false;
    }

    public boolean equals(goodsAppraise_args that) {
      if (that == null)
        return false;

      boolean this_present_entity = true && this.isSetEntity();
      boolean that_present_entity = true && that.isSetEntity();
      if (this_present_entity || that_present_entity) {
        if (!(this_present_entity && that_present_entity))
          return false;
        if (!this.entity.equals(that.entity))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_entity = true && (isSetEntity());
      list.add(present_entity);
      if (present_entity)
        list.add(entity);

      return list.hashCode();
    }

    @Override
    public int compareTo(goodsAppraise_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEntity()).compareTo(other.isSetEntity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entity, other.entity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("goodsAppraise_args(");
      boolean first = true;

      sb.append("entity:");
      if (this.entity == null) {
        sb.append("null");
      } else {
        sb.append(this.entity);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (entity != null) {
        entity.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class goodsAppraise_argsStandardSchemeFactory implements SchemeFactory {
      public goodsAppraise_argsStandardScheme getScheme() {
        return new goodsAppraise_argsStandardScheme();
      }
    }

    private static class goodsAppraise_argsStandardScheme extends StandardScheme<goodsAppraise_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, goodsAppraise_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.entity = new AppraiseEntity();
                struct.entity.read(iprot);
                struct.setEntityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, goodsAppraise_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.entity != null) {
          oprot.writeFieldBegin(ENTITY_FIELD_DESC);
          struct.entity.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class goodsAppraise_argsTupleSchemeFactory implements SchemeFactory {
      public goodsAppraise_argsTupleScheme getScheme() {
        return new goodsAppraise_argsTupleScheme();
      }
    }

    private static class goodsAppraise_argsTupleScheme extends TupleScheme<goodsAppraise_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, goodsAppraise_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEntity()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEntity()) {
          struct.entity.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, goodsAppraise_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.entity = new AppraiseEntity();
          struct.entity.read(iprot);
          struct.setEntityIsSet(true);
        }
      }
    }

  }

  public static class goodsAppraise_result implements org.apache.thrift.TBase<goodsAppraise_result, goodsAppraise_result._Fields>, java.io.Serializable, Cloneable, Comparable<goodsAppraise_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("goodsAppraise_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new goodsAppraise_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new goodsAppraise_resultTupleSchemeFactory());
    }

    public List<AppraiseEntity> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AppraiseEntity.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(goodsAppraise_result.class, metaDataMap);
    }

    public goodsAppraise_result() {
    }

    public goodsAppraise_result(
      List<AppraiseEntity> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public goodsAppraise_result(goodsAppraise_result other) {
      if (other.isSetSuccess()) {
        List<AppraiseEntity> __this__success = new ArrayList<AppraiseEntity>(other.success.size());
        for (AppraiseEntity other_element : other.success) {
          __this__success.add(new AppraiseEntity(other_element));
        }
        this.success = __this__success;
      }
    }

    public goodsAppraise_result deepCopy() {
      return new goodsAppraise_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<AppraiseEntity> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(AppraiseEntity elem) {
      if (this.success == null) {
        this.success = new ArrayList<AppraiseEntity>();
      }
      this.success.add(elem);
    }

    public List<AppraiseEntity> getSuccess() {
      return this.success;
    }

    public goodsAppraise_result setSuccess(List<AppraiseEntity> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<AppraiseEntity>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof goodsAppraise_result)
        return this.equals((goodsAppraise_result)that);
      return false;
    }

    public boolean equals(goodsAppraise_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(goodsAppraise_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("goodsAppraise_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class goodsAppraise_resultStandardSchemeFactory implements SchemeFactory {
      public goodsAppraise_resultStandardScheme getScheme() {
        return new goodsAppraise_resultStandardScheme();
      }
    }

    private static class goodsAppraise_resultStandardScheme extends StandardScheme<goodsAppraise_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, goodsAppraise_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
                  struct.success = new ArrayList<AppraiseEntity>(_list64.size);
                  AppraiseEntity _elem65;
                  for (int _i66 = 0; _i66 < _list64.size; ++_i66)
                  {
                    _elem65 = new AppraiseEntity();
                    _elem65.read(iprot);
                    struct.success.add(_elem65);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, goodsAppraise_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (AppraiseEntity _iter67 : struct.success)
            {
              _iter67.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class goodsAppraise_resultTupleSchemeFactory implements SchemeFactory {
      public goodsAppraise_resultTupleScheme getScheme() {
        return new goodsAppraise_resultTupleScheme();
      }
    }

    private static class goodsAppraise_resultTupleScheme extends TupleScheme<goodsAppraise_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, goodsAppraise_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (AppraiseEntity _iter68 : struct.success)
            {
              _iter68.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, goodsAppraise_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list69 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<AppraiseEntity>(_list69.size);
            AppraiseEntity _elem70;
            for (int _i71 = 0; _i71 < _list69.size; ++_i71)
            {
              _elem70 = new AppraiseEntity();
              _elem70.read(iprot);
              struct.success.add(_elem70);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class AppraiseOrder_args implements org.apache.thrift.TBase<AppraiseOrder_args, AppraiseOrder_args._Fields>, java.io.Serializable, Cloneable, Comparable<AppraiseOrder_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppraiseOrder_args");

    private static final org.apache.thrift.protocol.TField ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("entity", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField HMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("hmap", org.apache.thrift.protocol.TType.MAP, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new AppraiseOrder_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new AppraiseOrder_argsTupleSchemeFactory());
    }

    public AppraiseEntity entity; // required
    public Map<String,String> hmap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENTITY((short)1, "entity"),
      HMAP((short)2, "hmap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENTITY
            return ENTITY;
          case 2: // HMAP
            return HMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENTITY, new org.apache.thrift.meta_data.FieldMetaData("entity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AppraiseEntity.class)));
      tmpMap.put(_Fields.HMAP, new org.apache.thrift.meta_data.FieldMetaData("hmap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AppraiseOrder_args.class, metaDataMap);
    }

    public AppraiseOrder_args() {
    }

    public AppraiseOrder_args(
      AppraiseEntity entity,
      Map<String,String> hmap)
    {
      this();
      this.entity = entity;
      this.hmap = hmap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AppraiseOrder_args(AppraiseOrder_args other) {
      if (other.isSetEntity()) {
        this.entity = new AppraiseEntity(other.entity);
      }
      if (other.isSetHmap()) {
        Map<String,String> __this__hmap = new HashMap<String,String>(other.hmap);
        this.hmap = __this__hmap;
      }
    }

    public AppraiseOrder_args deepCopy() {
      return new AppraiseOrder_args(this);
    }

    @Override
    public void clear() {
      this.entity = null;
      this.hmap = null;
    }

    public AppraiseEntity getEntity() {
      return this.entity;
    }

    public AppraiseOrder_args setEntity(AppraiseEntity entity) {
      this.entity = entity;
      return this;
    }

    public void unsetEntity() {
      this.entity = null;
    }

    /** Returns true if field entity is set (has been assigned a value) and false otherwise */
    public boolean isSetEntity() {
      return this.entity != null;
    }

    public void setEntityIsSet(boolean value) {
      if (!value) {
        this.entity = null;
      }
    }

    public int getHmapSize() {
      return (this.hmap == null) ? 0 : this.hmap.size();
    }

    public void putToHmap(String key, String val) {
      if (this.hmap == null) {
        this.hmap = new HashMap<String,String>();
      }
      this.hmap.put(key, val);
    }

    public Map<String,String> getHmap() {
      return this.hmap;
    }

    public AppraiseOrder_args setHmap(Map<String,String> hmap) {
      this.hmap = hmap;
      return this;
    }

    public void unsetHmap() {
      this.hmap = null;
    }

    /** Returns true if field hmap is set (has been assigned a value) and false otherwise */
    public boolean isSetHmap() {
      return this.hmap != null;
    }

    public void setHmapIsSet(boolean value) {
      if (!value) {
        this.hmap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ENTITY:
        if (value == null) {
          unsetEntity();
        } else {
          setEntity((AppraiseEntity)value);
        }
        break;

      case HMAP:
        if (value == null) {
          unsetHmap();
        } else {
          setHmap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ENTITY:
        return getEntity();

      case HMAP:
        return getHmap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ENTITY:
        return isSetEntity();
      case HMAP:
        return isSetHmap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AppraiseOrder_args)
        return this.equals((AppraiseOrder_args)that);
      return false;
    }

    public boolean equals(AppraiseOrder_args that) {
      if (that == null)
        return false;

      boolean this_present_entity = true && this.isSetEntity();
      boolean that_present_entity = true && that.isSetEntity();
      if (this_present_entity || that_present_entity) {
        if (!(this_present_entity && that_present_entity))
          return false;
        if (!this.entity.equals(that.entity))
          return false;
      }

      boolean this_present_hmap = true && this.isSetHmap();
      boolean that_present_hmap = true && that.isSetHmap();
      if (this_present_hmap || that_present_hmap) {
        if (!(this_present_hmap && that_present_hmap))
          return false;
        if (!this.hmap.equals(that.hmap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_entity = true && (isSetEntity());
      list.add(present_entity);
      if (present_entity)
        list.add(entity);

      boolean present_hmap = true && (isSetHmap());
      list.add(present_hmap);
      if (present_hmap)
        list.add(hmap);

      return list.hashCode();
    }

    @Override
    public int compareTo(AppraiseOrder_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEntity()).compareTo(other.isSetEntity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entity, other.entity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHmap()).compareTo(other.isSetHmap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHmap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hmap, other.hmap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AppraiseOrder_args(");
      boolean first = true;

      sb.append("entity:");
      if (this.entity == null) {
        sb.append("null");
      } else {
        sb.append(this.entity);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hmap:");
      if (this.hmap == null) {
        sb.append("null");
      } else {
        sb.append(this.hmap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (entity != null) {
        entity.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AppraiseOrder_argsStandardSchemeFactory implements SchemeFactory {
      public AppraiseOrder_argsStandardScheme getScheme() {
        return new AppraiseOrder_argsStandardScheme();
      }
    }

    private static class AppraiseOrder_argsStandardScheme extends StandardScheme<AppraiseOrder_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AppraiseOrder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.entity = new AppraiseEntity();
                struct.entity.read(iprot);
                struct.setEntityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // HMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map72 = iprot.readMapBegin();
                  struct.hmap = new HashMap<String,String>(2*_map72.size);
                  String _key73;
                  String _val74;
                  for (int _i75 = 0; _i75 < _map72.size; ++_i75)
                  {
                    _key73 = iprot.readString();
                    _val74 = iprot.readString();
                    struct.hmap.put(_key73, _val74);
                  }
                  iprot.readMapEnd();
                }
                struct.setHmapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AppraiseOrder_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.entity != null) {
          oprot.writeFieldBegin(ENTITY_FIELD_DESC);
          struct.entity.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.hmap != null) {
          oprot.writeFieldBegin(HMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.hmap.size()));
            for (Map.Entry<String, String> _iter76 : struct.hmap.entrySet())
            {
              oprot.writeString(_iter76.getKey());
              oprot.writeString(_iter76.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AppraiseOrder_argsTupleSchemeFactory implements SchemeFactory {
      public AppraiseOrder_argsTupleScheme getScheme() {
        return new AppraiseOrder_argsTupleScheme();
      }
    }

    private static class AppraiseOrder_argsTupleScheme extends TupleScheme<AppraiseOrder_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AppraiseOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEntity()) {
          optionals.set(0);
        }
        if (struct.isSetHmap()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetEntity()) {
          struct.entity.write(oprot);
        }
        if (struct.isSetHmap()) {
          {
            oprot.writeI32(struct.hmap.size());
            for (Map.Entry<String, String> _iter77 : struct.hmap.entrySet())
            {
              oprot.writeString(_iter77.getKey());
              oprot.writeString(_iter77.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AppraiseOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.entity = new AppraiseEntity();
          struct.entity.read(iprot);
          struct.setEntityIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map78 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.hmap = new HashMap<String,String>(2*_map78.size);
            String _key79;
            String _val80;
            for (int _i81 = 0; _i81 < _map78.size; ++_i81)
            {
              _key79 = iprot.readString();
              _val80 = iprot.readString();
              struct.hmap.put(_key79, _val80);
            }
          }
          struct.setHmapIsSet(true);
        }
      }
    }

  }

  public static class AppraiseOrder_result implements org.apache.thrift.TBase<AppraiseOrder_result, AppraiseOrder_result._Fields>, java.io.Serializable, Cloneable, Comparable<AppraiseOrder_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppraiseOrder_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new AppraiseOrder_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new AppraiseOrder_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AppraiseOrder_result.class, metaDataMap);
    }

    public AppraiseOrder_result() {
    }

    public AppraiseOrder_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AppraiseOrder_result(AppraiseOrder_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public AppraiseOrder_result deepCopy() {
      return new AppraiseOrder_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public AppraiseOrder_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AppraiseOrder_result)
        return this.equals((AppraiseOrder_result)that);
      return false;
    }

    public boolean equals(AppraiseOrder_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(AppraiseOrder_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AppraiseOrder_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AppraiseOrder_resultStandardSchemeFactory implements SchemeFactory {
      public AppraiseOrder_resultStandardScheme getScheme() {
        return new AppraiseOrder_resultStandardScheme();
      }
    }

    private static class AppraiseOrder_resultStandardScheme extends StandardScheme<AppraiseOrder_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AppraiseOrder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AppraiseOrder_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AppraiseOrder_resultTupleSchemeFactory implements SchemeFactory {
      public AppraiseOrder_resultTupleScheme getScheme() {
        return new AppraiseOrder_resultTupleScheme();
      }
    }

    private static class AppraiseOrder_resultTupleScheme extends TupleScheme<AppraiseOrder_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AppraiseOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AppraiseOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class ReturnedPurchase_args implements org.apache.thrift.TBase<ReturnedPurchase_args, ReturnedPurchase_args._Fields>, java.io.Serializable, Cloneable, Comparable<ReturnedPurchase_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReturnedPurchase_args");

    private static final org.apache.thrift.protocol.TField ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("entity", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField HMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("hmap", org.apache.thrift.protocol.TType.MAP, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ReturnedPurchase_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ReturnedPurchase_argsTupleSchemeFactory());
    }

    public OrderEntity entity; // required
    public Map<String,String> hmap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENTITY((short)1, "entity"),
      HMAP((short)2, "hmap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENTITY
            return ENTITY;
          case 2: // HMAP
            return HMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENTITY, new org.apache.thrift.meta_data.FieldMetaData("entity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OrderEntity.class)));
      tmpMap.put(_Fields.HMAP, new org.apache.thrift.meta_data.FieldMetaData("hmap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReturnedPurchase_args.class, metaDataMap);
    }

    public ReturnedPurchase_args() {
    }

    public ReturnedPurchase_args(
      OrderEntity entity,
      Map<String,String> hmap)
    {
      this();
      this.entity = entity;
      this.hmap = hmap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ReturnedPurchase_args(ReturnedPurchase_args other) {
      if (other.isSetEntity()) {
        this.entity = new OrderEntity(other.entity);
      }
      if (other.isSetHmap()) {
        Map<String,String> __this__hmap = new HashMap<String,String>(other.hmap);
        this.hmap = __this__hmap;
      }
    }

    public ReturnedPurchase_args deepCopy() {
      return new ReturnedPurchase_args(this);
    }

    @Override
    public void clear() {
      this.entity = null;
      this.hmap = null;
    }

    public OrderEntity getEntity() {
      return this.entity;
    }

    public ReturnedPurchase_args setEntity(OrderEntity entity) {
      this.entity = entity;
      return this;
    }

    public void unsetEntity() {
      this.entity = null;
    }

    /** Returns true if field entity is set (has been assigned a value) and false otherwise */
    public boolean isSetEntity() {
      return this.entity != null;
    }

    public void setEntityIsSet(boolean value) {
      if (!value) {
        this.entity = null;
      }
    }

    public int getHmapSize() {
      return (this.hmap == null) ? 0 : this.hmap.size();
    }

    public void putToHmap(String key, String val) {
      if (this.hmap == null) {
        this.hmap = new HashMap<String,String>();
      }
      this.hmap.put(key, val);
    }

    public Map<String,String> getHmap() {
      return this.hmap;
    }

    public ReturnedPurchase_args setHmap(Map<String,String> hmap) {
      this.hmap = hmap;
      return this;
    }

    public void unsetHmap() {
      this.hmap = null;
    }

    /** Returns true if field hmap is set (has been assigned a value) and false otherwise */
    public boolean isSetHmap() {
      return this.hmap != null;
    }

    public void setHmapIsSet(boolean value) {
      if (!value) {
        this.hmap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ENTITY:
        if (value == null) {
          unsetEntity();
        } else {
          setEntity((OrderEntity)value);
        }
        break;

      case HMAP:
        if (value == null) {
          unsetHmap();
        } else {
          setHmap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ENTITY:
        return getEntity();

      case HMAP:
        return getHmap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ENTITY:
        return isSetEntity();
      case HMAP:
        return isSetHmap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ReturnedPurchase_args)
        return this.equals((ReturnedPurchase_args)that);
      return false;
    }

    public boolean equals(ReturnedPurchase_args that) {
      if (that == null)
        return false;

      boolean this_present_entity = true && this.isSetEntity();
      boolean that_present_entity = true && that.isSetEntity();
      if (this_present_entity || that_present_entity) {
        if (!(this_present_entity && that_present_entity))
          return false;
        if (!this.entity.equals(that.entity))
          return false;
      }

      boolean this_present_hmap = true && this.isSetHmap();
      boolean that_present_hmap = true && that.isSetHmap();
      if (this_present_hmap || that_present_hmap) {
        if (!(this_present_hmap && that_present_hmap))
          return false;
        if (!this.hmap.equals(that.hmap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_entity = true && (isSetEntity());
      list.add(present_entity);
      if (present_entity)
        list.add(entity);

      boolean present_hmap = true && (isSetHmap());
      list.add(present_hmap);
      if (present_hmap)
        list.add(hmap);

      return list.hashCode();
    }

    @Override
    public int compareTo(ReturnedPurchase_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEntity()).compareTo(other.isSetEntity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entity, other.entity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHmap()).compareTo(other.isSetHmap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHmap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hmap, other.hmap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ReturnedPurchase_args(");
      boolean first = true;

      sb.append("entity:");
      if (this.entity == null) {
        sb.append("null");
      } else {
        sb.append(this.entity);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hmap:");
      if (this.hmap == null) {
        sb.append("null");
      } else {
        sb.append(this.hmap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (entity != null) {
        entity.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ReturnedPurchase_argsStandardSchemeFactory implements SchemeFactory {
      public ReturnedPurchase_argsStandardScheme getScheme() {
        return new ReturnedPurchase_argsStandardScheme();
      }
    }

    private static class ReturnedPurchase_argsStandardScheme extends StandardScheme<ReturnedPurchase_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ReturnedPurchase_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.entity = new OrderEntity();
                struct.entity.read(iprot);
                struct.setEntityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // HMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map82 = iprot.readMapBegin();
                  struct.hmap = new HashMap<String,String>(2*_map82.size);
                  String _key83;
                  String _val84;
                  for (int _i85 = 0; _i85 < _map82.size; ++_i85)
                  {
                    _key83 = iprot.readString();
                    _val84 = iprot.readString();
                    struct.hmap.put(_key83, _val84);
                  }
                  iprot.readMapEnd();
                }
                struct.setHmapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ReturnedPurchase_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.entity != null) {
          oprot.writeFieldBegin(ENTITY_FIELD_DESC);
          struct.entity.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.hmap != null) {
          oprot.writeFieldBegin(HMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.hmap.size()));
            for (Map.Entry<String, String> _iter86 : struct.hmap.entrySet())
            {
              oprot.writeString(_iter86.getKey());
              oprot.writeString(_iter86.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ReturnedPurchase_argsTupleSchemeFactory implements SchemeFactory {
      public ReturnedPurchase_argsTupleScheme getScheme() {
        return new ReturnedPurchase_argsTupleScheme();
      }
    }

    private static class ReturnedPurchase_argsTupleScheme extends TupleScheme<ReturnedPurchase_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ReturnedPurchase_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEntity()) {
          optionals.set(0);
        }
        if (struct.isSetHmap()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetEntity()) {
          struct.entity.write(oprot);
        }
        if (struct.isSetHmap()) {
          {
            oprot.writeI32(struct.hmap.size());
            for (Map.Entry<String, String> _iter87 : struct.hmap.entrySet())
            {
              oprot.writeString(_iter87.getKey());
              oprot.writeString(_iter87.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ReturnedPurchase_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.entity = new OrderEntity();
          struct.entity.read(iprot);
          struct.setEntityIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map88 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.hmap = new HashMap<String,String>(2*_map88.size);
            String _key89;
            String _val90;
            for (int _i91 = 0; _i91 < _map88.size; ++_i91)
            {
              _key89 = iprot.readString();
              _val90 = iprot.readString();
              struct.hmap.put(_key89, _val90);
            }
          }
          struct.setHmapIsSet(true);
        }
      }
    }

  }

  public static class ReturnedPurchase_result implements org.apache.thrift.TBase<ReturnedPurchase_result, ReturnedPurchase_result._Fields>, java.io.Serializable, Cloneable, Comparable<ReturnedPurchase_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReturnedPurchase_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ReturnedPurchase_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ReturnedPurchase_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReturnedPurchase_result.class, metaDataMap);
    }

    public ReturnedPurchase_result() {
    }

    public ReturnedPurchase_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ReturnedPurchase_result(ReturnedPurchase_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public ReturnedPurchase_result deepCopy() {
      return new ReturnedPurchase_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public ReturnedPurchase_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ReturnedPurchase_result)
        return this.equals((ReturnedPurchase_result)that);
      return false;
    }

    public boolean equals(ReturnedPurchase_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(ReturnedPurchase_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ReturnedPurchase_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ReturnedPurchase_resultStandardSchemeFactory implements SchemeFactory {
      public ReturnedPurchase_resultStandardScheme getScheme() {
        return new ReturnedPurchase_resultStandardScheme();
      }
    }

    private static class ReturnedPurchase_resultStandardScheme extends StandardScheme<ReturnedPurchase_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ReturnedPurchase_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ReturnedPurchase_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ReturnedPurchase_resultTupleSchemeFactory implements SchemeFactory {
      public ReturnedPurchase_resultTupleScheme getScheme() {
        return new ReturnedPurchase_resultTupleScheme();
      }
    }

    private static class ReturnedPurchase_resultTupleScheme extends TupleScheme<ReturnedPurchase_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ReturnedPurchase_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ReturnedPurchase_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class ApplyAftermarket_args implements org.apache.thrift.TBase<ApplyAftermarket_args, ApplyAftermarket_args._Fields>, java.io.Serializable, Cloneable, Comparable<ApplyAftermarket_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ApplyAftermarket_args");

    private static final org.apache.thrift.protocol.TField ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("entity", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField HMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("hmap", org.apache.thrift.protocol.TType.MAP, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ApplyAftermarket_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ApplyAftermarket_argsTupleSchemeFactory());
    }

    public OrderEntity entity; // required
    public Map<String,String> hmap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENTITY((short)1, "entity"),
      HMAP((short)2, "hmap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENTITY
            return ENTITY;
          case 2: // HMAP
            return HMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENTITY, new org.apache.thrift.meta_data.FieldMetaData("entity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OrderEntity.class)));
      tmpMap.put(_Fields.HMAP, new org.apache.thrift.meta_data.FieldMetaData("hmap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ApplyAftermarket_args.class, metaDataMap);
    }

    public ApplyAftermarket_args() {
    }

    public ApplyAftermarket_args(
      OrderEntity entity,
      Map<String,String> hmap)
    {
      this();
      this.entity = entity;
      this.hmap = hmap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ApplyAftermarket_args(ApplyAftermarket_args other) {
      if (other.isSetEntity()) {
        this.entity = new OrderEntity(other.entity);
      }
      if (other.isSetHmap()) {
        Map<String,String> __this__hmap = new HashMap<String,String>(other.hmap);
        this.hmap = __this__hmap;
      }
    }

    public ApplyAftermarket_args deepCopy() {
      return new ApplyAftermarket_args(this);
    }

    @Override
    public void clear() {
      this.entity = null;
      this.hmap = null;
    }

    public OrderEntity getEntity() {
      return this.entity;
    }

    public ApplyAftermarket_args setEntity(OrderEntity entity) {
      this.entity = entity;
      return this;
    }

    public void unsetEntity() {
      this.entity = null;
    }

    /** Returns true if field entity is set (has been assigned a value) and false otherwise */
    public boolean isSetEntity() {
      return this.entity != null;
    }

    public void setEntityIsSet(boolean value) {
      if (!value) {
        this.entity = null;
      }
    }

    public int getHmapSize() {
      return (this.hmap == null) ? 0 : this.hmap.size();
    }

    public void putToHmap(String key, String val) {
      if (this.hmap == null) {
        this.hmap = new HashMap<String,String>();
      }
      this.hmap.put(key, val);
    }

    public Map<String,String> getHmap() {
      return this.hmap;
    }

    public ApplyAftermarket_args setHmap(Map<String,String> hmap) {
      this.hmap = hmap;
      return this;
    }

    public void unsetHmap() {
      this.hmap = null;
    }

    /** Returns true if field hmap is set (has been assigned a value) and false otherwise */
    public boolean isSetHmap() {
      return this.hmap != null;
    }

    public void setHmapIsSet(boolean value) {
      if (!value) {
        this.hmap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ENTITY:
        if (value == null) {
          unsetEntity();
        } else {
          setEntity((OrderEntity)value);
        }
        break;

      case HMAP:
        if (value == null) {
          unsetHmap();
        } else {
          setHmap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ENTITY:
        return getEntity();

      case HMAP:
        return getHmap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ENTITY:
        return isSetEntity();
      case HMAP:
        return isSetHmap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ApplyAftermarket_args)
        return this.equals((ApplyAftermarket_args)that);
      return false;
    }

    public boolean equals(ApplyAftermarket_args that) {
      if (that == null)
        return false;

      boolean this_present_entity = true && this.isSetEntity();
      boolean that_present_entity = true && that.isSetEntity();
      if (this_present_entity || that_present_entity) {
        if (!(this_present_entity && that_present_entity))
          return false;
        if (!this.entity.equals(that.entity))
          return false;
      }

      boolean this_present_hmap = true && this.isSetHmap();
      boolean that_present_hmap = true && that.isSetHmap();
      if (this_present_hmap || that_present_hmap) {
        if (!(this_present_hmap && that_present_hmap))
          return false;
        if (!this.hmap.equals(that.hmap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_entity = true && (isSetEntity());
      list.add(present_entity);
      if (present_entity)
        list.add(entity);

      boolean present_hmap = true && (isSetHmap());
      list.add(present_hmap);
      if (present_hmap)
        list.add(hmap);

      return list.hashCode();
    }

    @Override
    public int compareTo(ApplyAftermarket_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEntity()).compareTo(other.isSetEntity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entity, other.entity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHmap()).compareTo(other.isSetHmap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHmap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hmap, other.hmap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ApplyAftermarket_args(");
      boolean first = true;

      sb.append("entity:");
      if (this.entity == null) {
        sb.append("null");
      } else {
        sb.append(this.entity);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hmap:");
      if (this.hmap == null) {
        sb.append("null");
      } else {
        sb.append(this.hmap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (entity != null) {
        entity.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ApplyAftermarket_argsStandardSchemeFactory implements SchemeFactory {
      public ApplyAftermarket_argsStandardScheme getScheme() {
        return new ApplyAftermarket_argsStandardScheme();
      }
    }

    private static class ApplyAftermarket_argsStandardScheme extends StandardScheme<ApplyAftermarket_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ApplyAftermarket_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.entity = new OrderEntity();
                struct.entity.read(iprot);
                struct.setEntityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // HMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map92 = iprot.readMapBegin();
                  struct.hmap = new HashMap<String,String>(2*_map92.size);
                  String _key93;
                  String _val94;
                  for (int _i95 = 0; _i95 < _map92.size; ++_i95)
                  {
                    _key93 = iprot.readString();
                    _val94 = iprot.readString();
                    struct.hmap.put(_key93, _val94);
                  }
                  iprot.readMapEnd();
                }
                struct.setHmapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ApplyAftermarket_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.entity != null) {
          oprot.writeFieldBegin(ENTITY_FIELD_DESC);
          struct.entity.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.hmap != null) {
          oprot.writeFieldBegin(HMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.hmap.size()));
            for (Map.Entry<String, String> _iter96 : struct.hmap.entrySet())
            {
              oprot.writeString(_iter96.getKey());
              oprot.writeString(_iter96.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ApplyAftermarket_argsTupleSchemeFactory implements SchemeFactory {
      public ApplyAftermarket_argsTupleScheme getScheme() {
        return new ApplyAftermarket_argsTupleScheme();
      }
    }

    private static class ApplyAftermarket_argsTupleScheme extends TupleScheme<ApplyAftermarket_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ApplyAftermarket_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEntity()) {
          optionals.set(0);
        }
        if (struct.isSetHmap()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetEntity()) {
          struct.entity.write(oprot);
        }
        if (struct.isSetHmap()) {
          {
            oprot.writeI32(struct.hmap.size());
            for (Map.Entry<String, String> _iter97 : struct.hmap.entrySet())
            {
              oprot.writeString(_iter97.getKey());
              oprot.writeString(_iter97.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ApplyAftermarket_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.entity = new OrderEntity();
          struct.entity.read(iprot);
          struct.setEntityIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map98 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.hmap = new HashMap<String,String>(2*_map98.size);
            String _key99;
            String _val100;
            for (int _i101 = 0; _i101 < _map98.size; ++_i101)
            {
              _key99 = iprot.readString();
              _val100 = iprot.readString();
              struct.hmap.put(_key99, _val100);
            }
          }
          struct.setHmapIsSet(true);
        }
      }
    }

  }

  public static class ApplyAftermarket_result implements org.apache.thrift.TBase<ApplyAftermarket_result, ApplyAftermarket_result._Fields>, java.io.Serializable, Cloneable, Comparable<ApplyAftermarket_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ApplyAftermarket_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ApplyAftermarket_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ApplyAftermarket_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ApplyAftermarket_result.class, metaDataMap);
    }

    public ApplyAftermarket_result() {
    }

    public ApplyAftermarket_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ApplyAftermarket_result(ApplyAftermarket_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public ApplyAftermarket_result deepCopy() {
      return new ApplyAftermarket_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public ApplyAftermarket_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ApplyAftermarket_result)
        return this.equals((ApplyAftermarket_result)that);
      return false;
    }

    public boolean equals(ApplyAftermarket_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(ApplyAftermarket_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ApplyAftermarket_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ApplyAftermarket_resultStandardSchemeFactory implements SchemeFactory {
      public ApplyAftermarket_resultStandardScheme getScheme() {
        return new ApplyAftermarket_resultStandardScheme();
      }
    }

    private static class ApplyAftermarket_resultStandardScheme extends StandardScheme<ApplyAftermarket_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ApplyAftermarket_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ApplyAftermarket_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ApplyAftermarket_resultTupleSchemeFactory implements SchemeFactory {
      public ApplyAftermarket_resultTupleScheme getScheme() {
        return new ApplyAftermarket_resultTupleScheme();
      }
    }

    private static class ApplyAftermarket_resultTupleScheme extends TupleScheme<ApplyAftermarket_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ApplyAftermarket_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ApplyAftermarket_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class UserFootprints_args implements org.apache.thrift.TBase<UserFootprints_args, UserFootprints_args._Fields>, java.io.Serializable, Cloneable, Comparable<UserFootprints_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserFootprints_args");

    private static final org.apache.thrift.protocol.TField HMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("hmap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UserFootprints_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UserFootprints_argsTupleSchemeFactory());
    }

    public Map<String,String> hmap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HMAP((short)1, "hmap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HMAP
            return HMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HMAP, new org.apache.thrift.meta_data.FieldMetaData("hmap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserFootprints_args.class, metaDataMap);
    }

    public UserFootprints_args() {
    }

    public UserFootprints_args(
      Map<String,String> hmap)
    {
      this();
      this.hmap = hmap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UserFootprints_args(UserFootprints_args other) {
      if (other.isSetHmap()) {
        Map<String,String> __this__hmap = new HashMap<String,String>(other.hmap);
        this.hmap = __this__hmap;
      }
    }

    public UserFootprints_args deepCopy() {
      return new UserFootprints_args(this);
    }

    @Override
    public void clear() {
      this.hmap = null;
    }

    public int getHmapSize() {
      return (this.hmap == null) ? 0 : this.hmap.size();
    }

    public void putToHmap(String key, String val) {
      if (this.hmap == null) {
        this.hmap = new HashMap<String,String>();
      }
      this.hmap.put(key, val);
    }

    public Map<String,String> getHmap() {
      return this.hmap;
    }

    public UserFootprints_args setHmap(Map<String,String> hmap) {
      this.hmap = hmap;
      return this;
    }

    public void unsetHmap() {
      this.hmap = null;
    }

    /** Returns true if field hmap is set (has been assigned a value) and false otherwise */
    public boolean isSetHmap() {
      return this.hmap != null;
    }

    public void setHmapIsSet(boolean value) {
      if (!value) {
        this.hmap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HMAP:
        if (value == null) {
          unsetHmap();
        } else {
          setHmap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HMAP:
        return getHmap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HMAP:
        return isSetHmap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UserFootprints_args)
        return this.equals((UserFootprints_args)that);
      return false;
    }

    public boolean equals(UserFootprints_args that) {
      if (that == null)
        return false;

      boolean this_present_hmap = true && this.isSetHmap();
      boolean that_present_hmap = true && that.isSetHmap();
      if (this_present_hmap || that_present_hmap) {
        if (!(this_present_hmap && that_present_hmap))
          return false;
        if (!this.hmap.equals(that.hmap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_hmap = true && (isSetHmap());
      list.add(present_hmap);
      if (present_hmap)
        list.add(hmap);

      return list.hashCode();
    }

    @Override
    public int compareTo(UserFootprints_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHmap()).compareTo(other.isSetHmap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHmap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hmap, other.hmap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UserFootprints_args(");
      boolean first = true;

      sb.append("hmap:");
      if (this.hmap == null) {
        sb.append("null");
      } else {
        sb.append(this.hmap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UserFootprints_argsStandardSchemeFactory implements SchemeFactory {
      public UserFootprints_argsStandardScheme getScheme() {
        return new UserFootprints_argsStandardScheme();
      }
    }

    private static class UserFootprints_argsStandardScheme extends StandardScheme<UserFootprints_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UserFootprints_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map102 = iprot.readMapBegin();
                  struct.hmap = new HashMap<String,String>(2*_map102.size);
                  String _key103;
                  String _val104;
                  for (int _i105 = 0; _i105 < _map102.size; ++_i105)
                  {
                    _key103 = iprot.readString();
                    _val104 = iprot.readString();
                    struct.hmap.put(_key103, _val104);
                  }
                  iprot.readMapEnd();
                }
                struct.setHmapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UserFootprints_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.hmap != null) {
          oprot.writeFieldBegin(HMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.hmap.size()));
            for (Map.Entry<String, String> _iter106 : struct.hmap.entrySet())
            {
              oprot.writeString(_iter106.getKey());
              oprot.writeString(_iter106.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UserFootprints_argsTupleSchemeFactory implements SchemeFactory {
      public UserFootprints_argsTupleScheme getScheme() {
        return new UserFootprints_argsTupleScheme();
      }
    }

    private static class UserFootprints_argsTupleScheme extends TupleScheme<UserFootprints_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UserFootprints_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHmap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHmap()) {
          {
            oprot.writeI32(struct.hmap.size());
            for (Map.Entry<String, String> _iter107 : struct.hmap.entrySet())
            {
              oprot.writeString(_iter107.getKey());
              oprot.writeString(_iter107.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UserFootprints_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map108 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.hmap = new HashMap<String,String>(2*_map108.size);
            String _key109;
            String _val110;
            for (int _i111 = 0; _i111 < _map108.size; ++_i111)
            {
              _key109 = iprot.readString();
              _val110 = iprot.readString();
              struct.hmap.put(_key109, _val110);
            }
          }
          struct.setHmapIsSet(true);
        }
      }
    }

  }

  public static class UserFootprints_result implements org.apache.thrift.TBase<UserFootprints_result, UserFootprints_result._Fields>, java.io.Serializable, Cloneable, Comparable<UserFootprints_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserFootprints_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UserFootprints_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UserFootprints_resultTupleSchemeFactory());
    }

    public List<Map<String,String>> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserFootprints_result.class, metaDataMap);
    }

    public UserFootprints_result() {
    }

    public UserFootprints_result(
      List<Map<String,String>> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UserFootprints_result(UserFootprints_result other) {
      if (other.isSetSuccess()) {
        List<Map<String,String>> __this__success = new ArrayList<Map<String,String>>(other.success.size());
        for (Map<String,String> other_element : other.success) {
          Map<String,String> __this__success_copy = new HashMap<String,String>(other_element);
          __this__success.add(__this__success_copy);
        }
        this.success = __this__success;
      }
    }

    public UserFootprints_result deepCopy() {
      return new UserFootprints_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Map<String,String>> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Map<String,String> elem) {
      if (this.success == null) {
        this.success = new ArrayList<Map<String,String>>();
      }
      this.success.add(elem);
    }

    public List<Map<String,String>> getSuccess() {
      return this.success;
    }

    public UserFootprints_result setSuccess(List<Map<String,String>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Map<String,String>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UserFootprints_result)
        return this.equals((UserFootprints_result)that);
      return false;
    }

    public boolean equals(UserFootprints_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(UserFootprints_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UserFootprints_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UserFootprints_resultStandardSchemeFactory implements SchemeFactory {
      public UserFootprints_resultStandardScheme getScheme() {
        return new UserFootprints_resultStandardScheme();
      }
    }

    private static class UserFootprints_resultStandardScheme extends StandardScheme<UserFootprints_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UserFootprints_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list112 = iprot.readListBegin();
                  struct.success = new ArrayList<Map<String,String>>(_list112.size);
                  Map<String,String> _elem113;
                  for (int _i114 = 0; _i114 < _list112.size; ++_i114)
                  {
                    {
                      org.apache.thrift.protocol.TMap _map115 = iprot.readMapBegin();
                      _elem113 = new HashMap<String,String>(2*_map115.size);
                      String _key116;
                      String _val117;
                      for (int _i118 = 0; _i118 < _map115.size; ++_i118)
                      {
                        _key116 = iprot.readString();
                        _val117 = iprot.readString();
                        _elem113.put(_key116, _val117);
                      }
                      iprot.readMapEnd();
                    }
                    struct.success.add(_elem113);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UserFootprints_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.success.size()));
            for (Map<String,String> _iter119 : struct.success)
            {
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter119.size()));
                for (Map.Entry<String, String> _iter120 : _iter119.entrySet())
                {
                  oprot.writeString(_iter120.getKey());
                  oprot.writeString(_iter120.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UserFootprints_resultTupleSchemeFactory implements SchemeFactory {
      public UserFootprints_resultTupleScheme getScheme() {
        return new UserFootprints_resultTupleScheme();
      }
    }

    private static class UserFootprints_resultTupleScheme extends TupleScheme<UserFootprints_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UserFootprints_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map<String,String> _iter121 : struct.success)
            {
              {
                oprot.writeI32(_iter121.size());
                for (Map.Entry<String, String> _iter122 : _iter121.entrySet())
                {
                  oprot.writeString(_iter122.getKey());
                  oprot.writeString(_iter122.getValue());
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UserFootprints_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list123 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
            struct.success = new ArrayList<Map<String,String>>(_list123.size);
            Map<String,String> _elem124;
            for (int _i125 = 0; _i125 < _list123.size; ++_i125)
            {
              {
                org.apache.thrift.protocol.TMap _map126 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _elem124 = new HashMap<String,String>(2*_map126.size);
                String _key127;
                String _val128;
                for (int _i129 = 0; _i129 < _map126.size; ++_i129)
                {
                  _key127 = iprot.readString();
                  _val128 = iprot.readString();
                  _elem124.put(_key127, _val128);
                }
              }
              struct.success.add(_elem124);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class AddFootprint_args implements org.apache.thrift.TBase<AddFootprint_args, AddFootprint_args._Fields>, java.io.Serializable, Cloneable, Comparable<AddFootprint_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AddFootprint_args");

    private static final org.apache.thrift.protocol.TField HMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("hmap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new AddFootprint_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new AddFootprint_argsTupleSchemeFactory());
    }

    public Map<String,String> hmap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HMAP((short)1, "hmap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HMAP
            return HMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HMAP, new org.apache.thrift.meta_data.FieldMetaData("hmap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AddFootprint_args.class, metaDataMap);
    }

    public AddFootprint_args() {
    }

    public AddFootprint_args(
      Map<String,String> hmap)
    {
      this();
      this.hmap = hmap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AddFootprint_args(AddFootprint_args other) {
      if (other.isSetHmap()) {
        Map<String,String> __this__hmap = new HashMap<String,String>(other.hmap);
        this.hmap = __this__hmap;
      }
    }

    public AddFootprint_args deepCopy() {
      return new AddFootprint_args(this);
    }

    @Override
    public void clear() {
      this.hmap = null;
    }

    public int getHmapSize() {
      return (this.hmap == null) ? 0 : this.hmap.size();
    }

    public void putToHmap(String key, String val) {
      if (this.hmap == null) {
        this.hmap = new HashMap<String,String>();
      }
      this.hmap.put(key, val);
    }

    public Map<String,String> getHmap() {
      return this.hmap;
    }

    public AddFootprint_args setHmap(Map<String,String> hmap) {
      this.hmap = hmap;
      return this;
    }

    public void unsetHmap() {
      this.hmap = null;
    }

    /** Returns true if field hmap is set (has been assigned a value) and false otherwise */
    public boolean isSetHmap() {
      return this.hmap != null;
    }

    public void setHmapIsSet(boolean value) {
      if (!value) {
        this.hmap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HMAP:
        if (value == null) {
          unsetHmap();
        } else {
          setHmap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HMAP:
        return getHmap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HMAP:
        return isSetHmap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AddFootprint_args)
        return this.equals((AddFootprint_args)that);
      return false;
    }

    public boolean equals(AddFootprint_args that) {
      if (that == null)
        return false;

      boolean this_present_hmap = true && this.isSetHmap();
      boolean that_present_hmap = true && that.isSetHmap();
      if (this_present_hmap || that_present_hmap) {
        if (!(this_present_hmap && that_present_hmap))
          return false;
        if (!this.hmap.equals(that.hmap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_hmap = true && (isSetHmap());
      list.add(present_hmap);
      if (present_hmap)
        list.add(hmap);

      return list.hashCode();
    }

    @Override
    public int compareTo(AddFootprint_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHmap()).compareTo(other.isSetHmap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHmap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hmap, other.hmap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AddFootprint_args(");
      boolean first = true;

      sb.append("hmap:");
      if (this.hmap == null) {
        sb.append("null");
      } else {
        sb.append(this.hmap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AddFootprint_argsStandardSchemeFactory implements SchemeFactory {
      public AddFootprint_argsStandardScheme getScheme() {
        return new AddFootprint_argsStandardScheme();
      }
    }

    private static class AddFootprint_argsStandardScheme extends StandardScheme<AddFootprint_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AddFootprint_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map130 = iprot.readMapBegin();
                  struct.hmap = new HashMap<String,String>(2*_map130.size);
                  String _key131;
                  String _val132;
                  for (int _i133 = 0; _i133 < _map130.size; ++_i133)
                  {
                    _key131 = iprot.readString();
                    _val132 = iprot.readString();
                    struct.hmap.put(_key131, _val132);
                  }
                  iprot.readMapEnd();
                }
                struct.setHmapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AddFootprint_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.hmap != null) {
          oprot.writeFieldBegin(HMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.hmap.size()));
            for (Map.Entry<String, String> _iter134 : struct.hmap.entrySet())
            {
              oprot.writeString(_iter134.getKey());
              oprot.writeString(_iter134.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AddFootprint_argsTupleSchemeFactory implements SchemeFactory {
      public AddFootprint_argsTupleScheme getScheme() {
        return new AddFootprint_argsTupleScheme();
      }
    }

    private static class AddFootprint_argsTupleScheme extends TupleScheme<AddFootprint_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AddFootprint_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHmap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHmap()) {
          {
            oprot.writeI32(struct.hmap.size());
            for (Map.Entry<String, String> _iter135 : struct.hmap.entrySet())
            {
              oprot.writeString(_iter135.getKey());
              oprot.writeString(_iter135.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AddFootprint_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map136 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.hmap = new HashMap<String,String>(2*_map136.size);
            String _key137;
            String _val138;
            for (int _i139 = 0; _i139 < _map136.size; ++_i139)
            {
              _key137 = iprot.readString();
              _val138 = iprot.readString();
              struct.hmap.put(_key137, _val138);
            }
          }
          struct.setHmapIsSet(true);
        }
      }
    }

  }

  public static class AddFootprint_result implements org.apache.thrift.TBase<AddFootprint_result, AddFootprint_result._Fields>, java.io.Serializable, Cloneable, Comparable<AddFootprint_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AddFootprint_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new AddFootprint_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new AddFootprint_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AddFootprint_result.class, metaDataMap);
    }

    public AddFootprint_result() {
    }

    public AddFootprint_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AddFootprint_result(AddFootprint_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public AddFootprint_result deepCopy() {
      return new AddFootprint_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public AddFootprint_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AddFootprint_result)
        return this.equals((AddFootprint_result)that);
      return false;
    }

    public boolean equals(AddFootprint_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(AddFootprint_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AddFootprint_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AddFootprint_resultStandardSchemeFactory implements SchemeFactory {
      public AddFootprint_resultStandardScheme getScheme() {
        return new AddFootprint_resultStandardScheme();
      }
    }

    private static class AddFootprint_resultStandardScheme extends StandardScheme<AddFootprint_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AddFootprint_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AddFootprint_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AddFootprint_resultTupleSchemeFactory implements SchemeFactory {
      public AddFootprint_resultTupleScheme getScheme() {
        return new AddFootprint_resultTupleScheme();
      }
    }

    private static class AddFootprint_resultTupleScheme extends TupleScheme<AddFootprint_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AddFootprint_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AddFootprint_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class DelFootprint_args implements org.apache.thrift.TBase<DelFootprint_args, DelFootprint_args._Fields>, java.io.Serializable, Cloneable, Comparable<DelFootprint_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DelFootprint_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DelFootprint_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DelFootprint_argsTupleSchemeFactory());
    }

    public String id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DelFootprint_args.class, metaDataMap);
    }

    public DelFootprint_args() {
    }

    public DelFootprint_args(
      String id)
    {
      this();
      this.id = id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DelFootprint_args(DelFootprint_args other) {
      if (other.isSetId()) {
        this.id = other.id;
      }
    }

    public DelFootprint_args deepCopy() {
      return new DelFootprint_args(this);
    }

    @Override
    public void clear() {
      this.id = null;
    }

    public String getId() {
      return this.id;
    }

    public DelFootprint_args setId(String id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DelFootprint_args)
        return this.equals((DelFootprint_args)that);
      return false;
    }

    public boolean equals(DelFootprint_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_id = true && (isSetId());
      list.add(present_id);
      if (present_id)
        list.add(id);

      return list.hashCode();
    }

    @Override
    public int compareTo(DelFootprint_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DelFootprint_args(");
      boolean first = true;

      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DelFootprint_argsStandardSchemeFactory implements SchemeFactory {
      public DelFootprint_argsStandardScheme getScheme() {
        return new DelFootprint_argsStandardScheme();
      }
    }

    private static class DelFootprint_argsStandardScheme extends StandardScheme<DelFootprint_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DelFootprint_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DelFootprint_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DelFootprint_argsTupleSchemeFactory implements SchemeFactory {
      public DelFootprint_argsTupleScheme getScheme() {
        return new DelFootprint_argsTupleScheme();
      }
    }

    private static class DelFootprint_argsTupleScheme extends TupleScheme<DelFootprint_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DelFootprint_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeString(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DelFootprint_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readString();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class DelFootprint_result implements org.apache.thrift.TBase<DelFootprint_result, DelFootprint_result._Fields>, java.io.Serializable, Cloneable, Comparable<DelFootprint_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DelFootprint_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DelFootprint_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DelFootprint_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DelFootprint_result.class, metaDataMap);
    }

    public DelFootprint_result() {
    }

    public DelFootprint_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DelFootprint_result(DelFootprint_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public DelFootprint_result deepCopy() {
      return new DelFootprint_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public DelFootprint_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DelFootprint_result)
        return this.equals((DelFootprint_result)that);
      return false;
    }

    public boolean equals(DelFootprint_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(DelFootprint_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DelFootprint_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DelFootprint_resultStandardSchemeFactory implements SchemeFactory {
      public DelFootprint_resultStandardScheme getScheme() {
        return new DelFootprint_resultStandardScheme();
      }
    }

    private static class DelFootprint_resultStandardScheme extends StandardScheme<DelFootprint_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DelFootprint_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DelFootprint_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DelFootprint_resultTupleSchemeFactory implements SchemeFactory {
      public DelFootprint_resultTupleScheme getScheme() {
        return new DelFootprint_resultTupleScheme();
      }
    }

    private static class DelFootprint_resultTupleScheme extends TupleScheme<DelFootprint_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DelFootprint_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DelFootprint_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class FinishAfterSale_args implements org.apache.thrift.TBase<FinishAfterSale_args, FinishAfterSale_args._Fields>, java.io.Serializable, Cloneable, Comparable<FinishAfterSale_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FinishAfterSale_args");

    private static final org.apache.thrift.protocol.TField HMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("hmap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new FinishAfterSale_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new FinishAfterSale_argsTupleSchemeFactory());
    }

    public Map<String,String> hmap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HMAP((short)1, "hmap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HMAP
            return HMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HMAP, new org.apache.thrift.meta_data.FieldMetaData("hmap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FinishAfterSale_args.class, metaDataMap);
    }

    public FinishAfterSale_args() {
    }

    public FinishAfterSale_args(
      Map<String,String> hmap)
    {
      this();
      this.hmap = hmap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public FinishAfterSale_args(FinishAfterSale_args other) {
      if (other.isSetHmap()) {
        Map<String,String> __this__hmap = new HashMap<String,String>(other.hmap);
        this.hmap = __this__hmap;
      }
    }

    public FinishAfterSale_args deepCopy() {
      return new FinishAfterSale_args(this);
    }

    @Override
    public void clear() {
      this.hmap = null;
    }

    public int getHmapSize() {
      return (this.hmap == null) ? 0 : this.hmap.size();
    }

    public void putToHmap(String key, String val) {
      if (this.hmap == null) {
        this.hmap = new HashMap<String,String>();
      }
      this.hmap.put(key, val);
    }

    public Map<String,String> getHmap() {
      return this.hmap;
    }

    public FinishAfterSale_args setHmap(Map<String,String> hmap) {
      this.hmap = hmap;
      return this;
    }

    public void unsetHmap() {
      this.hmap = null;
    }

    /** Returns true if field hmap is set (has been assigned a value) and false otherwise */
    public boolean isSetHmap() {
      return this.hmap != null;
    }

    public void setHmapIsSet(boolean value) {
      if (!value) {
        this.hmap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HMAP:
        if (value == null) {
          unsetHmap();
        } else {
          setHmap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HMAP:
        return getHmap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HMAP:
        return isSetHmap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof FinishAfterSale_args)
        return this.equals((FinishAfterSale_args)that);
      return false;
    }

    public boolean equals(FinishAfterSale_args that) {
      if (that == null)
        return false;

      boolean this_present_hmap = true && this.isSetHmap();
      boolean that_present_hmap = true && that.isSetHmap();
      if (this_present_hmap || that_present_hmap) {
        if (!(this_present_hmap && that_present_hmap))
          return false;
        if (!this.hmap.equals(that.hmap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_hmap = true && (isSetHmap());
      list.add(present_hmap);
      if (present_hmap)
        list.add(hmap);

      return list.hashCode();
    }

    @Override
    public int compareTo(FinishAfterSale_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHmap()).compareTo(other.isSetHmap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHmap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hmap, other.hmap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("FinishAfterSale_args(");
      boolean first = true;

      sb.append("hmap:");
      if (this.hmap == null) {
        sb.append("null");
      } else {
        sb.append(this.hmap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class FinishAfterSale_argsStandardSchemeFactory implements SchemeFactory {
      public FinishAfterSale_argsStandardScheme getScheme() {
        return new FinishAfterSale_argsStandardScheme();
      }
    }

    private static class FinishAfterSale_argsStandardScheme extends StandardScheme<FinishAfterSale_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, FinishAfterSale_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map140 = iprot.readMapBegin();
                  struct.hmap = new HashMap<String,String>(2*_map140.size);
                  String _key141;
                  String _val142;
                  for (int _i143 = 0; _i143 < _map140.size; ++_i143)
                  {
                    _key141 = iprot.readString();
                    _val142 = iprot.readString();
                    struct.hmap.put(_key141, _val142);
                  }
                  iprot.readMapEnd();
                }
                struct.setHmapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, FinishAfterSale_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.hmap != null) {
          oprot.writeFieldBegin(HMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.hmap.size()));
            for (Map.Entry<String, String> _iter144 : struct.hmap.entrySet())
            {
              oprot.writeString(_iter144.getKey());
              oprot.writeString(_iter144.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class FinishAfterSale_argsTupleSchemeFactory implements SchemeFactory {
      public FinishAfterSale_argsTupleScheme getScheme() {
        return new FinishAfterSale_argsTupleScheme();
      }
    }

    private static class FinishAfterSale_argsTupleScheme extends TupleScheme<FinishAfterSale_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, FinishAfterSale_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHmap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHmap()) {
          {
            oprot.writeI32(struct.hmap.size());
            for (Map.Entry<String, String> _iter145 : struct.hmap.entrySet())
            {
              oprot.writeString(_iter145.getKey());
              oprot.writeString(_iter145.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, FinishAfterSale_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map146 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.hmap = new HashMap<String,String>(2*_map146.size);
            String _key147;
            String _val148;
            for (int _i149 = 0; _i149 < _map146.size; ++_i149)
            {
              _key147 = iprot.readString();
              _val148 = iprot.readString();
              struct.hmap.put(_key147, _val148);
            }
          }
          struct.setHmapIsSet(true);
        }
      }
    }

  }

  public static class FinishAfterSale_result implements org.apache.thrift.TBase<FinishAfterSale_result, FinishAfterSale_result._Fields>, java.io.Serializable, Cloneable, Comparable<FinishAfterSale_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FinishAfterSale_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new FinishAfterSale_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new FinishAfterSale_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FinishAfterSale_result.class, metaDataMap);
    }

    public FinishAfterSale_result() {
    }

    public FinishAfterSale_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public FinishAfterSale_result(FinishAfterSale_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public FinishAfterSale_result deepCopy() {
      return new FinishAfterSale_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public FinishAfterSale_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof FinishAfterSale_result)
        return this.equals((FinishAfterSale_result)that);
      return false;
    }

    public boolean equals(FinishAfterSale_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(FinishAfterSale_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("FinishAfterSale_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class FinishAfterSale_resultStandardSchemeFactory implements SchemeFactory {
      public FinishAfterSale_resultStandardScheme getScheme() {
        return new FinishAfterSale_resultStandardScheme();
      }
    }

    private static class FinishAfterSale_resultStandardScheme extends StandardScheme<FinishAfterSale_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, FinishAfterSale_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, FinishAfterSale_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class FinishAfterSale_resultTupleSchemeFactory implements SchemeFactory {
      public FinishAfterSale_resultTupleScheme getScheme() {
        return new FinishAfterSale_resultTupleScheme();
      }
    }

    private static class FinishAfterSale_resultTupleScheme extends TupleScheme<FinishAfterSale_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, FinishAfterSale_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, FinishAfterSale_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class ContinueAfterSale_args implements org.apache.thrift.TBase<ContinueAfterSale_args, ContinueAfterSale_args._Fields>, java.io.Serializable, Cloneable, Comparable<ContinueAfterSale_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ContinueAfterSale_args");

    private static final org.apache.thrift.protocol.TField HMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("hmap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ContinueAfterSale_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ContinueAfterSale_argsTupleSchemeFactory());
    }

    public Map<String,String> hmap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HMAP((short)1, "hmap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HMAP
            return HMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HMAP, new org.apache.thrift.meta_data.FieldMetaData("hmap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ContinueAfterSale_args.class, metaDataMap);
    }

    public ContinueAfterSale_args() {
    }

    public ContinueAfterSale_args(
      Map<String,String> hmap)
    {
      this();
      this.hmap = hmap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ContinueAfterSale_args(ContinueAfterSale_args other) {
      if (other.isSetHmap()) {
        Map<String,String> __this__hmap = new HashMap<String,String>(other.hmap);
        this.hmap = __this__hmap;
      }
    }

    public ContinueAfterSale_args deepCopy() {
      return new ContinueAfterSale_args(this);
    }

    @Override
    public void clear() {
      this.hmap = null;
    }

    public int getHmapSize() {
      return (this.hmap == null) ? 0 : this.hmap.size();
    }

    public void putToHmap(String key, String val) {
      if (this.hmap == null) {
        this.hmap = new HashMap<String,String>();
      }
      this.hmap.put(key, val);
    }

    public Map<String,String> getHmap() {
      return this.hmap;
    }

    public ContinueAfterSale_args setHmap(Map<String,String> hmap) {
      this.hmap = hmap;
      return this;
    }

    public void unsetHmap() {
      this.hmap = null;
    }

    /** Returns true if field hmap is set (has been assigned a value) and false otherwise */
    public boolean isSetHmap() {
      return this.hmap != null;
    }

    public void setHmapIsSet(boolean value) {
      if (!value) {
        this.hmap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HMAP:
        if (value == null) {
          unsetHmap();
        } else {
          setHmap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HMAP:
        return getHmap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HMAP:
        return isSetHmap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ContinueAfterSale_args)
        return this.equals((ContinueAfterSale_args)that);
      return false;
    }

    public boolean equals(ContinueAfterSale_args that) {
      if (that == null)
        return false;

      boolean this_present_hmap = true && this.isSetHmap();
      boolean that_present_hmap = true && that.isSetHmap();
      if (this_present_hmap || that_present_hmap) {
        if (!(this_present_hmap && that_present_hmap))
          return false;
        if (!this.hmap.equals(that.hmap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_hmap = true && (isSetHmap());
      list.add(present_hmap);
      if (present_hmap)
        list.add(hmap);

      return list.hashCode();
    }

    @Override
    public int compareTo(ContinueAfterSale_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHmap()).compareTo(other.isSetHmap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHmap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hmap, other.hmap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ContinueAfterSale_args(");
      boolean first = true;

      sb.append("hmap:");
      if (this.hmap == null) {
        sb.append("null");
      } else {
        sb.append(this.hmap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ContinueAfterSale_argsStandardSchemeFactory implements SchemeFactory {
      public ContinueAfterSale_argsStandardScheme getScheme() {
        return new ContinueAfterSale_argsStandardScheme();
      }
    }

    private static class ContinueAfterSale_argsStandardScheme extends StandardScheme<ContinueAfterSale_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ContinueAfterSale_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map150 = iprot.readMapBegin();
                  struct.hmap = new HashMap<String,String>(2*_map150.size);
                  String _key151;
                  String _val152;
                  for (int _i153 = 0; _i153 < _map150.size; ++_i153)
                  {
                    _key151 = iprot.readString();
                    _val152 = iprot.readString();
                    struct.hmap.put(_key151, _val152);
                  }
                  iprot.readMapEnd();
                }
                struct.setHmapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ContinueAfterSale_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.hmap != null) {
          oprot.writeFieldBegin(HMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.hmap.size()));
            for (Map.Entry<String, String> _iter154 : struct.hmap.entrySet())
            {
              oprot.writeString(_iter154.getKey());
              oprot.writeString(_iter154.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ContinueAfterSale_argsTupleSchemeFactory implements SchemeFactory {
      public ContinueAfterSale_argsTupleScheme getScheme() {
        return new ContinueAfterSale_argsTupleScheme();
      }
    }

    private static class ContinueAfterSale_argsTupleScheme extends TupleScheme<ContinueAfterSale_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ContinueAfterSale_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHmap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHmap()) {
          {
            oprot.writeI32(struct.hmap.size());
            for (Map.Entry<String, String> _iter155 : struct.hmap.entrySet())
            {
              oprot.writeString(_iter155.getKey());
              oprot.writeString(_iter155.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ContinueAfterSale_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map156 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.hmap = new HashMap<String,String>(2*_map156.size);
            String _key157;
            String _val158;
            for (int _i159 = 0; _i159 < _map156.size; ++_i159)
            {
              _key157 = iprot.readString();
              _val158 = iprot.readString();
              struct.hmap.put(_key157, _val158);
            }
          }
          struct.setHmapIsSet(true);
        }
      }
    }

  }

  public static class ContinueAfterSale_result implements org.apache.thrift.TBase<ContinueAfterSale_result, ContinueAfterSale_result._Fields>, java.io.Serializable, Cloneable, Comparable<ContinueAfterSale_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ContinueAfterSale_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ContinueAfterSale_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ContinueAfterSale_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ContinueAfterSale_result.class, metaDataMap);
    }

    public ContinueAfterSale_result() {
    }

    public ContinueAfterSale_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ContinueAfterSale_result(ContinueAfterSale_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public ContinueAfterSale_result deepCopy() {
      return new ContinueAfterSale_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public ContinueAfterSale_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ContinueAfterSale_result)
        return this.equals((ContinueAfterSale_result)that);
      return false;
    }

    public boolean equals(ContinueAfterSale_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(ContinueAfterSale_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ContinueAfterSale_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ContinueAfterSale_resultStandardSchemeFactory implements SchemeFactory {
      public ContinueAfterSale_resultStandardScheme getScheme() {
        return new ContinueAfterSale_resultStandardScheme();
      }
    }

    private static class ContinueAfterSale_resultStandardScheme extends StandardScheme<ContinueAfterSale_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ContinueAfterSale_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ContinueAfterSale_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ContinueAfterSale_resultTupleSchemeFactory implements SchemeFactory {
      public ContinueAfterSale_resultTupleScheme getScheme() {
        return new ContinueAfterSale_resultTupleScheme();
      }
    }

    private static class ContinueAfterSale_resultTupleScheme extends TupleScheme<ContinueAfterSale_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ContinueAfterSale_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ContinueAfterSale_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class ReturnAllGoods_args implements org.apache.thrift.TBase<ReturnAllGoods_args, ReturnAllGoods_args._Fields>, java.io.Serializable, Cloneable, Comparable<ReturnAllGoods_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReturnAllGoods_args");

    private static final org.apache.thrift.protocol.TField HMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("hmap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ReturnAllGoods_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ReturnAllGoods_argsTupleSchemeFactory());
    }

    public Map<String,String> hmap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HMAP((short)1, "hmap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HMAP
            return HMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HMAP, new org.apache.thrift.meta_data.FieldMetaData("hmap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReturnAllGoods_args.class, metaDataMap);
    }

    public ReturnAllGoods_args() {
    }

    public ReturnAllGoods_args(
      Map<String,String> hmap)
    {
      this();
      this.hmap = hmap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ReturnAllGoods_args(ReturnAllGoods_args other) {
      if (other.isSetHmap()) {
        Map<String,String> __this__hmap = new HashMap<String,String>(other.hmap);
        this.hmap = __this__hmap;
      }
    }

    public ReturnAllGoods_args deepCopy() {
      return new ReturnAllGoods_args(this);
    }

    @Override
    public void clear() {
      this.hmap = null;
    }

    public int getHmapSize() {
      return (this.hmap == null) ? 0 : this.hmap.size();
    }

    public void putToHmap(String key, String val) {
      if (this.hmap == null) {
        this.hmap = new HashMap<String,String>();
      }
      this.hmap.put(key, val);
    }

    public Map<String,String> getHmap() {
      return this.hmap;
    }

    public ReturnAllGoods_args setHmap(Map<String,String> hmap) {
      this.hmap = hmap;
      return this;
    }

    public void unsetHmap() {
      this.hmap = null;
    }

    /** Returns true if field hmap is set (has been assigned a value) and false otherwise */
    public boolean isSetHmap() {
      return this.hmap != null;
    }

    public void setHmapIsSet(boolean value) {
      if (!value) {
        this.hmap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HMAP:
        if (value == null) {
          unsetHmap();
        } else {
          setHmap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HMAP:
        return getHmap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HMAP:
        return isSetHmap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ReturnAllGoods_args)
        return this.equals((ReturnAllGoods_args)that);
      return false;
    }

    public boolean equals(ReturnAllGoods_args that) {
      if (that == null)
        return false;

      boolean this_present_hmap = true && this.isSetHmap();
      boolean that_present_hmap = true && that.isSetHmap();
      if (this_present_hmap || that_present_hmap) {
        if (!(this_present_hmap && that_present_hmap))
          return false;
        if (!this.hmap.equals(that.hmap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_hmap = true && (isSetHmap());
      list.add(present_hmap);
      if (present_hmap)
        list.add(hmap);

      return list.hashCode();
    }

    @Override
    public int compareTo(ReturnAllGoods_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHmap()).compareTo(other.isSetHmap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHmap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hmap, other.hmap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ReturnAllGoods_args(");
      boolean first = true;

      sb.append("hmap:");
      if (this.hmap == null) {
        sb.append("null");
      } else {
        sb.append(this.hmap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ReturnAllGoods_argsStandardSchemeFactory implements SchemeFactory {
      public ReturnAllGoods_argsStandardScheme getScheme() {
        return new ReturnAllGoods_argsStandardScheme();
      }
    }

    private static class ReturnAllGoods_argsStandardScheme extends StandardScheme<ReturnAllGoods_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ReturnAllGoods_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map160 = iprot.readMapBegin();
                  struct.hmap = new HashMap<String,String>(2*_map160.size);
                  String _key161;
                  String _val162;
                  for (int _i163 = 0; _i163 < _map160.size; ++_i163)
                  {
                    _key161 = iprot.readString();
                    _val162 = iprot.readString();
                    struct.hmap.put(_key161, _val162);
                  }
                  iprot.readMapEnd();
                }
                struct.setHmapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ReturnAllGoods_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.hmap != null) {
          oprot.writeFieldBegin(HMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.hmap.size()));
            for (Map.Entry<String, String> _iter164 : struct.hmap.entrySet())
            {
              oprot.writeString(_iter164.getKey());
              oprot.writeString(_iter164.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ReturnAllGoods_argsTupleSchemeFactory implements SchemeFactory {
      public ReturnAllGoods_argsTupleScheme getScheme() {
        return new ReturnAllGoods_argsTupleScheme();
      }
    }

    private static class ReturnAllGoods_argsTupleScheme extends TupleScheme<ReturnAllGoods_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ReturnAllGoods_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHmap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHmap()) {
          {
            oprot.writeI32(struct.hmap.size());
            for (Map.Entry<String, String> _iter165 : struct.hmap.entrySet())
            {
              oprot.writeString(_iter165.getKey());
              oprot.writeString(_iter165.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ReturnAllGoods_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map166 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.hmap = new HashMap<String,String>(2*_map166.size);
            String _key167;
            String _val168;
            for (int _i169 = 0; _i169 < _map166.size; ++_i169)
            {
              _key167 = iprot.readString();
              _val168 = iprot.readString();
              struct.hmap.put(_key167, _val168);
            }
          }
          struct.setHmapIsSet(true);
        }
      }
    }

  }

  public static class ReturnAllGoods_result implements org.apache.thrift.TBase<ReturnAllGoods_result, ReturnAllGoods_result._Fields>, java.io.Serializable, Cloneable, Comparable<ReturnAllGoods_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReturnAllGoods_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ReturnAllGoods_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ReturnAllGoods_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReturnAllGoods_result.class, metaDataMap);
    }

    public ReturnAllGoods_result() {
    }

    public ReturnAllGoods_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ReturnAllGoods_result(ReturnAllGoods_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public ReturnAllGoods_result deepCopy() {
      return new ReturnAllGoods_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public ReturnAllGoods_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ReturnAllGoods_result)
        return this.equals((ReturnAllGoods_result)that);
      return false;
    }

    public boolean equals(ReturnAllGoods_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(ReturnAllGoods_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ReturnAllGoods_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ReturnAllGoods_resultStandardSchemeFactory implements SchemeFactory {
      public ReturnAllGoods_resultStandardScheme getScheme() {
        return new ReturnAllGoods_resultStandardScheme();
      }
    }

    private static class ReturnAllGoods_resultStandardScheme extends StandardScheme<ReturnAllGoods_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ReturnAllGoods_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ReturnAllGoods_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ReturnAllGoods_resultTupleSchemeFactory implements SchemeFactory {
      public ReturnAllGoods_resultTupleScheme getScheme() {
        return new ReturnAllGoods_resultTupleScheme();
      }
    }

    private static class ReturnAllGoods_resultTupleScheme extends TupleScheme<ReturnAllGoods_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ReturnAllGoods_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ReturnAllGoods_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class ReturnPartofGoods_args implements org.apache.thrift.TBase<ReturnPartofGoods_args, ReturnPartofGoods_args._Fields>, java.io.Serializable, Cloneable, Comparable<ReturnPartofGoods_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReturnPartofGoods_args");

    private static final org.apache.thrift.protocol.TField HMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("hmap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ReturnPartofGoods_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ReturnPartofGoods_argsTupleSchemeFactory());
    }

    public Map<String,String> hmap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HMAP((short)1, "hmap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HMAP
            return HMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HMAP, new org.apache.thrift.meta_data.FieldMetaData("hmap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReturnPartofGoods_args.class, metaDataMap);
    }

    public ReturnPartofGoods_args() {
    }

    public ReturnPartofGoods_args(
      Map<String,String> hmap)
    {
      this();
      this.hmap = hmap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ReturnPartofGoods_args(ReturnPartofGoods_args other) {
      if (other.isSetHmap()) {
        Map<String,String> __this__hmap = new HashMap<String,String>(other.hmap);
        this.hmap = __this__hmap;
      }
    }

    public ReturnPartofGoods_args deepCopy() {
      return new ReturnPartofGoods_args(this);
    }

    @Override
    public void clear() {
      this.hmap = null;
    }

    public int getHmapSize() {
      return (this.hmap == null) ? 0 : this.hmap.size();
    }

    public void putToHmap(String key, String val) {
      if (this.hmap == null) {
        this.hmap = new HashMap<String,String>();
      }
      this.hmap.put(key, val);
    }

    public Map<String,String> getHmap() {
      return this.hmap;
    }

    public ReturnPartofGoods_args setHmap(Map<String,String> hmap) {
      this.hmap = hmap;
      return this;
    }

    public void unsetHmap() {
      this.hmap = null;
    }

    /** Returns true if field hmap is set (has been assigned a value) and false otherwise */
    public boolean isSetHmap() {
      return this.hmap != null;
    }

    public void setHmapIsSet(boolean value) {
      if (!value) {
        this.hmap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HMAP:
        if (value == null) {
          unsetHmap();
        } else {
          setHmap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HMAP:
        return getHmap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HMAP:
        return isSetHmap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ReturnPartofGoods_args)
        return this.equals((ReturnPartofGoods_args)that);
      return false;
    }

    public boolean equals(ReturnPartofGoods_args that) {
      if (that == null)
        return false;

      boolean this_present_hmap = true && this.isSetHmap();
      boolean that_present_hmap = true && that.isSetHmap();
      if (this_present_hmap || that_present_hmap) {
        if (!(this_present_hmap && that_present_hmap))
          return false;
        if (!this.hmap.equals(that.hmap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_hmap = true && (isSetHmap());
      list.add(present_hmap);
      if (present_hmap)
        list.add(hmap);

      return list.hashCode();
    }

    @Override
    public int compareTo(ReturnPartofGoods_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHmap()).compareTo(other.isSetHmap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHmap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hmap, other.hmap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ReturnPartofGoods_args(");
      boolean first = true;

      sb.append("hmap:");
      if (this.hmap == null) {
        sb.append("null");
      } else {
        sb.append(this.hmap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ReturnPartofGoods_argsStandardSchemeFactory implements SchemeFactory {
      public ReturnPartofGoods_argsStandardScheme getScheme() {
        return new ReturnPartofGoods_argsStandardScheme();
      }
    }

    private static class ReturnPartofGoods_argsStandardScheme extends StandardScheme<ReturnPartofGoods_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ReturnPartofGoods_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map170 = iprot.readMapBegin();
                  struct.hmap = new HashMap<String,String>(2*_map170.size);
                  String _key171;
                  String _val172;
                  for (int _i173 = 0; _i173 < _map170.size; ++_i173)
                  {
                    _key171 = iprot.readString();
                    _val172 = iprot.readString();
                    struct.hmap.put(_key171, _val172);
                  }
                  iprot.readMapEnd();
                }
                struct.setHmapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ReturnPartofGoods_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.hmap != null) {
          oprot.writeFieldBegin(HMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.hmap.size()));
            for (Map.Entry<String, String> _iter174 : struct.hmap.entrySet())
            {
              oprot.writeString(_iter174.getKey());
              oprot.writeString(_iter174.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ReturnPartofGoods_argsTupleSchemeFactory implements SchemeFactory {
      public ReturnPartofGoods_argsTupleScheme getScheme() {
        return new ReturnPartofGoods_argsTupleScheme();
      }
    }

    private static class ReturnPartofGoods_argsTupleScheme extends TupleScheme<ReturnPartofGoods_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ReturnPartofGoods_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHmap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHmap()) {
          {
            oprot.writeI32(struct.hmap.size());
            for (Map.Entry<String, String> _iter175 : struct.hmap.entrySet())
            {
              oprot.writeString(_iter175.getKey());
              oprot.writeString(_iter175.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ReturnPartofGoods_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map176 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.hmap = new HashMap<String,String>(2*_map176.size);
            String _key177;
            String _val178;
            for (int _i179 = 0; _i179 < _map176.size; ++_i179)
            {
              _key177 = iprot.readString();
              _val178 = iprot.readString();
              struct.hmap.put(_key177, _val178);
            }
          }
          struct.setHmapIsSet(true);
        }
      }
    }

  }

  public static class ReturnPartofGoods_result implements org.apache.thrift.TBase<ReturnPartofGoods_result, ReturnPartofGoods_result._Fields>, java.io.Serializable, Cloneable, Comparable<ReturnPartofGoods_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReturnPartofGoods_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ReturnPartofGoods_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ReturnPartofGoods_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReturnPartofGoods_result.class, metaDataMap);
    }

    public ReturnPartofGoods_result() {
    }

    public ReturnPartofGoods_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ReturnPartofGoods_result(ReturnPartofGoods_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public ReturnPartofGoods_result deepCopy() {
      return new ReturnPartofGoods_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public ReturnPartofGoods_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ReturnPartofGoods_result)
        return this.equals((ReturnPartofGoods_result)that);
      return false;
    }

    public boolean equals(ReturnPartofGoods_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(ReturnPartofGoods_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ReturnPartofGoods_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ReturnPartofGoods_resultStandardSchemeFactory implements SchemeFactory {
      public ReturnPartofGoods_resultStandardScheme getScheme() {
        return new ReturnPartofGoods_resultStandardScheme();
      }
    }

    private static class ReturnPartofGoods_resultStandardScheme extends StandardScheme<ReturnPartofGoods_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ReturnPartofGoods_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ReturnPartofGoods_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ReturnPartofGoods_resultTupleSchemeFactory implements SchemeFactory {
      public ReturnPartofGoods_resultTupleScheme getScheme() {
        return new ReturnPartofGoods_resultTupleScheme();
      }
    }

    private static class ReturnPartofGoods_resultTupleScheme extends TupleScheme<ReturnPartofGoods_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ReturnPartofGoods_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ReturnPartofGoods_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class ApplyRefund_args implements org.apache.thrift.TBase<ApplyRefund_args, ApplyRefund_args._Fields>, java.io.Serializable, Cloneable, Comparable<ApplyRefund_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ApplyRefund_args");

    private static final org.apache.thrift.protocol.TField HMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("hmap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ApplyRefund_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ApplyRefund_argsTupleSchemeFactory());
    }

    public Map<String,String> hmap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HMAP((short)1, "hmap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HMAP
            return HMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HMAP, new org.apache.thrift.meta_data.FieldMetaData("hmap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ApplyRefund_args.class, metaDataMap);
    }

    public ApplyRefund_args() {
    }

    public ApplyRefund_args(
      Map<String,String> hmap)
    {
      this();
      this.hmap = hmap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ApplyRefund_args(ApplyRefund_args other) {
      if (other.isSetHmap()) {
        Map<String,String> __this__hmap = new HashMap<String,String>(other.hmap);
        this.hmap = __this__hmap;
      }
    }

    public ApplyRefund_args deepCopy() {
      return new ApplyRefund_args(this);
    }

    @Override
    public void clear() {
      this.hmap = null;
    }

    public int getHmapSize() {
      return (this.hmap == null) ? 0 : this.hmap.size();
    }

    public void putToHmap(String key, String val) {
      if (this.hmap == null) {
        this.hmap = new HashMap<String,String>();
      }
      this.hmap.put(key, val);
    }

    public Map<String,String> getHmap() {
      return this.hmap;
    }

    public ApplyRefund_args setHmap(Map<String,String> hmap) {
      this.hmap = hmap;
      return this;
    }

    public void unsetHmap() {
      this.hmap = null;
    }

    /** Returns true if field hmap is set (has been assigned a value) and false otherwise */
    public boolean isSetHmap() {
      return this.hmap != null;
    }

    public void setHmapIsSet(boolean value) {
      if (!value) {
        this.hmap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HMAP:
        if (value == null) {
          unsetHmap();
        } else {
          setHmap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HMAP:
        return getHmap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HMAP:
        return isSetHmap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ApplyRefund_args)
        return this.equals((ApplyRefund_args)that);
      return false;
    }

    public boolean equals(ApplyRefund_args that) {
      if (that == null)
        return false;

      boolean this_present_hmap = true && this.isSetHmap();
      boolean that_present_hmap = true && that.isSetHmap();
      if (this_present_hmap || that_present_hmap) {
        if (!(this_present_hmap && that_present_hmap))
          return false;
        if (!this.hmap.equals(that.hmap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_hmap = true && (isSetHmap());
      list.add(present_hmap);
      if (present_hmap)
        list.add(hmap);

      return list.hashCode();
    }

    @Override
    public int compareTo(ApplyRefund_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHmap()).compareTo(other.isSetHmap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHmap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hmap, other.hmap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ApplyRefund_args(");
      boolean first = true;

      sb.append("hmap:");
      if (this.hmap == null) {
        sb.append("null");
      } else {
        sb.append(this.hmap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ApplyRefund_argsStandardSchemeFactory implements SchemeFactory {
      public ApplyRefund_argsStandardScheme getScheme() {
        return new ApplyRefund_argsStandardScheme();
      }
    }

    private static class ApplyRefund_argsStandardScheme extends StandardScheme<ApplyRefund_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ApplyRefund_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map180 = iprot.readMapBegin();
                  struct.hmap = new HashMap<String,String>(2*_map180.size);
                  String _key181;
                  String _val182;
                  for (int _i183 = 0; _i183 < _map180.size; ++_i183)
                  {
                    _key181 = iprot.readString();
                    _val182 = iprot.readString();
                    struct.hmap.put(_key181, _val182);
                  }
                  iprot.readMapEnd();
                }
                struct.setHmapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ApplyRefund_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.hmap != null) {
          oprot.writeFieldBegin(HMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.hmap.size()));
            for (Map.Entry<String, String> _iter184 : struct.hmap.entrySet())
            {
              oprot.writeString(_iter184.getKey());
              oprot.writeString(_iter184.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ApplyRefund_argsTupleSchemeFactory implements SchemeFactory {
      public ApplyRefund_argsTupleScheme getScheme() {
        return new ApplyRefund_argsTupleScheme();
      }
    }

    private static class ApplyRefund_argsTupleScheme extends TupleScheme<ApplyRefund_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ApplyRefund_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHmap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHmap()) {
          {
            oprot.writeI32(struct.hmap.size());
            for (Map.Entry<String, String> _iter185 : struct.hmap.entrySet())
            {
              oprot.writeString(_iter185.getKey());
              oprot.writeString(_iter185.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ApplyRefund_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map186 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.hmap = new HashMap<String,String>(2*_map186.size);
            String _key187;
            String _val188;
            for (int _i189 = 0; _i189 < _map186.size; ++_i189)
            {
              _key187 = iprot.readString();
              _val188 = iprot.readString();
              struct.hmap.put(_key187, _val188);
            }
          }
          struct.setHmapIsSet(true);
        }
      }
    }

  }

  public static class ApplyRefund_result implements org.apache.thrift.TBase<ApplyRefund_result, ApplyRefund_result._Fields>, java.io.Serializable, Cloneable, Comparable<ApplyRefund_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ApplyRefund_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ApplyRefund_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ApplyRefund_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ApplyRefund_result.class, metaDataMap);
    }

    public ApplyRefund_result() {
    }

    public ApplyRefund_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ApplyRefund_result(ApplyRefund_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public ApplyRefund_result deepCopy() {
      return new ApplyRefund_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public ApplyRefund_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ApplyRefund_result)
        return this.equals((ApplyRefund_result)that);
      return false;
    }

    public boolean equals(ApplyRefund_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(ApplyRefund_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ApplyRefund_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ApplyRefund_resultStandardSchemeFactory implements SchemeFactory {
      public ApplyRefund_resultStandardScheme getScheme() {
        return new ApplyRefund_resultStandardScheme();
      }
    }

    private static class ApplyRefund_resultStandardScheme extends StandardScheme<ApplyRefund_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ApplyRefund_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ApplyRefund_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ApplyRefund_resultTupleSchemeFactory implements SchemeFactory {
      public ApplyRefund_resultTupleScheme getScheme() {
        return new ApplyRefund_resultTupleScheme();
      }
    }

    private static class ApplyRefund_resultTupleScheme extends TupleScheme<ApplyRefund_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ApplyRefund_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ApplyRefund_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}

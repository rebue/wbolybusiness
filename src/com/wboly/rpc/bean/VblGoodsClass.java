package com.wboly.rpc.bean;

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Generated;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked" })
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-07-09")
public class VblGoodsClass implements org.apache.thrift.TBase<VblGoodsClass, VblGoodsClass._Fields>,
		java.io.Serializable, Cloneable, Comparable<VblGoodsClass> {
	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"VblGoodsClass");

	private static final org.apache.thrift.protocol.TField CLASS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"classId", org.apache.thrift.protocol.TType.I32, (short) 1);
	private static final org.apache.thrift.protocol.TField PARENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"parentId", org.apache.thrift.protocol.TType.I16, (short) 2);
	private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"name", org.apache.thrift.protocol.TType.STRING, (short) 3);
	private static final org.apache.thrift.protocol.TField SORT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"sort", org.apache.thrift.protocol.TType.BYTE, (short) 4);
	private static final org.apache.thrift.protocol.TField ICON_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"icon", org.apache.thrift.protocol.TType.STRING, (short) 5);

	private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
	static {
		schemes.put(StandardScheme.class, new VblGoodsClassStandardSchemeFactory());
		schemes.put(TupleScheme.class, new VblGoodsClassTupleSchemeFactory());
	}

	public int classId; // ������Ϣ���
	public short parentId; // ��������Ϣ���
	public String name; // ������
	public byte sort; // �����
	public String icon; // icon

	/**
	 * The set of fields this struct contains, along with convenience methods
	 * for finding and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		CLASS_ID((short) 1, "classId"), PARENT_ID((short) 2, "parentId"), NAME((short) 3, "name"), SORT((short) 4,
				"sort"), ICON((short) 5, "icon");

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

		static {
			for (_Fields field : EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not
		 * found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // CLASS_ID
				return CLASS_ID;
			case 2: // PARENT_ID
				return PARENT_ID;
			case 3: // NAME
				return NAME;
			case 4: // SORT
				return SORT;
			case 5: // ICON
				return ICON;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception
		 * if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not
		 * found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	private static final int __CLASSID_ISSET_ID = 0;
	private static final int __PARENTID_ISSET_ID = 1;
	private static final int __SORT_ISSET_ID = 2;
	private byte __isset_bitfield = 0;
	public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.CLASS_ID,
				new org.apache.thrift.meta_data.FieldMetaData("classId",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.PARENT_ID,
				new org.apache.thrift.meta_data.FieldMetaData("parentId",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
		tmpMap.put(_Fields.NAME,
				new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.SORT,
				new org.apache.thrift.meta_data.FieldMetaData("sort", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
		tmpMap.put(_Fields.ICON,
				new org.apache.thrift.meta_data.FieldMetaData("icon", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		metaDataMap = Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(VblGoodsClass.class, metaDataMap);
	}

	public VblGoodsClass() {
	}

	public VblGoodsClass(int classId, short parentId, String name, byte sort, String icon) {
		this();
		this.classId = classId;
		setClassIdIsSet(true);
		this.parentId = parentId;
		setParentIdIsSet(true);
		this.name = name;
		this.sort = sort;
		setSortIsSet(true);
		this.icon = icon;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public VblGoodsClass(VblGoodsClass other) {
		__isset_bitfield = other.__isset_bitfield;
		this.classId = other.classId;
		this.parentId = other.parentId;
		if (other.isSetName()) {
			this.name = other.name;
		}
		this.sort = other.sort;
		if (other.isSetIcon()) {
			this.icon = other.icon;
		}
	}

	public VblGoodsClass deepCopy() {
		return new VblGoodsClass(this);
	}

	@Override
	public void clear() {
		setClassIdIsSet(false);
		this.classId = 0;
		setParentIdIsSet(false);
		this.parentId = 0;
		this.name = null;
		setSortIsSet(false);
		this.sort = 0;
		this.icon = null;
	}

	public int getClassId() {
		return this.classId;
	}

	public VblGoodsClass setClassId(int classId) {
		this.classId = classId;
		setClassIdIsSet(true);
		return this;
	}

	public void unsetClassId() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLASSID_ISSET_ID);
	}

	/**
	 * Returns true if field classId is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetClassId() {
		return EncodingUtils.testBit(__isset_bitfield, __CLASSID_ISSET_ID);
	}

	public void setClassIdIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLASSID_ISSET_ID, value);
	}

	public short getParentId() {
		return this.parentId;
	}

	public VblGoodsClass setParentId(short parentId) {
		this.parentId = parentId;
		setParentIdIsSet(true);
		return this;
	}

	public void unsetParentId() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARENTID_ISSET_ID);
	}

	/**
	 * Returns true if field parentId is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetParentId() {
		return EncodingUtils.testBit(__isset_bitfield, __PARENTID_ISSET_ID);
	}

	public void setParentIdIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARENTID_ISSET_ID, value);
	}

	public String getName() {
		return this.name;
	}

	public VblGoodsClass setName(String name) {
		this.name = name;
		return this;
	}

	public void unsetName() {
		this.name = null;
	}

	/**
	 * Returns true if field name is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetName() {
		return this.name != null;
	}

	public void setNameIsSet(boolean value) {
		if (!value) {
			this.name = null;
		}
	}

	public byte getSort() {
		return this.sort;
	}

	public VblGoodsClass setSort(byte sort) {
		this.sort = sort;
		setSortIsSet(true);
		return this;
	}

	public void unsetSort() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SORT_ISSET_ID);
	}

	/**
	 * Returns true if field sort is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetSort() {
		return EncodingUtils.testBit(__isset_bitfield, __SORT_ISSET_ID);
	}

	public void setSortIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SORT_ISSET_ID, value);
	}

	public String getIcon() {
		return this.icon;
	}

	public VblGoodsClass setIcon(String icon) {
		this.icon = icon;
		return this;
	}

	public void unsetIcon() {
		this.icon = null;
	}

	/**
	 * Returns true if field icon is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIcon() {
		return this.icon != null;
	}

	public void setIconIsSet(boolean value) {
		if (!value) {
			this.icon = null;
		}
	}

	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
		case CLASS_ID:
			if (value == null) {
				unsetClassId();
			} else {
				setClassId((Integer) value);
			}
			break;

		case PARENT_ID:
			if (value == null) {
				unsetParentId();
			} else {
				setParentId((Short) value);
			}
			break;

		case NAME:
			if (value == null) {
				unsetName();
			} else {
				setName((String) value);
			}
			break;

		case SORT:
			if (value == null) {
				unsetSort();
			} else {
				setSort((Byte) value);
			}
			break;

		case ICON:
			if (value == null) {
				unsetIcon();
			} else {
				setIcon((String) value);
			}
			break;

		}
	}

	public Object getFieldValue(_Fields field) {
		switch (field) {
		case CLASS_ID:
			return getClassId();

		case PARENT_ID:
			return getParentId();

		case NAME:
			return getName();

		case SORT:
			return getSort();

		case ICON:
			return getIcon();

		}
		throw new IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned
	 * a value) and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
		}

		switch (field) {
		case CLASS_ID:
			return isSetClassId();
		case PARENT_ID:
			return isSetParentId();
		case NAME:
			return isSetName();
		case SORT:
			return isSetSort();
		case ICON:
			return isSetIcon();
		}
		throw new IllegalStateException();
	}

	@Override
	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (that instanceof VblGoodsClass)
			return this.equals((VblGoodsClass) that);
		return false;
	}

	public boolean equals(VblGoodsClass that) {
		if (that == null)
			return false;

		boolean this_present_classId = true;
		boolean that_present_classId = true;
		if (this_present_classId || that_present_classId) {
			if (!(this_present_classId && that_present_classId))
				return false;
			if (this.classId != that.classId)
				return false;
		}

		boolean this_present_parentId = true;
		boolean that_present_parentId = true;
		if (this_present_parentId || that_present_parentId) {
			if (!(this_present_parentId && that_present_parentId))
				return false;
			if (this.parentId != that.parentId)
				return false;
		}

		boolean this_present_name = true && this.isSetName();
		boolean that_present_name = true && that.isSetName();
		if (this_present_name || that_present_name) {
			if (!(this_present_name && that_present_name))
				return false;
			if (!this.name.equals(that.name))
				return false;
		}

		boolean this_present_sort = true;
		boolean that_present_sort = true;
		if (this_present_sort || that_present_sort) {
			if (!(this_present_sort && that_present_sort))
				return false;
			if (this.sort != that.sort)
				return false;
		}

		boolean this_present_icon = true && this.isSetIcon();
		boolean that_present_icon = true && that.isSetIcon();
		if (this_present_icon || that_present_icon) {
			if (!(this_present_icon && that_present_icon))
				return false;
			if (!this.icon.equals(that.icon))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		List<Object> list = new ArrayList<Object>();

		boolean present_classId = true;
		list.add(present_classId);
		if (present_classId)
			list.add(classId);

		boolean present_parentId = true;
		list.add(present_parentId);
		if (present_parentId)
			list.add(parentId);

		boolean present_name = true && (isSetName());
		list.add(present_name);
		if (present_name)
			list.add(name);

		boolean present_sort = true;
		list.add(present_sort);
		if (present_sort)
			list.add(sort);

		boolean present_icon = true && (isSetIcon());
		list.add(present_icon);
		if (present_icon)
			list.add(icon);

		return list.hashCode();
	}

	@Override
	public int compareTo(VblGoodsClass other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = Boolean.valueOf(isSetClassId()).compareTo(other.isSetClassId());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetClassId()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.classId, other.classId);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetParentId()).compareTo(other.isSetParentId());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetParentId()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentId, other.parentId);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetName()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetSort()).compareTo(other.isSetSort());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetSort()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sort, other.sort);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetIcon()).compareTo(other.isSetIcon());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIcon()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.icon, other.icon);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("VblGoodsClass(");
		boolean first = true;

		sb.append("classId:");
		sb.append(this.classId);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("parentId:");
		sb.append(this.parentId);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("name:");
		if (this.name == null) {
			sb.append("null");
		} else {
			sb.append(this.name);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("sort:");
		sb.append(this.sort);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("icon:");
		if (this.icon == null) {
			sb.append("null");
		} else {
			sb.append(this.icon);
		}
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java
			// serialization is wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class VblGoodsClassStandardSchemeFactory implements SchemeFactory {
		public VblGoodsClassStandardScheme getScheme() {
			return new VblGoodsClassStandardScheme();
		}
	}

	private static class VblGoodsClassStandardScheme extends StandardScheme<VblGoodsClass> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, VblGoodsClass struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // CLASS_ID
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.classId = iprot.readI32();
						struct.setClassIdIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // PARENT_ID
					if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
						struct.parentId = iprot.readI16();
						struct.setParentIdIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // NAME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.name = iprot.readString();
						struct.setNameIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 4: // SORT
					if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
						struct.sort = iprot.readByte();
						struct.setSortIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 5: // ICON
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.icon = iprot.readString();
						struct.setIconIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be
			// checked in the validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, VblGoodsClass struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			oprot.writeFieldBegin(CLASS_ID_FIELD_DESC);
			oprot.writeI32(struct.classId);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(PARENT_ID_FIELD_DESC);
			oprot.writeI16(struct.parentId);
			oprot.writeFieldEnd();
			if (struct.name != null) {
				oprot.writeFieldBegin(NAME_FIELD_DESC);
				oprot.writeString(struct.name);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(SORT_FIELD_DESC);
			oprot.writeByte(struct.sort);
			oprot.writeFieldEnd();
			if (struct.icon != null) {
				oprot.writeFieldBegin(ICON_FIELD_DESC);
				oprot.writeString(struct.icon);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class VblGoodsClassTupleSchemeFactory implements SchemeFactory {
		public VblGoodsClassTupleScheme getScheme() {
			return new VblGoodsClassTupleScheme();
		}
	}

	private static class VblGoodsClassTupleScheme extends TupleScheme<VblGoodsClass> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, VblGoodsClass struct)
				throws org.apache.thrift.TException {
			TTupleProtocol oprot = (TTupleProtocol) prot;
			BitSet optionals = new BitSet();
			if (struct.isSetClassId()) {
				optionals.set(0);
			}
			if (struct.isSetParentId()) {
				optionals.set(1);
			}
			if (struct.isSetName()) {
				optionals.set(2);
			}
			if (struct.isSetSort()) {
				optionals.set(3);
			}
			if (struct.isSetIcon()) {
				optionals.set(4);
			}
			oprot.writeBitSet(optionals, 5);
			if (struct.isSetClassId()) {
				oprot.writeI32(struct.classId);
			}
			if (struct.isSetParentId()) {
				oprot.writeI16(struct.parentId);
			}
			if (struct.isSetName()) {
				oprot.writeString(struct.name);
			}
			if (struct.isSetSort()) {
				oprot.writeByte(struct.sort);
			}
			if (struct.isSetIcon()) {
				oprot.writeString(struct.icon);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, VblGoodsClass struct)
				throws org.apache.thrift.TException {
			TTupleProtocol iprot = (TTupleProtocol) prot;
			BitSet incoming = iprot.readBitSet(5);
			if (incoming.get(0)) {
				struct.classId = iprot.readI32();
				struct.setClassIdIsSet(true);
			}
			if (incoming.get(1)) {
				struct.parentId = iprot.readI16();
				struct.setParentIdIsSet(true);
			}
			if (incoming.get(2)) {
				struct.name = iprot.readString();
				struct.setNameIsSet(true);
			}
			if (incoming.get(3)) {
				struct.sort = iprot.readByte();
				struct.setSortIsSet(true);
			}
			if (incoming.get(4)) {
				struct.icon = iprot.readString();
				struct.setIconIsSet(true);
			}
		}
	}

}
